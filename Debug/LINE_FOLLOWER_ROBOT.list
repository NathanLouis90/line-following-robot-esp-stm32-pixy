
LINE_FOLLOWER_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec00  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001574  0800eda0  0800eda0  0000fda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010314  08010314  00014674  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010314  08010314  00011314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801031c  0801031c  00014674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801031c  0801031c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010320  08010320  00011320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002674  20000000  08010324  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014674  2**0
                  CONTENTS
 10 .bss          000004a8  20002674  20002674  00014674  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002b1c  20002b1c  00014674  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014674  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e51f  00000000  00000000  000146a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003af2  00000000  00000000  00032bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  000366b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001171  00000000  00000000  00037cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f7a  00000000  00000000  00038e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d235  00000000  00000000  0005cda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d185d  00000000  00000000  00079fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b835  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072d8  00000000  00000000  0014b878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00152b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20002674 	.word	0x20002674
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed88 	.word	0x0800ed88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20002678 	.word	0x20002678
 80001dc:	0800ed88 	.word	0x0800ed88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <HAL_GPIO_EXTI_Callback>:
extern UART_Tx_t g_UART2_tx;
extern VelocimetricWheel_t g_left_VCW;
extern VelocimetricWheel_t g_right_VCW;

/* START GREEN LED & MOTOR CALLBACKS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c68:	d007      	beq.n	8000c7a <HAL_GPIO_EXTI_Callback+0x22>
 8000c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c6e:	dc4e      	bgt.n	8000d0e <HAL_GPIO_EXTI_Callback+0xb6>
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d022      	beq.n	8000cba <HAL_GPIO_EXTI_Callback+0x62>
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d037      	beq.n	8000ce8 <HAL_GPIO_EXTI_Callback+0x90>
//			printf("Right VCW Falling!\n");
			g_right_VCW.fall_count++;
		}
		break;
	}
}
 8000c78:	e049      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0xb6>
		switch (greenBlinker.delayValue) {
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d008      	beq.n	8000c98 <HAL_GPIO_EXTI_Callback+0x40>
 8000c86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d109      	bne.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x4a>
			greenBlinker.delayValue = MEDIUM_DELAY;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c94:	601a      	str	r2, [r3, #0]
			break;
 8000c96:	e009      	b.n	8000cac <HAL_GPIO_EXTI_Callback+0x54>
			greenBlinker.delayValue = SHORT_DELAY;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c9a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000c9e:	601a      	str	r2, [r3, #0]
			break;
 8000ca0:	e004      	b.n	8000cac <HAL_GPIO_EXTI_Callback+0x54>
			greenBlinker.delayValue = LONG_DELAY;
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000ca4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ca8:	601a      	str	r2, [r3, #0]
			break;
 8000caa:	bf00      	nop
				greenBlinker.delayValue);
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
		printf("The blink duration is %lu milliseconds.\n",
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	481a      	ldr	r0, [pc, #104]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000cb4:	f00b f814 	bl	800bce0 <iprintf>
		break;
 8000cb8:	e029      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0xb6>
		if (HAL_GPIO_ReadPin(g_left_VCW.port, g_left_VCW.pin)) {
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cc0:	8892      	ldrh	r2, [r2, #4]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 fcb5 	bl	8005634 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <HAL_GPIO_EXTI_Callback+0x84>
			g_left_VCW.rise_count++;
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cd8:	6093      	str	r3, [r2, #8]
		break;
 8000cda:	e018      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0xb6>
			g_left_VCW.fall_count++;
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000ce4:	60d3      	str	r3, [r2, #12]
		break;
 8000ce6:	e012      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0xb6>
		if (HAL_GPIO_ReadPin(Right_VCW_GPIO_Port, Right_VCW_Pin)) {
 8000ce8:	2102      	movs	r1, #2
 8000cea:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000cec:	f004 fca2 	bl	8005634 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <HAL_GPIO_EXTI_Callback+0xaa>
			g_right_VCW.rise_count++;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000cfe:	6093      	str	r3, [r2, #8]
		break;
 8000d00:	e004      	b.n	8000d0c <HAL_GPIO_EXTI_Callback+0xb4>
			g_right_VCW.fall_count++;
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	3301      	adds	r3, #1
 8000d08:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000d0a:	60d3      	str	r3, [r2, #12]
		break;
 8000d0c:	bf00      	nop
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200029bc 	.word	0x200029bc
 8000d1c:	0800eda0 	.word	0x0800eda0
 8000d20:	200021dc 	.word	0x200021dc
 8000d24:	48000800 	.word	0x48000800
 8000d28:	200021f4 	.word	0x200021f4

08000d2c <HAL_UART_ErrorCallback>:
/* END GREEN LED & MOTOR CALLBACKS */

/* START ESP CALLBACKS */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0c      	ldr	r2, [pc, #48]	@ (8000d6c <HAL_UART_ErrorCallback+0x40>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d105      	bne.n	8000d4a <HAL_UART_ErrorCallback+0x1e>
		g_UART2_rx.state = RxError;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_UART_ErrorCallback+0x44>)
 8000d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d44:	2202      	movs	r2, #2
 8000d46:	729a      	strb	r2, [r3, #10]
	} else if (huart->Instance == USART1) {
		g_UART1_rx.state = RxError;
	}
}
 8000d48:	e009      	b.n	8000d5e <HAL_UART_ErrorCallback+0x32>
	} else if (huart->Instance == USART1) {
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a09      	ldr	r2, [pc, #36]	@ (8000d74 <HAL_UART_ErrorCallback+0x48>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d104      	bne.n	8000d5e <HAL_UART_ErrorCallback+0x32>
		g_UART1_rx.state = RxError;
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_UART_ErrorCallback+0x4c>)
 8000d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	729a      	strb	r2, [r3, #10]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	20000000 	.word	0x20000000
 8000d74:	40013800 	.word	0x40013800
 8000d78:	20001050 	.word	0x20001050

08000d7c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <HAL_UART_TxCpltCallback+0x4c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d106      	bne.n	8000d9c <HAL_UART_TxCpltCallback+0x20>
		g_UART2_tx.state = TxIdle;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <HAL_UART_TxCpltCallback+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	721a      	strb	r2, [r3, #8]
		g_UART2_tx.data_size = 0;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <HAL_UART_TxCpltCallback+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	80da      	strh	r2, [r3, #6]
	} else if (huart->Instance == USART1) {
		g_UART1_tx.state = TxIdle;
		g_UART1_tx.data_size = 0;
		g_ESP.tx_success = true;
	}
}
 8000d9a:	e00e      	b.n	8000dba <HAL_UART_TxCpltCallback+0x3e>
	} else if (huart->Instance == USART1) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <HAL_UART_TxCpltCallback+0x54>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d109      	bne.n	8000dba <HAL_UART_TxCpltCallback+0x3e>
		g_UART1_tx.state = TxIdle;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <HAL_UART_TxCpltCallback+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	721a      	strb	r2, [r3, #8]
		g_UART1_tx.data_size = 0;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_UART_TxCpltCallback+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	80da      	strh	r2, [r3, #6]
		g_ESP.tx_success = true;
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <HAL_UART_TxCpltCallback+0x5c>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	20001028 	.word	0x20001028
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	20002078 	.word	0x20002078
 8000dd8:	200020a0 	.word	0x200020a0

08000ddc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10b      	bne.n	8000e0a <HAL_UARTEx_RxEventCallback+0x2e>
		g_UART2_rx.data_size = Size;
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_UARTEx_RxEventCallback+0x60>)
 8000df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000df8:	461a      	mov	r2, r3
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	8113      	strh	r3, [r2, #8]
		g_UART2_rx.state = RxDataReceived;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <HAL_UARTEx_RxEventCallback+0x60>)
 8000e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e04:	2201      	movs	r2, #1
 8000e06:	729a      	strb	r2, [r3, #10]
	} else if (huart->Instance == USART1) {
		g_UART1_rx.data_size = Size;
		g_UART1_rx.state = RxDataReceived;
	}
}
 8000e08:	e00f      	b.n	8000e2a <HAL_UARTEx_RxEventCallback+0x4e>
	} else if (huart->Instance == USART1) {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <HAL_UARTEx_RxEventCallback+0x64>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d10a      	bne.n	8000e2a <HAL_UARTEx_RxEventCallback+0x4e>
		g_UART1_rx.data_size = Size;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_UARTEx_RxEventCallback+0x68>)
 8000e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	8113      	strh	r3, [r2, #8]
		g_UART1_rx.state = RxDataReceived;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <HAL_UARTEx_RxEventCallback+0x68>)
 8000e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e26:	2201      	movs	r2, #1
 8000e28:	729a      	strb	r2, [r3, #10]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	40013800 	.word	0x40013800
 8000e44:	20001050 	.word	0x20001050

08000e48 <HAL_SPI_TxCpltCallback>:
/* END ESP CALLBACKS */

/* START PIXY CALLBACKS */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == g_Pixy.hspi->Instance) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <HAL_SPI_TxCpltCallback+0x34>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d10a      	bne.n	8000e74 <HAL_SPI_TxCpltCallback+0x2c>
		g_Pixy.tx_data_size = 0;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_SPI_TxCpltCallback+0x34>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

		// now collect the data received by pixy
        HAL_SPI_Receive_IT(g_Pixy.hspi, g_Pixy.rx_buffer, SPI_RECEIVE_SIZE);
 8000e66:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_SPI_TxCpltCallback+0x34>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2284      	movs	r2, #132	@ 0x84
 8000e6c:	4904      	ldr	r1, [pc, #16]	@ (8000e80 <HAL_SPI_TxCpltCallback+0x38>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f006 fe32 	bl	8007ad8 <HAL_SPI_Receive_IT>
	}
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20002254 	.word	0x20002254
 8000e80:	20002258 	.word	0x20002258

08000e84 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == g_Pixy.hspi->Instance) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <HAL_SPI_RxCpltCallback+0x2c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d103      	bne.n	8000ea2 <HAL_SPI_RxCpltCallback+0x1e>
		g_Pixy.state = PixyDataReceived;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_SPI_RxCpltCallback+0x2c>)
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20002254 	.word	0x20002254

08000eb4 <start_uart_rx_to_idle>:
static const char *off_blue_led_response = "11";
static const char *on_blue_led_response = "10";
static const char *off_red_led_response = "21";
static const char *on_red_led_response = "20";

void start_uart_rx_to_idle(UART_Rx_t *uart_rx) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

	// Check the threshold
	if (uart_rx->buffer_start > uart_rx->buffer_threshold) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ec2:	699a      	ldr	r2, [r3, #24]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d90e      	bls.n	8000eee <start_uart_rx_to_idle+0x3a>
		// Rewinding
		uart_rx->buffer_start = uart_rx->buffer_base;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000ede:	6193      	str	r3, [r2, #24]
		uart_rx->linked_tx->rx_rewinded_state = !RX_NOT_REWINDED; // Tell Tx that Rx has rewinded
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	uart_rx->hal_status = HAL_UARTEx_ReceiveToIdle_DMA(uart_rx->huart,
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ef8:	6999      	ldr	r1, [r3, #24]
			uart_rx->buffer_start, (uint16_t) uart_rx->leftover_size);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f00:	8c1b      	ldrh	r3, [r3, #32]
	uart_rx->hal_status = HAL_UARTEx_ReceiveToIdle_DMA(uart_rx->huart,
 8000f02:	461a      	mov	r2, r3
 8000f04:	f00a f981 	bl	800b20a <HAL_UARTEx_ReceiveToIdle_DMA>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f12:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if (uart_rx->hal_status == HAL_OK) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f1c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d01d      	beq.n	8000f60 <start_uart_rx_to_idle+0xac>
//			printf("UART%s HAL_UARTEx_ReceiveToIdleDMA started successfully!\n",
//					uart->UartIdentifier);
	} else {
		if (uart_rx->hal_status == HAL_BUSY) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f2a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d016      	beq.n	8000f60 <start_uart_rx_to_idle+0xac>
			// UART became busy after the check; retry later without error
//				printf("UART%s is busy, retrying...\n", uart->UartIdentifier);
		} else {
			// Handle other errors
			printf("UART%s HAL_UARTEx_ReceiveToIdleDMA failed! Error: %lu\n",
					uart_rx->identifier, uart_rx->hal_status);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f38:	330b      	adds	r3, #11
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000f40:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
			printf("UART%s HAL_UARTEx_ReceiveToIdleDMA failed! Error: %lu\n",
 8000f44:	4619      	mov	r1, r3
 8000f46:	4808      	ldr	r0, [pc, #32]	@ (8000f68 <start_uart_rx_to_idle+0xb4>)
 8000f48:	f00a feca 	bl	800bce0 <iprintf>
			HAL_UART_AbortReceive(uart_rx->huart); // Reset DMA and UART Receiver
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f008 ff50 	bl	8009df6 <HAL_UART_AbortReceive>
			uart_rx->state = RxError;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	729a      	strb	r2, [r3, #10]
		}
	}
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	0800f604 	.word	0x0800f604

08000f6c <start_uart_tx>:
void start_uart_tx(UART_Tx_t *uart_tx) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	uart_tx->hal_status = HAL_UART_Transmit_DMA(uart_tx->huart,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6818      	ldr	r0, [r3, #0]
			uart_tx->buffer_start, uart_tx->data_size);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6959      	ldr	r1, [r3, #20]
	uart_tx->hal_status = HAL_UART_Transmit_DMA(uart_tx->huart,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	88db      	ldrh	r3, [r3, #6]
 8000f80:	461a      	mov	r2, r3
 8000f82:	f008 fdc3 	bl	8009b0c <HAL_UART_Transmit_DMA>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	711a      	strb	r2, [r3, #4]
//				(char*) uart->UartIdentifier);
	} else {
//		printf("UART%s HAL_UART_Transmit_DMA failed! Error: %lu\n",
//				uart->UartIdentifier, uart->hal_status);
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <process_uart_rx_error>:

void process_uart_rx_error(UART_Rx_t *uart_rx) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
// Get the error code
	uint32_t currentErrorCode = HAL_UART_GetError(uart_rx->huart);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f009 fad9 	bl	800a55c <HAL_UART_GetError>
 8000faa:	60f8      	str	r0, [r7, #12]

// Clear specific error flags based on error type
	if (currentErrorCode & HAL_UART_ERROR_NONE) {
//		printf("No error! :)\n");
		return;
	} else if (currentErrorCode & HAL_UART_ERROR_NE) {
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <process_uart_rx_error+0x26>
		printf("Noisy!\n");
 8000fb6:	481c      	ldr	r0, [pc, #112]	@ (8001028 <process_uart_rx_error+0x90>)
 8000fb8:	f00a fefa 	bl	800bdb0 <puts>
 8000fbc:	e023      	b.n	8001006 <process_uart_rx_error+0x6e>
	} else if (currentErrorCode & HAL_UART_ERROR_ORE) {
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d008      	beq.n	8000fda <process_uart_rx_error+0x42>
		printf("Overrun error detected on UART%s!\n", uart_rx->identifier);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000fce:	330b      	adds	r3, #11
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4816      	ldr	r0, [pc, #88]	@ (800102c <process_uart_rx_error+0x94>)
 8000fd4:	f00a fe84 	bl	800bce0 <iprintf>
 8000fd8:	e015      	b.n	8001006 <process_uart_rx_error+0x6e>
	} else if (currentErrorCode & HAL_UART_ERROR_FE) {
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <process_uart_rx_error+0x54>
		printf("Frame Error!\n");
 8000fe4:	4812      	ldr	r0, [pc, #72]	@ (8001030 <process_uart_rx_error+0x98>)
 8000fe6:	f00a fee3 	bl	800bdb0 <puts>
 8000fea:	e00c      	b.n	8001006 <process_uart_rx_error+0x6e>
	} else if (currentErrorCode & HAL_UART_ERROR_DMA) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <process_uart_rx_error+0x6e>
		printf("DMA Transfer Error on UART%s!\n", uart_rx->identifier);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ffc:	330b      	adds	r3, #11
 8000ffe:	4619      	mov	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <process_uart_rx_error+0x9c>)
 8001002:	f00a fe6d 	bl	800bce0 <iprintf>
	}

//	HAL_UART_AbortReceive(uart->Huart); // reset DMA and UART Receiver
	HAL_UART_Abort(uart_rx->huart);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f008 fdfa 	bl	8009c04 <HAL_UART_Abort>
	HAL_UART_Abort(uart_rx->linked_tx->huart);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f008 fdf2 	bl	8009c04 <HAL_UART_Abort>
}
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	0800f63c 	.word	0x0800f63c
 800102c:	0800f644 	.word	0x0800f644
 8001030:	0800f668 	.word	0x0800f668
 8001034:	0800f678 	.word	0x0800f678

08001038 <esp_control>:

void esp_control(ESP_t *esp) { // to be run in the main loop
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// run UART state machines
	uart_state_machine(&g_UART1_rx, &g_UART1_tx);
 8001040:	4909      	ldr	r1, [pc, #36]	@ (8001068 <esp_control+0x30>)
 8001042:	480a      	ldr	r0, [pc, #40]	@ (800106c <esp_control+0x34>)
 8001044:	f000 fe98 	bl	8001d78 <uart_state_machine>
	uart_state_machine(&g_UART2_rx, &g_UART2_tx);
 8001048:	4909      	ldr	r1, [pc, #36]	@ (8001070 <esp_control+0x38>)
 800104a:	480a      	ldr	r0, [pc, #40]	@ (8001074 <esp_control+0x3c>)
 800104c:	f000 fe94 	bl	8001d78 <uart_state_machine>

	if (esp->system_mode == AutoMode) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d102      	bne.n	800105e <esp_control+0x26>
		process_esp_auto_mode(&g_UART1_tx);
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <esp_control+0x30>)
 800105a:	f000 fb89 	bl	8001770 <process_esp_auto_mode>
	}
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20002078 	.word	0x20002078
 800106c:	20001050 	.word	0x20001050
 8001070:	20001028 	.word	0x20001028
 8001074:	20000000 	.word	0x20000000

08001078 <process_uart_received_data>:

void process_uart_received_data(UART_Rx_t *uart_rx, ESP_t *esp, Pixy_t *pixy, Motor_t *motor) {
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	*(uart_rx->buffer_start + uart_rx->data_size) = '\0'; // Change the last character to null
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001094:	8912      	ldrh	r2, [r2, #8]
 8001096:	4413      	add	r3, r2
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
	if (uart_rx->huart->Instance == USART2) {
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a70      	ldr	r2, [pc, #448]	@ (8001264 <process_uart_received_data+0x1ec>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	f040 80a6 	bne.w	80011f6 <process_uart_received_data+0x17e>

		// Check for any system mode changes
		check_system_mode_change(uart_rx, esp);
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f000 f8f1 	bl	8001294 <check_system_mode_change>

		// process at commands here
		if (strstr(esp->system_message, "test")) {
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	496c      	ldr	r1, [pc, #432]	@ (8001268 <process_uart_received_data+0x1f0>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00b f816 	bl	800c0ea <strstr>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00c      	beq.n	80010de <process_uart_received_data+0x66>
			g_UART1_tx.buffer_start = g_UART2_rx.buffer_start;
 80010c4:	4b69      	ldr	r3, [pc, #420]	@ (800126c <process_uart_received_data+0x1f4>)
 80010c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a68      	ldr	r2, [pc, #416]	@ (8001270 <process_uart_received_data+0x1f8>)
 80010ce:	6153      	str	r3, [r2, #20]
			g_UART1_tx.data_size = g_UART2_rx.data_size;
 80010d0:	4b66      	ldr	r3, [pc, #408]	@ (800126c <process_uart_received_data+0x1f4>)
 80010d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010d6:	891a      	ldrh	r2, [r3, #8]
 80010d8:	4b65      	ldr	r3, [pc, #404]	@ (8001270 <process_uart_received_data+0x1f8>)
 80010da:	80da      	strh	r2, [r3, #6]
 80010dc:	e09d      	b.n	800121a <process_uart_received_data+0x1a2>
		}
		// disallow auto mode from sending at commands
		else if (strstr(esp->system_message, "auto")) {
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4964      	ldr	r1, [pc, #400]	@ (8001274 <process_uart_received_data+0x1fc>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00b f800 	bl	800c0ea <strstr>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d029      	beq.n	8001144 <process_uart_received_data+0xcc>
			strcpy(esp->system_message,
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a60      	ldr	r2, [pc, #384]	@ (8001278 <process_uart_received_data+0x200>)
 80010f6:	4614      	mov	r4, r2
 80010f8:	469c      	mov	ip, r3
 80010fa:	f104 0e20 	add.w	lr, r4, #32
 80010fe:	4665      	mov	r5, ip
 8001100:	4626      	mov	r6, r4
 8001102:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001104:	6028      	str	r0, [r5, #0]
 8001106:	6069      	str	r1, [r5, #4]
 8001108:	60aa      	str	r2, [r5, #8]
 800110a:	60eb      	str	r3, [r5, #12]
 800110c:	3410      	adds	r4, #16
 800110e:	f10c 0c10 	add.w	ip, ip, #16
 8001112:	4574      	cmp	r4, lr
 8001114:	d1f3      	bne.n	80010fe <process_uart_received_data+0x86>
 8001116:	4662      	mov	r2, ip
 8001118:	4623      	mov	r3, r4
 800111a:	cb03      	ldmia	r3!, {r0, r1}
 800111c:	6010      	str	r0, [r2, #0]
 800111e:	6051      	str	r1, [r2, #4]
 8001120:	8819      	ldrh	r1, [r3, #0]
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	8111      	strh	r1, [r2, #8]
 8001126:	7293      	strb	r3, [r2, #10]
					"Change to test mode to test AT commands!\r\n");
			g_UART2_tx.buffer_start = esp->system_message;
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	4a53      	ldr	r2, [pc, #332]	@ (800127c <process_uart_received_data+0x204>)
 800112e:	6153      	str	r3, [r2, #20]
			g_UART2_tx.data_size = strlen(esp->system_message);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3301      	adds	r3, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f8a3 	bl	8000280 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b4f      	ldr	r3, [pc, #316]	@ (800127c <process_uart_received_data+0x204>)
 8001140:	80da      	strh	r2, [r3, #6]
 8001142:	e06a      	b.n	800121a <process_uart_received_data+0x1a2>
		}
		// tpix hex commands to be processed here such as AE C1 0E 00
		else if (strstr(esp->system_message, "tpix")) {
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	3301      	adds	r3, #1
 8001148:	494d      	ldr	r1, [pc, #308]	@ (8001280 <process_uart_received_data+0x208>)
 800114a:	4618      	mov	r0, r3
 800114c:	f00a ffcd 	bl	800c0ea <strstr>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d021      	beq.n	800119a <process_uart_received_data+0x122>
			pixy->input_packet_type = *(uart_rx->buffer_start + 2);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	789a      	ldrb	r2, [r3, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			printf("Response packet type: %02X\n", g_Pixy.input_packet_type);
 8001166:	4b47      	ldr	r3, [pc, #284]	@ (8001284 <process_uart_received_data+0x20c>)
 8001168:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800116c:	4619      	mov	r1, r3
 800116e:	4846      	ldr	r0, [pc, #280]	@ (8001288 <process_uart_received_data+0x210>)
 8001170:	f00a fdb6 	bl	800bce0 <iprintf>
			// trigger spi to start transmitting
			pixy->tx_ptr = uart_rx->buffer_start;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			pixy->tx_data_size = uart_rx->data_size;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001188:	891a      	ldrh	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			pixy->state = PixyTransmitting;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
 8001198:	e03f      	b.n	800121a <process_uart_received_data+0x1a2>
		}

		// regular user-define motor cmds to be processed here such as at+start
		else if (strstr(esp->system_message, "tmot")) {
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3301      	adds	r3, #1
 800119e:	493b      	ldr	r1, [pc, #236]	@ (800128c <process_uart_received_data+0x214>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00a ffa2 	bl	800c0ea <strstr>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d016      	beq.n	80011da <process_uart_received_data+0x162>
			// first clear the contents of motor command
			memset(motor->command, 0, sizeof(motor->command));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	333e      	adds	r3, #62	@ 0x3e
 80011b0:	221e      	movs	r2, #30
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00a ff61 	bl	800c07c <memset>
			// start to copy contents from uart2rx into motor command buffer
			strcpy(motor->command, uart_rx->buffer_start);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f00b f81b 	bl	800c206 <strcpy>
			// change state to allow processing
			motor->state = MotorDataReceived;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80011d8:	e01f      	b.n	800121a <process_uart_received_data+0x1a2>
		}

		// normal change-system messages to be processed here
		else {
			g_UART2_tx.buffer_start = esp->system_message;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a27      	ldr	r2, [pc, #156]	@ (800127c <process_uart_received_data+0x204>)
 80011e0:	6153      	str	r3, [r2, #20]
			g_UART2_tx.data_size = strlen(esp->system_message);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f84a 	bl	8000280 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b22      	ldr	r3, [pc, #136]	@ (800127c <process_uart_received_data+0x204>)
 80011f2:	80da      	strh	r2, [r3, #6]
 80011f4:	e011      	b.n	800121a <process_uart_received_data+0x1a2>
		}
	} else if (uart_rx->huart->Instance == USART1) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a24      	ldr	r2, [pc, #144]	@ (8001290 <process_uart_received_data+0x218>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10b      	bne.n	800121a <process_uart_received_data+0x1a2>
		g_UART2_tx.buffer_start = uart_rx->buffer_start;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <process_uart_received_data+0x204>)
 800120c:	6153      	str	r3, [r2, #20]
		g_UART2_tx.data_size = uart_rx->data_size;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001214:	891a      	ldrh	r2, [r3, #8]
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <process_uart_received_data+0x204>)
 8001218:	80da      	strh	r2, [r3, #6]
	}
	// Shift the Rx pointers to continuously receive data
	uart_rx->buffer_start += uart_rx->data_size; // Shift to the end of the message
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001228:	8912      	ldrh	r2, [r2, #8]
 800122a:	4413      	add	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001232:	6193      	str	r3, [r2, #24]
	uart_rx->leftover_size -= uart_rx->data_size;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800123a:	8c1a      	ldrh	r2, [r3, #32]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001242:	891b      	ldrh	r3, [r3, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	b29a      	uxth	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800124e:	841a      	strh	r2, [r3, #32]

	uart_rx->data_size = 0;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001256:	2200      	movs	r2, #0
 8001258:	811a      	strh	r2, [r3, #8]
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001262:	bf00      	nop
 8001264:	40004400 	.word	0x40004400
 8001268:	0800f698 	.word	0x0800f698
 800126c:	20000000 	.word	0x20000000
 8001270:	20002078 	.word	0x20002078
 8001274:	0800f6a0 	.word	0x0800f6a0
 8001278:	0800f6a8 	.word	0x0800f6a8
 800127c:	20001028 	.word	0x20001028
 8001280:	0800f6d4 	.word	0x0800f6d4
 8001284:	20002254 	.word	0x20002254
 8001288:	0800f6dc 	.word	0x0800f6dc
 800128c:	0800f6f8 	.word	0x0800f6f8
 8001290:	40013800 	.word	0x40013800

08001294 <check_system_mode_change>:

void check_system_mode_change(UART_Rx_t *uart, ESP_t *esp) {
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	memset(esp->system_message, 0, sizeof(esp->system_message));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	221e      	movs	r2, #30
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00a fee8 	bl	800c07c <memset>
	switch (esp->system_mode) {
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	f200 8214 	bhi.w	80016de <check_system_mode_change+0x44a>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <check_system_mode_change+0x28>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080013c3 	.word	0x080013c3
 80012c4:	080014b9 	.word	0x080014b9
 80012c8:	080015e9 	.word	0x080015e9
	case TestMode:
		if (strstr(uart->buffer_start, "TEST")) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	49b6      	ldr	r1, [pc, #728]	@ (80015b0 <check_system_mode_change+0x31c>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00a ff07 	bl	800c0ea <strstr>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00d      	beq.n	80012fe <check_system_mode_change+0x6a>
			strcpy(esp->system_message, "Already in Test Mode!\r\n");
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	4ab3      	ldr	r2, [pc, #716]	@ (80015b4 <check_system_mode_change+0x320>)
 80012e8:	461d      	mov	r5, r3
 80012ea:	4614      	mov	r4, r2
 80012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ee:	6028      	str	r0, [r5, #0]
 80012f0:	6069      	str	r1, [r5, #4]
 80012f2:	60aa      	str	r2, [r5, #8]
 80012f4:	60eb      	str	r3, [r5, #12]
 80012f6:	cc03      	ldmia	r4!, {r0, r1}
 80012f8:	6128      	str	r0, [r5, #16]
 80012fa:	6169      	str	r1, [r5, #20]
			strcpy(esp->system_message, "Switching to Tmot Mode!\r\n");
			esp->system_mode = TmotMode;
		} else { // normal AT commands
			strcpy(esp->system_message, "test");
		}
		break;
 80012fc:	e1f0      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "AUTO")) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	49ac      	ldr	r1, [pc, #688]	@ (80015b8 <check_system_mode_change+0x324>)
 8001308:	4618      	mov	r0, r3
 800130a:	f00a feee 	bl	800c0ea <strstr>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d012      	beq.n	800133a <check_system_mode_change+0xa6>
			strcpy(esp->system_message, "Switching to Auto Mode!\r\n");
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4aa8      	ldr	r2, [pc, #672]	@ (80015bc <check_system_mode_change+0x328>)
 800131a:	461d      	mov	r5, r3
 800131c:	4614      	mov	r4, r2
 800131e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001320:	6028      	str	r0, [r5, #0]
 8001322:	6069      	str	r1, [r5, #4]
 8001324:	60aa      	str	r2, [r5, #8]
 8001326:	60eb      	str	r3, [r5, #12]
 8001328:	cc03      	ldmia	r4!, {r0, r1}
 800132a:	6128      	str	r0, [r5, #16]
 800132c:	6169      	str	r1, [r5, #20]
 800132e:	8823      	ldrh	r3, [r4, #0]
 8001330:	832b      	strh	r3, [r5, #24]
			esp->system_mode = AutoMode;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
		break;
 8001338:	e1d2      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "TPIX")) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	499f      	ldr	r1, [pc, #636]	@ (80015c0 <check_system_mode_change+0x32c>)
 8001344:	4618      	mov	r0, r3
 8001346:	f00a fed0 	bl	800c0ea <strstr>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d012      	beq.n	8001376 <check_system_mode_change+0xe2>
			strcpy(esp->system_message, "Switching to Tpix Mode!\r\n");
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a9b      	ldr	r2, [pc, #620]	@ (80015c4 <check_system_mode_change+0x330>)
 8001356:	461d      	mov	r5, r3
 8001358:	4614      	mov	r4, r2
 800135a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135c:	6028      	str	r0, [r5, #0]
 800135e:	6069      	str	r1, [r5, #4]
 8001360:	60aa      	str	r2, [r5, #8]
 8001362:	60eb      	str	r3, [r5, #12]
 8001364:	cc03      	ldmia	r4!, {r0, r1}
 8001366:	6128      	str	r0, [r5, #16]
 8001368:	6169      	str	r1, [r5, #20]
 800136a:	8823      	ldrh	r3, [r4, #0]
 800136c:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TpixMode;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2202      	movs	r2, #2
 8001372:	701a      	strb	r2, [r3, #0]
		break;
 8001374:	e1b4      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "TMOT")) {
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4992      	ldr	r1, [pc, #584]	@ (80015c8 <check_system_mode_change+0x334>)
 8001380:	4618      	mov	r0, r3
 8001382:	f00a feb2 	bl	800c0ea <strstr>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d012      	beq.n	80013b2 <check_system_mode_change+0x11e>
			strcpy(esp->system_message, "Switching to Tmot Mode!\r\n");
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	4a8e      	ldr	r2, [pc, #568]	@ (80015cc <check_system_mode_change+0x338>)
 8001392:	461d      	mov	r5, r3
 8001394:	4614      	mov	r4, r2
 8001396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001398:	6028      	str	r0, [r5, #0]
 800139a:	6069      	str	r1, [r5, #4]
 800139c:	60aa      	str	r2, [r5, #8]
 800139e:	60eb      	str	r3, [r5, #12]
 80013a0:	cc03      	ldmia	r4!, {r0, r1}
 80013a2:	6128      	str	r0, [r5, #16]
 80013a4:	6169      	str	r1, [r5, #20]
 80013a6:	8823      	ldrh	r3, [r4, #0]
 80013a8:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TmotMode;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2203      	movs	r2, #3
 80013ae:	701a      	strb	r2, [r3, #0]
		break;
 80013b0:	e196      	b.n	80016e0 <check_system_mode_change+0x44c>
			strcpy(esp->system_message, "test");
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a86      	ldr	r2, [pc, #536]	@ (80015d0 <check_system_mode_change+0x33c>)
 80013b8:	6810      	ldr	r0, [r2, #0]
 80013ba:	6018      	str	r0, [r3, #0]
 80013bc:	7912      	ldrb	r2, [r2, #4]
 80013be:	711a      	strb	r2, [r3, #4]
		break;
 80013c0:	e18e      	b.n	80016e0 <check_system_mode_change+0x44c>
	case AutoMode:
		if (strstr(uart->buffer_start, "AUTO")) {
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	497b      	ldr	r1, [pc, #492]	@ (80015b8 <check_system_mode_change+0x324>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00a fe8c 	bl	800c0ea <strstr>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00d      	beq.n	80013f4 <check_system_mode_change+0x160>
			strcpy(esp->system_message, "Already in Auto Mode!\r\n");
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a7d      	ldr	r2, [pc, #500]	@ (80015d4 <check_system_mode_change+0x340>)
 80013de:	461d      	mov	r5, r3
 80013e0:	4614      	mov	r4, r2
 80013e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e4:	6028      	str	r0, [r5, #0]
 80013e6:	6069      	str	r1, [r5, #4]
 80013e8:	60aa      	str	r2, [r5, #8]
 80013ea:	60eb      	str	r3, [r5, #12]
 80013ec:	cc03      	ldmia	r4!, {r0, r1}
 80013ee:	6128      	str	r0, [r5, #16]
 80013f0:	6169      	str	r1, [r5, #20]
			strcpy(esp->system_message, "Switching to Tmot Mode!\r\n");
			esp->system_mode = TmotMode;
		} else {
			strcpy(esp->system_message, "auto");
		}
		break;
 80013f2:	e175      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "TEST")) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	496c      	ldr	r1, [pc, #432]	@ (80015b0 <check_system_mode_change+0x31c>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f00a fe73 	bl	800c0ea <strstr>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d012      	beq.n	8001430 <check_system_mode_change+0x19c>
			strcpy(esp->system_message, "Switching to Test Mode!\r\n");
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a72      	ldr	r2, [pc, #456]	@ (80015d8 <check_system_mode_change+0x344>)
 8001410:	461d      	mov	r5, r3
 8001412:	4614      	mov	r4, r2
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	6028      	str	r0, [r5, #0]
 8001418:	6069      	str	r1, [r5, #4]
 800141a:	60aa      	str	r2, [r5, #8]
 800141c:	60eb      	str	r3, [r5, #12]
 800141e:	cc03      	ldmia	r4!, {r0, r1}
 8001420:	6128      	str	r0, [r5, #16]
 8001422:	6169      	str	r1, [r5, #20]
 8001424:	8823      	ldrh	r3, [r4, #0]
 8001426:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TestMode;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
		break;
 800142e:	e157      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "TPIX")) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4961      	ldr	r1, [pc, #388]	@ (80015c0 <check_system_mode_change+0x32c>)
 800143a:	4618      	mov	r0, r3
 800143c:	f00a fe55 	bl	800c0ea <strstr>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d012      	beq.n	800146c <check_system_mode_change+0x1d8>
			strcpy(esp->system_message, "Switching to Tpix Mode!\r\n");
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a5e      	ldr	r2, [pc, #376]	@ (80015c4 <check_system_mode_change+0x330>)
 800144c:	461d      	mov	r5, r3
 800144e:	4614      	mov	r4, r2
 8001450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001452:	6028      	str	r0, [r5, #0]
 8001454:	6069      	str	r1, [r5, #4]
 8001456:	60aa      	str	r2, [r5, #8]
 8001458:	60eb      	str	r3, [r5, #12]
 800145a:	cc03      	ldmia	r4!, {r0, r1}
 800145c:	6128      	str	r0, [r5, #16]
 800145e:	6169      	str	r1, [r5, #20]
 8001460:	8823      	ldrh	r3, [r4, #0]
 8001462:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TpixMode;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2202      	movs	r2, #2
 8001468:	701a      	strb	r2, [r3, #0]
		break;
 800146a:	e139      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "TMOT")) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4954      	ldr	r1, [pc, #336]	@ (80015c8 <check_system_mode_change+0x334>)
 8001476:	4618      	mov	r0, r3
 8001478:	f00a fe37 	bl	800c0ea <strstr>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d012      	beq.n	80014a8 <check_system_mode_change+0x214>
			strcpy(esp->system_message, "Switching to Tmot Mode!\r\n");
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	4a51      	ldr	r2, [pc, #324]	@ (80015cc <check_system_mode_change+0x338>)
 8001488:	461d      	mov	r5, r3
 800148a:	4614      	mov	r4, r2
 800148c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148e:	6028      	str	r0, [r5, #0]
 8001490:	6069      	str	r1, [r5, #4]
 8001492:	60aa      	str	r2, [r5, #8]
 8001494:	60eb      	str	r3, [r5, #12]
 8001496:	cc03      	ldmia	r4!, {r0, r1}
 8001498:	6128      	str	r0, [r5, #16]
 800149a:	6169      	str	r1, [r5, #20]
 800149c:	8823      	ldrh	r3, [r4, #0]
 800149e:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TmotMode;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2203      	movs	r2, #3
 80014a4:	701a      	strb	r2, [r3, #0]
		break;
 80014a6:	e11b      	b.n	80016e0 <check_system_mode_change+0x44c>
			strcpy(esp->system_message, "auto");
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a4b      	ldr	r2, [pc, #300]	@ (80015dc <check_system_mode_change+0x348>)
 80014ae:	6810      	ldr	r0, [r2, #0]
 80014b0:	6018      	str	r0, [r3, #0]
 80014b2:	7912      	ldrb	r2, [r2, #4]
 80014b4:	711a      	strb	r2, [r3, #4]
		break;
 80014b6:	e113      	b.n	80016e0 <check_system_mode_change+0x44c>
	case TpixMode:
		if (strstr(uart->buffer_start, "TPIX")) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	493f      	ldr	r1, [pc, #252]	@ (80015c0 <check_system_mode_change+0x32c>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00a fe11 	bl	800c0ea <strstr>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00d      	beq.n	80014ea <check_system_mode_change+0x256>
			strcpy(esp->system_message, "Already in Tpix Mode!\r\n");
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a43      	ldr	r2, [pc, #268]	@ (80015e0 <check_system_mode_change+0x34c>)
 80014d4:	461d      	mov	r5, r3
 80014d6:	4614      	mov	r4, r2
 80014d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014da:	6028      	str	r0, [r5, #0]
 80014dc:	6069      	str	r1, [r5, #4]
 80014de:	60aa      	str	r2, [r5, #8]
 80014e0:	60eb      	str	r3, [r5, #12]
 80014e2:	cc03      	ldmia	r4!, {r0, r1}
 80014e4:	6128      	str	r0, [r5, #16]
 80014e6:	6169      	str	r1, [r5, #20]
			strcpy(esp->system_message, "Switching to Tmot Mode!\r\n");
			esp->system_mode = TmotMode;
		} else {
			strcpy(esp->system_message, "tpix");
		}
		break;
 80014e8:	e0fa      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "TEST")) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	492f      	ldr	r1, [pc, #188]	@ (80015b0 <check_system_mode_change+0x31c>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00a fdf8 	bl	800c0ea <strstr>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d012      	beq.n	8001526 <check_system_mode_change+0x292>
			strcpy(esp->system_message, "Switching to Test Mode!\r\n");
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <check_system_mode_change+0x344>)
 8001506:	461d      	mov	r5, r3
 8001508:	4614      	mov	r4, r2
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	6028      	str	r0, [r5, #0]
 800150e:	6069      	str	r1, [r5, #4]
 8001510:	60aa      	str	r2, [r5, #8]
 8001512:	60eb      	str	r3, [r5, #12]
 8001514:	cc03      	ldmia	r4!, {r0, r1}
 8001516:	6128      	str	r0, [r5, #16]
 8001518:	6169      	str	r1, [r5, #20]
 800151a:	8823      	ldrh	r3, [r4, #0]
 800151c:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TestMode;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		break;
 8001524:	e0dc      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "AUTO")) {
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4922      	ldr	r1, [pc, #136]	@ (80015b8 <check_system_mode_change+0x324>)
 8001530:	4618      	mov	r0, r3
 8001532:	f00a fdda 	bl	800c0ea <strstr>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d012      	beq.n	8001562 <check_system_mode_change+0x2ce>
			strcpy(esp->system_message, "Switching to Auto Mode!\r\n");
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a1e      	ldr	r2, [pc, #120]	@ (80015bc <check_system_mode_change+0x328>)
 8001542:	461d      	mov	r5, r3
 8001544:	4614      	mov	r4, r2
 8001546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001548:	6028      	str	r0, [r5, #0]
 800154a:	6069      	str	r1, [r5, #4]
 800154c:	60aa      	str	r2, [r5, #8]
 800154e:	60eb      	str	r3, [r5, #12]
 8001550:	cc03      	ldmia	r4!, {r0, r1}
 8001552:	6128      	str	r0, [r5, #16]
 8001554:	6169      	str	r1, [r5, #20]
 8001556:	8823      	ldrh	r3, [r4, #0]
 8001558:	832b      	strh	r3, [r5, #24]
			esp->system_mode = AutoMode;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
		break;
 8001560:	e0be      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "TMOT")) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4917      	ldr	r1, [pc, #92]	@ (80015c8 <check_system_mode_change+0x334>)
 800156c:	4618      	mov	r0, r3
 800156e:	f00a fdbc 	bl	800c0ea <strstr>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d012      	beq.n	800159e <check_system_mode_change+0x30a>
			strcpy(esp->system_message, "Switching to Tmot Mode!\r\n");
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a13      	ldr	r2, [pc, #76]	@ (80015cc <check_system_mode_change+0x338>)
 800157e:	461d      	mov	r5, r3
 8001580:	4614      	mov	r4, r2
 8001582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001584:	6028      	str	r0, [r5, #0]
 8001586:	6069      	str	r1, [r5, #4]
 8001588:	60aa      	str	r2, [r5, #8]
 800158a:	60eb      	str	r3, [r5, #12]
 800158c:	cc03      	ldmia	r4!, {r0, r1}
 800158e:	6128      	str	r0, [r5, #16]
 8001590:	6169      	str	r1, [r5, #20]
 8001592:	8823      	ldrh	r3, [r4, #0]
 8001594:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TmotMode;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2203      	movs	r2, #3
 800159a:	701a      	strb	r2, [r3, #0]
		break;
 800159c:	e0a0      	b.n	80016e0 <check_system_mode_change+0x44c>
			strcpy(esp->system_message, "tpix");
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <check_system_mode_change+0x350>)
 80015a4:	6810      	ldr	r0, [r2, #0]
 80015a6:	6018      	str	r0, [r3, #0]
 80015a8:	7912      	ldrb	r2, [r2, #4]
 80015aa:	711a      	strb	r2, [r3, #4]
		break;
 80015ac:	e098      	b.n	80016e0 <check_system_mode_change+0x44c>
 80015ae:	bf00      	nop
 80015b0:	0800f700 	.word	0x0800f700
 80015b4:	0800f708 	.word	0x0800f708
 80015b8:	0800f720 	.word	0x0800f720
 80015bc:	0800f728 	.word	0x0800f728
 80015c0:	0800f744 	.word	0x0800f744
 80015c4:	0800f74c 	.word	0x0800f74c
 80015c8:	0800f768 	.word	0x0800f768
 80015cc:	0800f770 	.word	0x0800f770
 80015d0:	0800f698 	.word	0x0800f698
 80015d4:	0800f78c 	.word	0x0800f78c
 80015d8:	0800f7a4 	.word	0x0800f7a4
 80015dc:	0800f6a0 	.word	0x0800f6a0
 80015e0:	0800f7c0 	.word	0x0800f7c0
 80015e4:	0800f6d4 	.word	0x0800f6d4

	case TmotMode:
		if (strstr(uart->buffer_start, "TMOT")) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	493d      	ldr	r1, [pc, #244]	@ (80016e8 <check_system_mode_change+0x454>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00a fd79 	bl	800c0ea <strstr>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00d      	beq.n	800161a <check_system_mode_change+0x386>
			strcpy(esp->system_message, "Already in Tmot Mode!\r\n");
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	4a3a      	ldr	r2, [pc, #232]	@ (80016ec <check_system_mode_change+0x458>)
 8001604:	461d      	mov	r5, r3
 8001606:	4614      	mov	r4, r2
 8001608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160a:	6028      	str	r0, [r5, #0]
 800160c:	6069      	str	r1, [r5, #4]
 800160e:	60aa      	str	r2, [r5, #8]
 8001610:	60eb      	str	r3, [r5, #12]
 8001612:	cc03      	ldmia	r4!, {r0, r1}
 8001614:	6128      	str	r0, [r5, #16]
 8001616:	6169      	str	r1, [r5, #20]
			strcpy(esp->system_message, "Switching to Tpix Mode!\r\n");
			esp->system_mode = TpixMode;
		} else {
			strcpy(esp->system_message, "tmot");
		}
		break;
 8001618:	e062      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "TEST")) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	4933      	ldr	r1, [pc, #204]	@ (80016f0 <check_system_mode_change+0x45c>)
 8001624:	4618      	mov	r0, r3
 8001626:	f00a fd60 	bl	800c0ea <strstr>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d012      	beq.n	8001656 <check_system_mode_change+0x3c2>
			strcpy(esp->system_message, "Switching to Test Mode!\r\n");
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a2f      	ldr	r2, [pc, #188]	@ (80016f4 <check_system_mode_change+0x460>)
 8001636:	461d      	mov	r5, r3
 8001638:	4614      	mov	r4, r2
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	6028      	str	r0, [r5, #0]
 800163e:	6069      	str	r1, [r5, #4]
 8001640:	60aa      	str	r2, [r5, #8]
 8001642:	60eb      	str	r3, [r5, #12]
 8001644:	cc03      	ldmia	r4!, {r0, r1}
 8001646:	6128      	str	r0, [r5, #16]
 8001648:	6169      	str	r1, [r5, #20]
 800164a:	8823      	ldrh	r3, [r4, #0]
 800164c:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TestMode;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
		break;
 8001654:	e044      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "AUTO")) {
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4926      	ldr	r1, [pc, #152]	@ (80016f8 <check_system_mode_change+0x464>)
 8001660:	4618      	mov	r0, r3
 8001662:	f00a fd42 	bl	800c0ea <strstr>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d012      	beq.n	8001692 <check_system_mode_change+0x3fe>
			strcpy(esp->system_message, "Switching to Auto Mode!\r\n");
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <check_system_mode_change+0x468>)
 8001672:	461d      	mov	r5, r3
 8001674:	4614      	mov	r4, r2
 8001676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001678:	6028      	str	r0, [r5, #0]
 800167a:	6069      	str	r1, [r5, #4]
 800167c:	60aa      	str	r2, [r5, #8]
 800167e:	60eb      	str	r3, [r5, #12]
 8001680:	cc03      	ldmia	r4!, {r0, r1}
 8001682:	6128      	str	r0, [r5, #16]
 8001684:	6169      	str	r1, [r5, #20]
 8001686:	8823      	ldrh	r3, [r4, #0]
 8001688:	832b      	strh	r3, [r5, #24]
			esp->system_mode = AutoMode;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
		break;
 8001690:	e026      	b.n	80016e0 <check_system_mode_change+0x44c>
		} else if (strstr(uart->buffer_start, "Tpix")) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4919      	ldr	r1, [pc, #100]	@ (8001700 <check_system_mode_change+0x46c>)
 800169c:	4618      	mov	r0, r3
 800169e:	f00a fd24 	bl	800c0ea <strstr>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d012      	beq.n	80016ce <check_system_mode_change+0x43a>
			strcpy(esp->system_message, "Switching to Tpix Mode!\r\n");
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a15      	ldr	r2, [pc, #84]	@ (8001704 <check_system_mode_change+0x470>)
 80016ae:	461d      	mov	r5, r3
 80016b0:	4614      	mov	r4, r2
 80016b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b4:	6028      	str	r0, [r5, #0]
 80016b6:	6069      	str	r1, [r5, #4]
 80016b8:	60aa      	str	r2, [r5, #8]
 80016ba:	60eb      	str	r3, [r5, #12]
 80016bc:	cc03      	ldmia	r4!, {r0, r1}
 80016be:	6128      	str	r0, [r5, #16]
 80016c0:	6169      	str	r1, [r5, #20]
 80016c2:	8823      	ldrh	r3, [r4, #0]
 80016c4:	832b      	strh	r3, [r5, #24]
			esp->system_mode = TpixMode;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2202      	movs	r2, #2
 80016ca:	701a      	strb	r2, [r3, #0]
		break;
 80016cc:	e008      	b.n	80016e0 <check_system_mode_change+0x44c>
			strcpy(esp->system_message, "tmot");
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <check_system_mode_change+0x474>)
 80016d4:	6810      	ldr	r0, [r2, #0]
 80016d6:	6018      	str	r0, [r3, #0]
 80016d8:	7912      	ldrb	r2, [r2, #4]
 80016da:	711a      	strb	r2, [r3, #4]
		break;
 80016dc:	e000      	b.n	80016e0 <check_system_mode_change+0x44c>
	default:
		break;
 80016de:	bf00      	nop
	}

}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	0800f768 	.word	0x0800f768
 80016ec:	0800f7d8 	.word	0x0800f7d8
 80016f0:	0800f700 	.word	0x0800f700
 80016f4:	0800f7a4 	.word	0x0800f7a4
 80016f8:	0800f720 	.word	0x0800f720
 80016fc:	0800f728 	.word	0x0800f728
 8001700:	0800f7f0 	.word	0x0800f7f0
 8001704:	0800f74c 	.word	0x0800f74c
 8001708:	0800f6f8 	.word	0x0800f6f8

0800170c <reset_uart_rx_buffer>:

void reset_uart_rx_buffer(UART_Rx_t *uart_rx) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	// reset the buffer pointers and variables
	uart_rx->buffer_start = uart_rx->buffer_base;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001722:	6193      	str	r3, [r2, #24]
	uart_rx->buffer_end = uart_rx->buffer_base;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001732:	61d3      	str	r3, [r2, #28]
	uart_rx->leftover_size = MAX_BUFFER_SIZE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800173a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800173e:	841a      	strh	r2, [r3, #32]
	uart_rx->data_size = 0; // reset data size
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001746:	2200      	movs	r2, #0
 8001748:	811a      	strh	r2, [r3, #8]
	uart_rx->linked_tx->rx_rewinded_state = !(RX_NOT_REWINDED); // rewinded
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	memset(uart_rx->buffer, 0, sizeof(uart_rx->buffer)); // clear the buffer contents
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3308      	adds	r3, #8
 800175c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f00a fc8a 	bl	800c07c <memset>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <process_esp_auto_mode>:

void process_esp_auto_mode(UART_Tx_t *uart_tx) { // will be using uart1 tx
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af02      	add	r7, sp, #8
 8001776:	6078      	str	r0, [r7, #4]
	if ((uwTick - g_ESP.last_command_tick) >= g_ESP.timeout) {
 8001778:	4b7c      	ldr	r3, [pc, #496]	@ (800196c <process_esp_auto_mode+0x1fc>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b7c      	ldr	r3, [pc, #496]	@ (8001970 <process_esp_auto_mode+0x200>)
 800177e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001782:	1ad2      	subs	r2, r2, r3
 8001784:	4b7a      	ldr	r3, [pc, #488]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800178a:	429a      	cmp	r2, r3
 800178c:	f0c0 80ea 	bcc.w	8001964 <process_esp_auto_mode+0x1f4>
		setup_website();
 8001790:	f000 f90c 	bl	80019ac <setup_website>

		if (g_ESP.website_fully_setup) {
 8001794:	4b76      	ldr	r3, [pc, #472]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001796:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80dd 	beq.w	800195a <process_esp_auto_mode+0x1ea>
			g_ESP.timeout = 10;
 80017a0:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <process_esp_auto_mode+0x200>)
 80017a2:	220a      	movs	r2, #10
 80017a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			switch (g_ESP.html_state) {
 80017a8:	4b71      	ldr	r3, [pc, #452]	@ (8001970 <process_esp_auto_mode+0x200>)
 80017aa:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	f000 809d 	beq.w	80018ee <process_esp_auto_mode+0x17e>
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	f300 80d0 	bgt.w	800195a <process_esp_auto_mode+0x1ea>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <process_esp_auto_mode+0x54>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d07b      	beq.n	80018ba <process_esp_auto_mode+0x14a>
 80017c2:	e0ca      	b.n	800195a <process_esp_auto_mode+0x1ea>
			case WaitingWebsiteSend:
				g_ESP.response_position = g_UART1_rx.buffer_start; // heavy race conditions
 80017c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001974 <process_esp_auto_mode+0x204>)
 80017c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a68      	ldr	r2, [pc, #416]	@ (8001970 <process_esp_auto_mode+0x200>)
 80017ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

				g_ESP.connection_id = extract_connection_id(
						g_ESP.response_position);
 80017d2:	4b67      	ldr	r3, [pc, #412]	@ (8001970 <process_esp_auto_mode+0x200>)
 80017d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
				g_ESP.connection_id = extract_connection_id(
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fc37 	bl	800204c <extract_connection_id>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b63      	ldr	r3, [pc, #396]	@ (8001970 <process_esp_auto_mode+0x200>)
 80017e4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if (strstr(g_ESP.response_position, "GET /favicon")) {
 80017e8:	4b61      	ldr	r3, [pc, #388]	@ (8001970 <process_esp_auto_mode+0x200>)
 80017ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ee:	4962      	ldr	r1, [pc, #392]	@ (8001978 <process_esp_auto_mode+0x208>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00a fc7a 	bl	800c0ea <strstr>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d017      	beq.n	800182c <process_esp_auto_mode+0xbc>
					sprintf(g_ESP.website_command, "AT+CIPCLOSE=%d\r\n",
							g_ESP.connection_id);
 80017fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001970 <process_esp_auto_mode+0x200>)
 80017fe:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
					sprintf(g_ESP.website_command, "AT+CIPCLOSE=%d\r\n",
 8001802:	461a      	mov	r2, r3
 8001804:	495d      	ldr	r1, [pc, #372]	@ (800197c <process_esp_auto_mode+0x20c>)
 8001806:	485e      	ldr	r0, [pc, #376]	@ (8001980 <process_esp_auto_mode+0x210>)
 8001808:	f00a fb10 	bl	800be2c <siprintf>
					uart_tx->buffer_start = (uint8_t*) g_ESP.website_command;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a5c      	ldr	r2, [pc, #368]	@ (8001980 <process_esp_auto_mode+0x210>)
 8001810:	615a      	str	r2, [r3, #20]
					uart_tx->data_size = strlen(g_ESP.website_command);
 8001812:	485b      	ldr	r0, [pc, #364]	@ (8001980 <process_esp_auto_mode+0x210>)
 8001814:	f7fe fd34 	bl	8000280 <strlen>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	80da      	strh	r2, [r3, #6]

					g_UART1_rx.data_size = 0;
 8001820:	4b54      	ldr	r3, [pc, #336]	@ (8001974 <process_esp_auto_mode+0x204>)
 8001822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001826:	2200      	movs	r2, #0
 8001828:	811a      	strh	r2, [r3, #8]
				} else if (strstr(g_ESP.response_position, "GET /3")) {
					update_website_movement_state(g_ESP.connection_id);
					g_ESP.html_state = RightArrow;
				}

				break;
 800182a:	e091      	b.n	8001950 <process_esp_auto_mode+0x1e0>
				} else if (strstr(g_ESP.response_position, "GET /1")) {
 800182c:	4b50      	ldr	r3, [pc, #320]	@ (8001970 <process_esp_auto_mode+0x200>)
 800182e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001832:	4954      	ldr	r1, [pc, #336]	@ (8001984 <process_esp_auto_mode+0x214>)
 8001834:	4618      	mov	r0, r3
 8001836:	f00a fc58 	bl	800c0ea <strstr>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00e      	beq.n	800185e <process_esp_auto_mode+0xee>
					toggle_led_and_respond(g_ESP.connection_id,
 8001840:	4b4b      	ldr	r3, [pc, #300]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001842:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 8001846:	4b50      	ldr	r3, [pc, #320]	@ (8001988 <process_esp_auto_mode+0x218>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b50      	ldr	r3, [pc, #320]	@ (800198c <process_esp_auto_mode+0x21c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	2201      	movs	r2, #1
 8001854:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001858:	f000 fbb0 	bl	8001fbc <toggle_led_and_respond>
				break;
 800185c:	e078      	b.n	8001950 <process_esp_auto_mode+0x1e0>
				} else if (strstr(g_ESP.response_position, "GET /2")) {
 800185e:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001864:	494a      	ldr	r1, [pc, #296]	@ (8001990 <process_esp_auto_mode+0x220>)
 8001866:	4618      	mov	r0, r3
 8001868:	f00a fc3f 	bl	800c0ea <strstr>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00e      	beq.n	8001890 <process_esp_auto_mode+0x120>
					toggle_led_and_respond(g_ESP.connection_id, RedLED_GPIO_Port,
 8001872:	4b3f      	ldr	r3, [pc, #252]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001874:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 8001878:	4b46      	ldr	r3, [pc, #280]	@ (8001994 <process_esp_auto_mode+0x224>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b46      	ldr	r3, [pc, #280]	@ (8001998 <process_esp_auto_mode+0x228>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	4613      	mov	r3, r2
 8001884:	2202      	movs	r2, #2
 8001886:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800188a:	f000 fb97 	bl	8001fbc <toggle_led_and_respond>
				break;
 800188e:	e05f      	b.n	8001950 <process_esp_auto_mode+0x1e0>
				} else if (strstr(g_ESP.response_position, "GET /3")) {
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001896:	4941      	ldr	r1, [pc, #260]	@ (800199c <process_esp_auto_mode+0x22c>)
 8001898:	4618      	mov	r0, r3
 800189a:	f00a fc26 	bl	800c0ea <strstr>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d055      	beq.n	8001950 <process_esp_auto_mode+0x1e0>
					update_website_movement_state(g_ESP.connection_id);
 80018a4:	4b32      	ldr	r3, [pc, #200]	@ (8001970 <process_esp_auto_mode+0x200>)
 80018a6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fd60 	bl	8004370 <update_website_movement_state>
					g_ESP.html_state = RightArrow;
 80018b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001970 <process_esp_auto_mode+0x200>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
				break;
 80018b8:	e04a      	b.n	8001950 <process_esp_auto_mode+0x1e0>
			case RightArrow:

				if (strstr(g_ESP.response_position, ">")) {
 80018ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <process_esp_auto_mode+0x200>)
 80018bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c0:	213e      	movs	r1, #62	@ 0x3e
 80018c2:	4618      	mov	r0, r3
 80018c4:	f00a fbf1 	bl	800c0aa <strchr>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d042      	beq.n	8001954 <process_esp_auto_mode+0x1e4>
					uart_tx->buffer_start = g_ESP.response;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a33      	ldr	r2, [pc, #204]	@ (80019a0 <process_esp_auto_mode+0x230>)
 80018d2:	615a      	str	r2, [r3, #20]
					uart_tx->data_size = 2;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	80da      	strh	r2, [r3, #6]
					g_ESP.html_state = SendOK;
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <process_esp_auto_mode+0x200>)
 80018dc:	2202      	movs	r2, #2
 80018de:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
					g_UART1_rx.data_size = 0;
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <process_esp_auto_mode+0x204>)
 80018e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e8:	2200      	movs	r2, #0
 80018ea:	811a      	strh	r2, [r3, #8]
				}
				break;
 80018ec:	e032      	b.n	8001954 <process_esp_auto_mode+0x1e4>
			case SendOK:
				if (strstr(g_ESP.response_position, "SEND OK")) {
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <process_esp_auto_mode+0x200>)
 80018f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f4:	492b      	ldr	r1, [pc, #172]	@ (80019a4 <process_esp_auto_mode+0x234>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00a fbf7 	bl	800c0ea <strstr>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d02a      	beq.n	8001958 <process_esp_auto_mode+0x1e8>
					sprintf(g_ESP.website_command, "AT+CIPCLOSE=%d\r\n",
							g_ESP.connection_id);
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001904:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
					sprintf(g_ESP.website_command, "AT+CIPCLOSE=%d\r\n",
 8001908:	461a      	mov	r2, r3
 800190a:	491c      	ldr	r1, [pc, #112]	@ (800197c <process_esp_auto_mode+0x20c>)
 800190c:	481c      	ldr	r0, [pc, #112]	@ (8001980 <process_esp_auto_mode+0x210>)
 800190e:	f00a fa8d 	bl	800be2c <siprintf>
					uart_tx->buffer_start = (uint8_t*) g_ESP.website_command;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a1a      	ldr	r2, [pc, #104]	@ (8001980 <process_esp_auto_mode+0x210>)
 8001916:	615a      	str	r2, [r3, #20]
					uart_tx->data_size = strlen(g_ESP.website_command);
 8001918:	4819      	ldr	r0, [pc, #100]	@ (8001980 <process_esp_auto_mode+0x210>)
 800191a:	f7fe fcb1 	bl	8000280 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	b29a      	uxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	80da      	strh	r2, [r3, #6]

					printf("LED Toggled. Response Sent: %s (ID: %d)\n",
							g_ESP.response, g_ESP.connection_id);
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001928:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
					printf("LED Toggled. Response Sent: %s (ID: %d)\n",
 800192c:	461a      	mov	r2, r3
 800192e:	491c      	ldr	r1, [pc, #112]	@ (80019a0 <process_esp_auto_mode+0x230>)
 8001930:	481d      	ldr	r0, [pc, #116]	@ (80019a8 <process_esp_auto_mode+0x238>)
 8001932:	f00a f9d5 	bl	800bce0 <iprintf>

					g_UART1_rx.data_size = 0;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <process_esp_auto_mode+0x204>)
 8001938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193c:	2200      	movs	r2, #0
 800193e:	811a      	strh	r2, [r3, #8]
					g_ESP.html_state = WaitingWebsiteSend;
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
					reset_uart_rx_buffer(&g_UART1_rx); // clear the buffer
 8001948:	480a      	ldr	r0, [pc, #40]	@ (8001974 <process_esp_auto_mode+0x204>)
 800194a:	f7ff fedf 	bl	800170c <reset_uart_rx_buffer>
				}
				break;
 800194e:	e003      	b.n	8001958 <process_esp_auto_mode+0x1e8>
				break;
 8001950:	bf00      	nop
 8001952:	e002      	b.n	800195a <process_esp_auto_mode+0x1ea>
				break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <process_esp_auto_mode+0x1ea>
				break;
 8001958:	bf00      	nop
			}
		}
		g_ESP.last_command_tick = uwTick;
 800195a:	4b04      	ldr	r3, [pc, #16]	@ (800196c <process_esp_auto_mode+0x1fc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <process_esp_auto_mode+0x200>)
 8001960:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
	}
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200029cc 	.word	0x200029cc
 8001970:	200020a0 	.word	0x200020a0
 8001974:	20001050 	.word	0x20001050
 8001978:	0800f7f8 	.word	0x0800f7f8
 800197c:	0800f808 	.word	0x0800f808
 8001980:	20002134 	.word	0x20002134
 8001984:	0800f81c 	.word	0x0800f81c
 8001988:	20002150 	.word	0x20002150
 800198c:	20002154 	.word	0x20002154
 8001990:	0800f824 	.word	0x0800f824
 8001994:	20002158 	.word	0x20002158
 8001998:	2000215c 	.word	0x2000215c
 800199c:	0800f82c 	.word	0x0800f82c
 80019a0:	20002149 	.word	0x20002149
 80019a4:	0800f834 	.word	0x0800f834
 80019a8:	0800f83c 	.word	0x0800f83c

080019ac <setup_website>:

void setup_website(void) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	switch (g_ESP.state) {
 80019b0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c24 <setup_website+0x278>)
 80019b2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80019b6:	3b01      	subs	r3, #1
 80019b8:	2b0a      	cmp	r3, #10
 80019ba:	f200 81d3 	bhi.w	8001d64 <setup_website+0x3b8>
 80019be:	a201      	add	r2, pc, #4	@ (adr r2, 80019c4 <setup_website+0x18>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001a7b 	.word	0x08001a7b
 80019c8:	08001ab1 	.word	0x08001ab1
 80019cc:	08001ae7 	.word	0x08001ae7
 80019d0:	08001b1f 	.word	0x08001b1f
 80019d4:	08001b57 	.word	0x08001b57
 80019d8:	08001b8d 	.word	0x08001b8d
 80019dc:	08001bc3 	.word	0x08001bc3
 80019e0:	08001bfb 	.word	0x08001bfb
 80019e4:	08001c4d 	.word	0x08001c4d
 80019e8:	08001cd9 	.word	0x08001cd9
 80019ec:	080019f1 	.word	0x080019f1
	case WaitForESPResponse: {
		if (strstr(g_ESP.response_position, "STATUS:2")) {
 80019f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001c24 <setup_website+0x278>)
 80019f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f6:	498c      	ldr	r1, [pc, #560]	@ (8001c28 <setup_website+0x27c>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00a fb76 	bl	800c0ea <strstr>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <setup_website+0x60>
			LCD_Print2("IP Address: ", g_ESP.ip_address);
 8001a04:	4989      	ldr	r1, [pc, #548]	@ (8001c2c <setup_website+0x280>)
 8001a06:	488a      	ldr	r0, [pc, #552]	@ (8001c30 <setup_website+0x284>)
 8001a08:	f000 fe91 	bl	800272e <LCD_Print2>
		}
		if (strstr(g_ESP.response_position, "CIFSR:STAIP")) {
 8001a0c:	4b85      	ldr	r3, [pc, #532]	@ (8001c24 <setup_website+0x278>)
 8001a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a12:	4988      	ldr	r1, [pc, #544]	@ (8001c34 <setup_website+0x288>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00a fb68 	bl	800c0ea <strstr>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <setup_website+0x86>
			printf("Got IP!\n\n");
 8001a20:	4885      	ldr	r0, [pc, #532]	@ (8001c38 <setup_website+0x28c>)
 8001a22:	f00a f9c5 	bl	800bdb0 <puts>
			parse_staip_response(g_ESP.response_position);
 8001a26:	4b7f      	ldr	r3, [pc, #508]	@ (8001c24 <setup_website+0x278>)
 8001a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fa57 	bl	8001ee0 <parse_staip_response>
		}
		if (strstr(g_ESP.response_position, "OK")) {
 8001a32:	4b7c      	ldr	r3, [pc, #496]	@ (8001c24 <setup_website+0x278>)
 8001a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a38:	4980      	ldr	r1, [pc, #512]	@ (8001c3c <setup_website+0x290>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00a fb55 	bl	800c0ea <strstr>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <setup_website+0xc0>
			g_ESP.state = ++g_ESP.previous_state;
 8001a46:	4b77      	ldr	r3, [pc, #476]	@ (8001c24 <setup_website+0x278>)
 8001a48:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b74      	ldr	r3, [pc, #464]	@ (8001c24 <setup_website+0x278>)
 8001a52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8001a56:	4b73      	ldr	r3, [pc, #460]	@ (8001c24 <setup_website+0x278>)
 8001a58:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a5c:	4b71      	ldr	r3, [pc, #452]	@ (8001c24 <setup_website+0x278>)
 8001a5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			g_ESP.tx_success = false;
 8001a62:	4b70      	ldr	r3, [pc, #448]	@ (8001c24 <setup_website+0x278>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			break;
 8001a6a:	e17b      	b.n	8001d64 <setup_website+0x3b8>
		}

		g_ESP.state = g_ESP.previous_state;
 8001a6c:	4b6d      	ldr	r3, [pc, #436]	@ (8001c24 <setup_website+0x278>)
 8001a6e:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a72:	4b6c      	ldr	r3, [pc, #432]	@ (8001c24 <setup_website+0x278>)
 8001a74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		break;
 8001a78:	e174      	b.n	8001d64 <setup_website+0x3b8>
	}
	case SendingAT:
		if (!g_ESP.tx_success) {
 8001a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c24 <setup_website+0x278>)
 8001a7c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001a80:	f083 0301 	eor.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8159 	beq.w	8001d3e <setup_website+0x392>
			g_ESP.timeout = 100;
 8001a8c:	4b65      	ldr	r3, [pc, #404]	@ (8001c24 <setup_website+0x278>)
 8001a8e:	2264      	movs	r2, #100	@ 0x64
 8001a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			send_command_to_esp(AT, &g_UART1_tx, &g_UART1_rx);
 8001a94:	4a6a      	ldr	r2, [pc, #424]	@ (8001c40 <setup_website+0x294>)
 8001a96:	496b      	ldr	r1, [pc, #428]	@ (8001c44 <setup_website+0x298>)
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f000 fa53 	bl	8001f44 <send_command_to_esp>
			g_ESP.state = WaitForESPResponse;
 8001a9e:	4b61      	ldr	r3, [pc, #388]	@ (8001c24 <setup_website+0x278>)
 8001aa0:	220b      	movs	r2, #11
 8001aa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			g_ESP.previous_state = SendingAT;
 8001aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c24 <setup_website+0x278>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		}
		break;
 8001aae:	e146      	b.n	8001d3e <setup_website+0x392>
	case SetCWMode:
		if (!g_ESP.tx_success) {
 8001ab0:	4b5c      	ldr	r3, [pc, #368]	@ (8001c24 <setup_website+0x278>)
 8001ab2:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001ab6:	f083 0301 	eor.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8140 	beq.w	8001d42 <setup_website+0x396>
			g_ESP.timeout = 100;
 8001ac2:	4b58      	ldr	r3, [pc, #352]	@ (8001c24 <setup_website+0x278>)
 8001ac4:	2264      	movs	r2, #100	@ 0x64
 8001ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			send_command_to_esp(Cwmode, &g_UART1_tx, &g_UART1_rx);
 8001aca:	4a5d      	ldr	r2, [pc, #372]	@ (8001c40 <setup_website+0x294>)
 8001acc:	495d      	ldr	r1, [pc, #372]	@ (8001c44 <setup_website+0x298>)
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fa38 	bl	8001f44 <send_command_to_esp>
			g_ESP.state = WaitForESPResponse;
 8001ad4:	4b53      	ldr	r3, [pc, #332]	@ (8001c24 <setup_website+0x278>)
 8001ad6:	220b      	movs	r2, #11
 8001ad8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			g_ESP.previous_state = SetCWMode;
 8001adc:	4b51      	ldr	r3, [pc, #324]	@ (8001c24 <setup_website+0x278>)
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		}
		break;
 8001ae4:	e12d      	b.n	8001d42 <setup_website+0x396>
	case ConnectWiFiCwjap:
		if (!g_ESP.tx_success) {
 8001ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8001c24 <setup_website+0x278>)
 8001ae8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001aec:	f083 0301 	eor.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8127 	beq.w	8001d46 <setup_website+0x39a>
			g_ESP.timeout = 2500;
 8001af8:	4b4a      	ldr	r3, [pc, #296]	@ (8001c24 <setup_website+0x278>)
 8001afa:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			send_command_to_esp(Cwjap, &g_UART1_tx, &g_UART1_rx);
 8001b02:	4a4f      	ldr	r2, [pc, #316]	@ (8001c40 <setup_website+0x294>)
 8001b04:	494f      	ldr	r1, [pc, #316]	@ (8001c44 <setup_website+0x298>)
 8001b06:	2002      	movs	r0, #2
 8001b08:	f000 fa1c 	bl	8001f44 <send_command_to_esp>
			g_ESP.state = WaitForESPResponse;
 8001b0c:	4b45      	ldr	r3, [pc, #276]	@ (8001c24 <setup_website+0x278>)
 8001b0e:	220b      	movs	r2, #11
 8001b10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			g_ESP.previous_state = ConnectWiFiCwjap;
 8001b14:	4b43      	ldr	r3, [pc, #268]	@ (8001c24 <setup_website+0x278>)
 8001b16:	2203      	movs	r2, #3
 8001b18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		}
		break;
 8001b1c:	e113      	b.n	8001d46 <setup_website+0x39a>
	case ObtainIPCifsr:
		if (!g_ESP.tx_success) {
 8001b1e:	4b41      	ldr	r3, [pc, #260]	@ (8001c24 <setup_website+0x278>)
 8001b20:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 810d 	beq.w	8001d4a <setup_website+0x39e>
			g_ESP.timeout = 1000;
 8001b30:	4b3c      	ldr	r3, [pc, #240]	@ (8001c24 <setup_website+0x278>)
 8001b32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			send_command_to_esp(Cifsr, &g_UART1_tx, &g_UART1_rx);
 8001b3a:	4a41      	ldr	r2, [pc, #260]	@ (8001c40 <setup_website+0x294>)
 8001b3c:	4941      	ldr	r1, [pc, #260]	@ (8001c44 <setup_website+0x298>)
 8001b3e:	2004      	movs	r0, #4
 8001b40:	f000 fa00 	bl	8001f44 <send_command_to_esp>
			g_ESP.state = WaitForESPResponse;
 8001b44:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <setup_website+0x278>)
 8001b46:	220b      	movs	r2, #11
 8001b48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			g_ESP.previous_state = ObtainIPCifsr;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <setup_website+0x278>)
 8001b4e:	2204      	movs	r2, #4
 8001b50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		}
		break;
 8001b54:	e0f9      	b.n	8001d4a <setup_website+0x39e>
	case EnableMultipleConnCipmux:
		if (!g_ESP.tx_success) {
 8001b56:	4b33      	ldr	r3, [pc, #204]	@ (8001c24 <setup_website+0x278>)
 8001b58:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b5c:	f083 0301 	eor.w	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80f3 	beq.w	8001d4e <setup_website+0x3a2>
			g_ESP.timeout = 100;
 8001b68:	4b2e      	ldr	r3, [pc, #184]	@ (8001c24 <setup_website+0x278>)
 8001b6a:	2264      	movs	r2, #100	@ 0x64
 8001b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			send_command_to_esp(Cipmux, &g_UART1_tx, &g_UART1_rx);
 8001b70:	4a33      	ldr	r2, [pc, #204]	@ (8001c40 <setup_website+0x294>)
 8001b72:	4934      	ldr	r1, [pc, #208]	@ (8001c44 <setup_website+0x298>)
 8001b74:	2005      	movs	r0, #5
 8001b76:	f000 f9e5 	bl	8001f44 <send_command_to_esp>
			g_ESP.state = WaitForESPResponse;
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c24 <setup_website+0x278>)
 8001b7c:	220b      	movs	r2, #11
 8001b7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			g_ESP.previous_state = EnableMultipleConnCipmux;
 8001b82:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <setup_website+0x278>)
 8001b84:	2205      	movs	r2, #5
 8001b86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		}
		break;
 8001b8a:	e0e0      	b.n	8001d4e <setup_website+0x3a2>
	case SetupCipserver:
		if (!g_ESP.tx_success) {
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <setup_website+0x278>)
 8001b8e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b92:	f083 0301 	eor.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80da 	beq.w	8001d52 <setup_website+0x3a6>
			g_ESP.timeout = 100;
 8001b9e:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <setup_website+0x278>)
 8001ba0:	2264      	movs	r2, #100	@ 0x64
 8001ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			send_command_to_esp(Cipserver, &g_UART1_tx, &g_UART1_rx);
 8001ba6:	4a26      	ldr	r2, [pc, #152]	@ (8001c40 <setup_website+0x294>)
 8001ba8:	4926      	ldr	r1, [pc, #152]	@ (8001c44 <setup_website+0x298>)
 8001baa:	2006      	movs	r0, #6
 8001bac:	f000 f9ca 	bl	8001f44 <send_command_to_esp>
			g_ESP.state = WaitForESPResponse;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <setup_website+0x278>)
 8001bb2:	220b      	movs	r2, #11
 8001bb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			g_ESP.previous_state = SetupCipserver;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <setup_website+0x278>)
 8001bba:	2206      	movs	r2, #6
 8001bbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		}
		break;
 8001bc0:	e0c7      	b.n	8001d52 <setup_website+0x3a6>
	case StartTCPCipstatus:
		if (!g_ESP.tx_success) {
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <setup_website+0x278>)
 8001bc4:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001bc8:	f083 0301 	eor.w	r3, r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80c1 	beq.w	8001d56 <setup_website+0x3aa>
			g_ESP.timeout = 2000;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <setup_website+0x278>)
 8001bd6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			send_command_to_esp(Cipstatus, &g_UART1_tx, &g_UART1_rx);
 8001bde:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <setup_website+0x294>)
 8001be0:	4918      	ldr	r1, [pc, #96]	@ (8001c44 <setup_website+0x298>)
 8001be2:	2007      	movs	r0, #7
 8001be4:	f000 f9ae 	bl	8001f44 <send_command_to_esp>
			g_ESP.state = WaitForESPResponse;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <setup_website+0x278>)
 8001bea:	220b      	movs	r2, #11
 8001bec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			g_ESP.previous_state = StartTCPCipstatus;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <setup_website+0x278>)
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		}
		break;
 8001bf8:	e0ad      	b.n	8001d56 <setup_website+0x3aa>
	case WaitForTCPRequest:
		if (strstr(g_ESP.response_position, "GET / HTTP/1.1")) {
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <setup_website+0x278>)
 8001bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c00:	4911      	ldr	r1, [pc, #68]	@ (8001c48 <setup_website+0x29c>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00a fa71 	bl	800c0ea <strstr>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80a5 	beq.w	8001d5a <setup_website+0x3ae>
			g_ESP.timeout = 3000;
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <setup_website+0x278>)
 8001c12:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			g_ESP.state = SendWebsite;
 8001c1a:	4b02      	ldr	r3, [pc, #8]	@ (8001c24 <setup_website+0x278>)
 8001c1c:	2209      	movs	r2, #9
 8001c1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}
		break;
 8001c22:	e09a      	b.n	8001d5a <setup_website+0x3ae>
 8001c24:	200020a0 	.word	0x200020a0
 8001c28:	0800f868 	.word	0x0800f868
 8001c2c:	20002110 	.word	0x20002110
 8001c30:	0800f874 	.word	0x0800f874
 8001c34:	0800f884 	.word	0x0800f884
 8001c38:	0800f890 	.word	0x0800f890
 8001c3c:	0800f89c 	.word	0x0800f89c
 8001c40:	20001050 	.word	0x20001050
 8001c44:	20002078 	.word	0x20002078
 8001c48:	0800f8a0 	.word	0x0800f8a0
	case SendWebsite:
		if (!g_ESP.tx_success && !g_ESP.cipsend_sent) {
 8001c4c:	4b46      	ldr	r3, [pc, #280]	@ (8001d68 <setup_website+0x3bc>)
 8001c4e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001c52:	f083 0301 	eor.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d010      	beq.n	8001c7e <setup_website+0x2d2>
 8001c5c:	4b42      	ldr	r3, [pc, #264]	@ (8001d68 <setup_website+0x3bc>)
 8001c5e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <setup_website+0x2d2>
			send_command_to_esp(Cipsend0, &g_UART1_tx, &g_UART1_rx);
 8001c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d6c <setup_website+0x3c0>)
 8001c6e:	4940      	ldr	r1, [pc, #256]	@ (8001d70 <setup_website+0x3c4>)
 8001c70:	2008      	movs	r0, #8
 8001c72:	f000 f967 	bl	8001f44 <send_command_to_esp>
			g_ESP.cipsend_sent = true;
 8001c76:	4b3c      	ldr	r3, [pc, #240]	@ (8001d68 <setup_website+0x3bc>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
		}
		if (strstr(g_ESP.response_position, ">")) {
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d68 <setup_website+0x3bc>)
 8001c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c84:	213e      	movs	r1, #62	@ 0x3e
 8001c86:	4618      	mov	r0, r3
 8001c88:	f00a fa0f 	bl	800c0aa <strchr>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d065      	beq.n	8001d5e <setup_website+0x3b2>
			if (!g_ESP.tx_success && !g_ESP.send_html_page_once) {
 8001c92:	4b35      	ldr	r3, [pc, #212]	@ (8001d68 <setup_website+0x3bc>)
 8001c94:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <setup_website+0x318>
 8001ca2:	4b31      	ldr	r3, [pc, #196]	@ (8001d68 <setup_website+0x3bc>)
 8001ca4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <setup_website+0x318>
				send_command_to_esp(HTML, &g_UART1_tx, &g_UART1_rx);
 8001cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d6c <setup_website+0x3c0>)
 8001cb4:	492e      	ldr	r1, [pc, #184]	@ (8001d70 <setup_website+0x3c4>)
 8001cb6:	200a      	movs	r0, #10
 8001cb8:	f000 f944 	bl	8001f44 <send_command_to_esp>
				g_ESP.state = RunWebsite;
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <setup_website+0x3bc>)
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
			g_ESP.tx_success = false;
 8001cc4:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <setup_website+0x3bc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			g_ESP.timeout = 1000;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <setup_website+0x3bc>)
 8001cce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		}
		break;
 8001cd6:	e042      	b.n	8001d5e <setup_website+0x3b2>
	case RunWebsite:
		if (!g_ESP.website_start_running) {
 8001cd8:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <setup_website+0x3bc>)
 8001cda:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001cde:	f083 0301 	eor.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <setup_website+0x350>
			g_ESP.website_start_running = true;
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <setup_website+0x3bc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
			g_ESP.timeout = 500; // check every 500 ms for proper running
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <setup_website+0x3bc>)
 8001cf2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			send_command_to_esp(Cipclose0, &g_UART1_tx, &g_UART1_rx);
			g_ESP.website_fully_setup = true;
			g_ESP.tx_success = false;
			g_ESP.state = WebsiteSuccessfullySetup;
		}
		break;
 8001cfa:	e032      	b.n	8001d62 <setup_website+0x3b6>
		} else if (g_ESP.website_start_running
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <setup_website+0x3bc>)
 8001cfe:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d02d      	beq.n	8001d62 <setup_website+0x3b6>
				&& (strstr(g_ESP.response_position, "SEND OK"))) {
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <setup_website+0x3bc>)
 8001d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d0c:	4919      	ldr	r1, [pc, #100]	@ (8001d74 <setup_website+0x3c8>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f00a f9eb 	bl	800c0ea <strstr>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d023      	beq.n	8001d62 <setup_website+0x3b6>
			send_command_to_esp(Cipclose0, &g_UART1_tx, &g_UART1_rx);
 8001d1a:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <setup_website+0x3c0>)
 8001d1c:	4914      	ldr	r1, [pc, #80]	@ (8001d70 <setup_website+0x3c4>)
 8001d1e:	2009      	movs	r0, #9
 8001d20:	f000 f910 	bl	8001f44 <send_command_to_esp>
			g_ESP.website_fully_setup = true;
 8001d24:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <setup_website+0x3bc>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			g_ESP.tx_success = false;
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <setup_website+0x3bc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			g_ESP.state = WebsiteSuccessfullySetup;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <setup_website+0x3bc>)
 8001d36:	2264      	movs	r2, #100	@ 0x64
 8001d38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		break;
 8001d3c:	e011      	b.n	8001d62 <setup_website+0x3b6>
		break;
 8001d3e:	bf00      	nop
 8001d40:	e010      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d42:	bf00      	nop
 8001d44:	e00e      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d46:	bf00      	nop
 8001d48:	e00c      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d4a:	bf00      	nop
 8001d4c:	e00a      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d4e:	bf00      	nop
 8001d50:	e008      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d52:	bf00      	nop
 8001d54:	e006      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d56:	bf00      	nop
 8001d58:	e004      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d5a:	bf00      	nop
 8001d5c:	e002      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d5e:	bf00      	nop
 8001d60:	e000      	b.n	8001d64 <setup_website+0x3b8>
		break;
 8001d62:	bf00      	nop
	}
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200020a0 	.word	0x200020a0
 8001d6c:	20001050 	.word	0x20001050
 8001d70:	20002078 	.word	0x20002078
 8001d74:	0800f834 	.word	0x0800f834

08001d78 <uart_state_machine>:

void uart_state_machine(UART_Rx_t *uart_rx, UART_Tx_t *uart_tx) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	switch (uart_rx->state) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d88:	7a9b      	ldrb	r3, [r3, #10]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d00f      	beq.n	8001db0 <uart_state_machine+0x38>
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	dc20      	bgt.n	8001dd6 <uart_state_machine+0x5e>
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01d      	beq.n	8001dd4 <uart_state_machine+0x5c>
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d11c      	bne.n	8001dd6 <uart_state_machine+0x5e>
	case RxIdle:
		break;
	case RxDataReceived:
		process_uart_received_data(uart_rx, &g_ESP, &g_Pixy, &g_Motor);
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <uart_state_machine+0x84>)
 8001d9e:	4a18      	ldr	r2, [pc, #96]	@ (8001e00 <uart_state_machine+0x88>)
 8001da0:	4918      	ldr	r1, [pc, #96]	@ (8001e04 <uart_state_machine+0x8c>)
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff f968 	bl	8001078 <process_uart_received_data>
		restart_reception(uart_rx);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f888 	bl	8001ebe <restart_reception>
		break;
 8001dae:	e012      	b.n	8001dd6 <uart_state_machine+0x5e>
	case RxError:
		process_uart_rx_error(uart_rx);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff f8f1 	bl	8000f98 <process_uart_rx_error>
		reset_uart_rx_buffer(uart_rx);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fca8 	bl	800170c <reset_uart_rx_buffer>
		while (uart_rx->hal_status != HAL_OK) {
 8001dbc:	e002      	b.n	8001dc4 <uart_state_machine+0x4c>
			restart_reception(uart_rx);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f87d 	bl	8001ebe <restart_reception>
		while (uart_rx->hal_status != HAL_OK) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dca:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f5      	bne.n	8001dbe <uart_state_machine+0x46>
		}
		break;
 8001dd2:	e000      	b.n	8001dd6 <uart_state_machine+0x5e>
		break;
 8001dd4:	bf00      	nop
	}

	if (uart_tx->state == TxIdle && uart_tx->data_size > 0) {
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	7a1b      	ldrb	r3, [r3, #8]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <uart_state_machine+0x7c>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	88db      	ldrh	r3, [r3, #6]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <uart_state_machine+0x7c>
		start_uart_tx(uart_tx);
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f7ff f8bf 	bl	8000f6c <start_uart_tx>
		uart_tx->state = TxSendingData;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	721a      	strb	r2, [r3, #8]
	}
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20002170 	.word	0x20002170
 8001e00:	20002254 	.word	0x20002254
 8001e04:	200020a0 	.word	0x200020a0

08001e08 <init_uart_rx_ptrs>:
extern VelocimetricWheel_t g_left_VCW;
extern VelocimetricWheel_t g_right_VCW;
extern TestMotor_t g_test_motors;

/* START ESP HELPERS */
void init_uart_rx_ptrs(UART_Rx_t *uart_rx) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	uart_rx->buffer_base = uart_rx->buffer;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3308      	adds	r3, #8
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e1a:	6113      	str	r3, [r2, #16]
	uart_rx->buffer_start = uart_rx->buffer_base;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e2a:	6193      	str	r3, [r2, #24]
	uart_rx->buffer_end = uart_rx->buffer_start + MAX_BUFFER_SIZE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e3e:	61d3      	str	r3, [r2, #28]
	uart_rx->buffer_threshold = uart_rx->buffer + (MAX_BUFFER_SIZE * 3 / 4);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3308      	adds	r3, #8
 8001e44:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e4e:	6153      	str	r3, [r2, #20]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <init_uart_tx_ptrs>:

void init_uart_tx_ptrs(UART_Tx_t *uart_tx) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	uart_tx->buffer_base = uart_tx->linked_rx->buffer;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f103 0208 	add.w	r2, r3, #8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	611a      	str	r2, [r3, #16]
	uart_tx->buffer_start = uart_tx->linked_rx->buffer_start;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	615a      	str	r2, [r3, #20]
	uart_tx->buffer_end = uart_tx->buffer_start + MAX_BUFFER_SIZE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	619a      	str	r2, [r3, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <link_uarts>:

void link_uarts(UART_Rx_t *uart_rx, UART_Tx_t *uart_tx) {
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
	uart_rx->linked_tx = uart_tx;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6253      	str	r3, [r2, #36]	@ 0x24
	uart_tx->linked_rx = uart_rx;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	621a      	str	r2, [r3, #32]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <restart_reception>:

void restart_reception(UART_Rx_t *uart_rx) {
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	// Restart the reception
	start_uart_rx_to_idle(uart_rx);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fff4 	bl	8000eb4 <start_uart_rx_to_idle>
	uart_rx->state = RxIdle;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	729a      	strb	r2, [r3, #10]
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <parse_staip_response>:

void parse_staip_response(uint8_t *response) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	// find the first double quote (starting of the IP)
	const char *ip_start = strchr(response, '"');
 8001ee8:	2122      	movs	r1, #34	@ 0x22
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f00a f8dd 	bl	800c0aa <strchr>
 8001ef0:	6178      	str	r0, [r7, #20]
	if (ip_start != NULL) {
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01c      	beq.n	8001f32 <parse_staip_response+0x52>
		ip_start++;  // Move past the first '"'
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]

		// find the second double quote (end of the IP)
		const char *ipEnd = strchr(ip_start, '"');
 8001efe:	2122      	movs	r1, #34	@ 0x22
 8001f00:	6978      	ldr	r0, [r7, #20]
 8001f02:	f00a f8d2 	bl	800c0aa <strchr>
 8001f06:	6138      	str	r0, [r7, #16]
		if (ipEnd != NULL) {
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d011      	beq.n	8001f32 <parse_staip_response+0x52>
			// calculate the length of the IP address
			size_t ip_length = ipEnd - ip_start;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	60fb      	str	r3, [r7, #12]
			if (ip_length < sizeof(g_ESP.ip_address)) {
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <parse_staip_response+0x52>
				// copy only the IP address into staIP
				strncpy(g_ESP.ip_address, ip_start, ip_length);
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	6979      	ldr	r1, [r7, #20]
 8001f20:	4806      	ldr	r0, [pc, #24]	@ (8001f3c <parse_staip_response+0x5c>)
 8001f22:	f00a f8cf 	bl	800c0c4 <strncpy>
				g_ESP.ip_address[ip_length] = '\0';
 8001f26:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <parse_staip_response+0x60>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3370      	adds	r3, #112	@ 0x70
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20002110 	.word	0x20002110
 8001f40:	200020a0 	.word	0x200020a0

08001f44 <send_command_to_esp>:

void send_command_to_esp(uint8_t command_index, UART_Tx_t *uart_tx,
		UART_Rx_t *uart_rx) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	73fb      	strb	r3, [r7, #15]

	if (command_index
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	2b13      	cmp	r3, #19
 8001f56:	d824      	bhi.n	8001fa2 <send_command_to_esp+0x5e>
			< sizeof(g_ESP.at_commands) / sizeof(g_ESP.at_commands[0])) {
		const char *command = g_ESP.at_commands[command_index]; // Get the command
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	4a15      	ldr	r2, [pc, #84]	@ (8001fb0 <send_command_to_esp+0x6c>)
 8001f5c:	3308      	adds	r3, #8
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	617b      	str	r3, [r7, #20]

		printf("Command sent: %s\n", command);
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	4813      	ldr	r0, [pc, #76]	@ (8001fb4 <send_command_to_esp+0x70>)
 8001f68:	f009 feba 	bl	800bce0 <iprintf>

		uart_tx->buffer_start = (uint8_t*) g_ESP.at_commands[command_index];
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <send_command_to_esp+0x6c>)
 8001f70:	3308      	adds	r3, #8
 8001f72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	615a      	str	r2, [r3, #20]
		uart_tx->data_size = strlen(g_ESP.at_commands[command_index]);
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <send_command_to_esp+0x6c>)
 8001f7e:	3308      	adds	r3, #8
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe f97b 	bl	8000280 <strlen>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	80da      	strh	r2, [r3, #6]

		g_ESP.response_position = uart_rx->buffer_start;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <send_command_to_esp+0x6c>)
 8001f9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

	} else {
		// Handle invalid command index
		printf("Invalid command index\n");
	}
}
 8001fa0:	e002      	b.n	8001fa8 <send_command_to_esp+0x64>
		printf("Invalid command index\n");
 8001fa2:	4805      	ldr	r0, [pc, #20]	@ (8001fb8 <send_command_to_esp+0x74>)
 8001fa4:	f009 ff04 	bl	800bdb0 <puts>
}
 8001fa8:	bf00      	nop
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200020a0 	.word	0x200020a0
 8001fb4:	0800f8b0 	.word	0x0800f8b0
 8001fb8:	0800f8c4 	.word	0x0800f8c4

08001fbc <toggle_led_and_respond>:

void toggle_led_and_respond(uint8_t connection_id, GPIO_TypeDef *gpio,
		uint16_t pin, const char *off_response, const char *on_response) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	81bb      	strh	r3, [r7, #12]
	// toggle led
	HAL_GPIO_TogglePin(gpio, pin);
 8001fce:	89bb      	ldrh	r3, [r7, #12]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	68b8      	ldr	r0, [r7, #8]
 8001fd4:	f003 fb5e 	bl	8005694 <HAL_GPIO_TogglePin>

	// prepare cipsend command
	sprintf(g_ESP.website_command, "AT+CIPSEND=%d,2\r\n", connection_id);
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4915      	ldr	r1, [pc, #84]	@ (8002034 <toggle_led_and_respond+0x78>)
 8001fde:	4816      	ldr	r0, [pc, #88]	@ (8002038 <toggle_led_and_respond+0x7c>)
 8001fe0:	f009 ff24 	bl	800be2c <siprintf>
	g_UART1_tx.buffer_start = (uint8_t*) g_ESP.website_command;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	@ (800203c <toggle_led_and_respond+0x80>)
 8001fe6:	4a14      	ldr	r2, [pc, #80]	@ (8002038 <toggle_led_and_respond+0x7c>)
 8001fe8:	615a      	str	r2, [r3, #20]
	g_UART1_tx.data_size = strlen(g_ESP.website_command);
 8001fea:	4813      	ldr	r0, [pc, #76]	@ (8002038 <toggle_led_and_respond+0x7c>)
 8001fec:	f7fe f948 	bl	8000280 <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <toggle_led_and_respond+0x80>)
 8001ff6:	80da      	strh	r2, [r3, #6]

	// store rg_ESPonse for later sending
	if (HAL_GPIO_ReadPin(gpio, pin) == GPIO_PIN_SET) {
 8001ff8:	89bb      	ldrh	r3, [r7, #12]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	68b8      	ldr	r0, [r7, #8]
 8001ffe:	f003 fb19 	bl	8005634 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	2b01      	cmp	r3, #1
 8002006:	d104      	bne.n	8002012 <toggle_led_and_respond+0x56>
		strcpy((char*) g_ESP.response, on_response);
 8002008:	69b9      	ldr	r1, [r7, #24]
 800200a:	480d      	ldr	r0, [pc, #52]	@ (8002040 <toggle_led_and_respond+0x84>)
 800200c:	f00a f8fb 	bl	800c206 <strcpy>
 8002010:	e003      	b.n	800201a <toggle_led_and_respond+0x5e>
	} else {
		strcpy((char*) g_ESP.response, off_response);
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	480a      	ldr	r0, [pc, #40]	@ (8002040 <toggle_led_and_respond+0x84>)
 8002016:	f00a f8f6 	bl	800c206 <strcpy>
	}

	// mark this part of buffer as processed
	g_UART1_rx.data_size = 0;
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <toggle_led_and_respond+0x88>)
 800201c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002020:	2200      	movs	r2, #0
 8002022:	811a      	strh	r2, [r3, #8]
	g_ESP.html_state = RightArrow;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <toggle_led_and_respond+0x8c>)
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	0800f8dc 	.word	0x0800f8dc
 8002038:	20002134 	.word	0x20002134
 800203c:	20002078 	.word	0x20002078
 8002040:	20002149 	.word	0x20002149
 8002044:	20001050 	.word	0x20001050
 8002048:	200020a0 	.word	0x200020a0

0800204c <extract_connection_id>:

uint8_t extract_connection_id(const char *buffer) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	char *connectionStr = strstr(buffer, "+IPD,");
 8002054:	4909      	ldr	r1, [pc, #36]	@ (800207c <extract_connection_id+0x30>)
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f00a f847 	bl	800c0ea <strstr>
 800205c:	60f8      	str	r0, [r7, #12]
	if (connectionStr) {
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <extract_connection_id+0x24>
		return connectionStr[5] - '0';  // extract the connection ID
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3305      	adds	r3, #5
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	3b30      	subs	r3, #48	@ 0x30
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e000      	b.n	8002072 <extract_connection_id+0x26>
	}
	return 0; // Default connection ID
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	0800f8f0 	.word	0x0800f8f0

08002080 <init_pixy_struct>:
/* END ESP HELPERS */

/* START PIXY HELPERS */

void init_pixy_struct(Pixy_t *pixy) {
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	pixy->rx_buffer_base = pixy->rx_buffer;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	1d1a      	adds	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	pixy->tx_ptr = NULL;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	pixy->tx_data_size = 0;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

	// for states
	pixy->state = PixyIdle;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	pixy->move_command_state = Stop; // stop at the start
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2204      	movs	r2, #4
 80020ae:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243

	// reset detection flags
	pixy->barcode_detected = false;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	pixy->barcode.value = BarcodeNotDetected;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

	// reset vector counts
	pixy->num_of_vectors = 0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
	pixy->num_of_branches = 0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <update_pwm>:
	pixy->barcode.flag = 0;
}
/* END PIXY HELPERS */

/* START MOTOR HELPERS */
void update_pwm(Motor_t *motor) {
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	// prevent ccr from exceeding more than arr value
	if (motor->left_CCR > ARR_VALUE) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	891b      	ldrh	r3, [r3, #8]
 80020ec:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80020f0:	d303      	bcc.n	80020fa <update_pwm+0x1a>
		motor->left_CCR = ARR_VALUE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80020f8:	811a      	strh	r2, [r3, #8]
	}

	if (motor->right_CCR > ARR_VALUE) {
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	895b      	ldrh	r3, [r3, #10]
 80020fe:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002102:	d303      	bcc.n	800210c <update_pwm+0x2c>
		motor->right_CCR = ARR_VALUE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f640 620f 	movw	r2, #3599	@ 0xe0f
 800210a:	815a      	strh	r2, [r3, #10]
	}

	// update ccr value
	TIM3->CCR1 = motor->left_CCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	891a      	ldrh	r2, [r3, #8]
 8002110:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <update_pwm+0x48>)
 8002112:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR3 = motor->right_CCR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	895a      	ldrh	r2, [r3, #10]
 8002118:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <update_pwm+0x48>)
 800211a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40000400 	.word	0x40000400

0800212c <start_pwm>:

void start_pwm(Motor_t *motor) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	motor->left_hal_status = HAL_TIM_PWM_Start(motor->htim,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
			motor->left_channel);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	791b      	ldrb	r3, [r3, #4]
	motor->left_hal_status = HAL_TIM_PWM_Start(motor->htim,
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f006 fc14 	bl	800896c <HAL_TIM_PWM_Start>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	719a      	strb	r2, [r3, #6]
	motor->right_hal_status = HAL_TIM_PWM_Start(motor->htim,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
			motor->right_channel);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	795b      	ldrb	r3, [r3, #5]
	motor->right_hal_status = HAL_TIM_PWM_Start(motor->htim,
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	f006 fc08 	bl	800896c <HAL_TIM_PWM_Start>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	71da      	strb	r2, [r3, #7]
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <stop_pwm>:

void stop_pwm(Motor_t *motor) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	motor->left_hal_status = HAL_TIM_PWM_Stop(motor->htim, motor->left_channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	791b      	ldrb	r3, [r3, #4]
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f006 fd00 	bl	8008b84 <HAL_TIM_PWM_Stop>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	719a      	strb	r2, [r3, #6]
	motor->right_hal_status = HAL_TIM_PWM_Stop(motor->htim,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
			motor->right_channel);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	795b      	ldrb	r3, [r3, #5]
	motor->right_hal_status = HAL_TIM_PWM_Stop(motor->htim,
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f006 fcf4 	bl	8008b84 <HAL_TIM_PWM_Stop>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	71da      	strb	r2, [r3, #7]
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <reset_vcw_values>:

void reset_vcw_values(VelocimetricWheel_t *left, VelocimetricWheel_t *right) {
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
	left->fall_count = 0;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
	left->rise_count = 0;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]

	right->fall_count = 0;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
	right->rise_count = 0;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <obtain_ccr_values>:

void obtain_ccr_values(Motor_t *motor) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	// the formula obtained is plotted on an excel, extrapolated and using excel function
	// to derive the y = mx + c equation
	motor->left_CCR = (uint16_t) ((motor->scaled_input / LEFT_MOTOR_GRADIENT)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80021ea:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002260 <obtain_ccr_values+0x84>
 80021ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
			+ LEFT_MOTOR_INTERCEPT) * PWM_SCALING_FACTOR;
 80021f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002264 <obtain_ccr_values+0x88>
 80021f6:	ee77 7a87 	vadd.f32	s15, s15, s14
	motor->left_CCR = (uint16_t) ((motor->scaled_input / LEFT_MOTOR_GRADIENT)
 80021fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021fe:	ee17 3a90 	vmov	r3, s15
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4413      	add	r3, r2
 800220a:	461a      	mov	r2, r3
 800220c:	0091      	lsls	r1, r2, #2
 800220e:	461a      	mov	r2, r3
 8002210:	460b      	mov	r3, r1
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	b29a      	uxth	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	811a      	strh	r2, [r3, #8]

	motor->right_CCR = (uint16_t) ((motor->scaled_input / RIGHT_MOTOR_GRADIENT)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8002222:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002268 <obtain_ccr_values+0x8c>
 8002226:	eec7 7a26 	vdiv.f32	s15, s14, s13
			+ RIGHT_MOTOR_INTERCEPT) * PWM_SCALING_FACTOR;
 800222a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800226c <obtain_ccr_values+0x90>
 800222e:	ee77 7a87 	vadd.f32	s15, s15, s14
	motor->right_CCR = (uint16_t) ((motor->scaled_input / RIGHT_MOTOR_GRADIENT)
 8002232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002236:	ee17 3a90 	vmov	r3, s15
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4413      	add	r3, r2
 8002242:	461a      	mov	r2, r3
 8002244:	0091      	lsls	r1, r2, #2
 8002246:	461a      	mov	r2, r3
 8002248:	460b      	mov	r3, r1
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	b29a      	uxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	815a      	strh	r2, [r3, #10]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	3bbac711 	.word	0x3bbac711
 8002264:	3a902de0 	.word	0x3a902de0
 8002268:	3bd1b717 	.word	0x3bd1b717
 800226c:	3b03126f 	.word	0x3b03126f

08002270 <reset_pid_properties>:
			__HAL_TIM_SET_COMPARE(test->htim, test->right_channel, 0);
		}
	}
}

void reset_pid_properties(PIDController_t *pid) {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	// proportional properties
	pid->error_left_motor = 0;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	60da      	str	r2, [r3, #12]
	pid->error_right_motor = 0;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	611a      	str	r2, [r3, #16]

	// derivative properties
	pid->derivative_left = 0;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	61da      	str	r2, [r3, #28]
	pid->derivative_right = 0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
	pid->prev_error_left = 0;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	615a      	str	r2, [r3, #20]
	pid->prev_error_right = 0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]

	// integral properties
	pid->integral_left = 0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->integral_right = 0;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HD44780_Init>:
		0b10011, 0b00000 };

uint8_t special2[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01001,
		0b00110, 0b00000 };

void HD44780_Init(uint8_t rows) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 80022ce:	4a38      	ldr	r2, [pc, #224]	@ (80023b0 <HD44780_Init+0xec>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_BACKLIGHT;
 80022d4:	4b37      	ldr	r3, [pc, #220]	@ (80023b4 <HD44780_Init+0xf0>)
 80022d6:	2208      	movs	r2, #8
 80022d8:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80022da:	4b37      	ldr	r3, [pc, #220]	@ (80023b8 <HD44780_Init+0xf4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 80022e0:	4b33      	ldr	r3, [pc, #204]	@ (80023b0 <HD44780_Init+0xec>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d907      	bls.n	80022f8 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 80022e8:	4b33      	ldr	r3, [pc, #204]	@ (80023b8 <HD44780_Init+0xf4>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HD44780_Init+0xf4>)
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e006      	b.n	8002306 <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 80022f8:	4b2f      	ldr	r3, [pc, #188]	@ (80023b8 <HD44780_Init+0xf4>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b2d      	ldr	r3, [pc, #180]	@ (80023b8 <HD44780_Init+0xf4>)
 8002304:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 8002306:	f000 f9af 	bl	8002668 <DelayInit>
	HAL_Delay(50);
 800230a:	2032      	movs	r0, #50	@ 0x32
 800230c:	f002 fc98 	bl	8004c40 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 8002310:	4b28      	ldr	r3, [pc, #160]	@ (80023b4 <HD44780_Init+0xf0>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f96d 	bl	80025f4 <ExpanderWrite>
	HAL_Delay(1000);
 800231a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800231e:	f002 fc8f 	bl	8004c40 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 8002322:	2030      	movs	r0, #48	@ 0x30
 8002324:	f000 f955 	bl	80025d2 <Write4Bits>
	DelayUS(4500);
 8002328:	f241 1094 	movw	r0, #4500	@ 0x1194
 800232c:	f000 f9c6 	bl	80026bc <DelayUS>

	Write4Bits(0x03 << 4);
 8002330:	2030      	movs	r0, #48	@ 0x30
 8002332:	f000 f94e 	bl	80025d2 <Write4Bits>
	DelayUS(4500);
 8002336:	f241 1094 	movw	r0, #4500	@ 0x1194
 800233a:	f000 f9bf 	bl	80026bc <DelayUS>

	Write4Bits(0x03 << 4);
 800233e:	2030      	movs	r0, #48	@ 0x30
 8002340:	f000 f947 	bl	80025d2 <Write4Bits>
	DelayUS(4500);
 8002344:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002348:	f000 f9b8 	bl	80026bc <DelayUS>

	Write4Bits(0x02 << 4);
 800234c:	2020      	movs	r0, #32
 800234e:	f000 f940 	bl	80025d2 <Write4Bits>
	DelayUS(100);
 8002352:	2064      	movs	r0, #100	@ 0x64
 8002354:	f000 f9b2 	bl	80026bc <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002358:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <HD44780_Init+0xf4>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f043 0320 	orr.w	r3, r3, #32
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f8f8 	bl	8002558 <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <HD44780_Init+0xf8>)
 800236a:	2204      	movs	r2, #4
 800236c:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 800236e:	f000 f875 	bl	800245c <HD44780_Display>
	HD44780_Clear();
 8002372:	f000 f82b 	bl	80023cc <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002376:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HD44780_Init+0xfc>)
 8002378:	2202      	movs	r2, #2
 800237a:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 800237c:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HD44780_Init+0xfc>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f8e6 	bl	8002558 <SendCommand>
	DelayUS(4500);
 800238c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002390:	f000 f994 	bl	80026bc <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 8002394:	490b      	ldr	r1, [pc, #44]	@ (80023c4 <HD44780_Init+0x100>)
 8002396:	2000      	movs	r0, #0
 8002398:	f000 f876 	bl	8002488 <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 800239c:	490a      	ldr	r1, [pc, #40]	@ (80023c8 <HD44780_Init+0x104>)
 800239e:	2001      	movs	r0, #1
 80023a0:	f000 f872 	bl	8002488 <HD44780_CreateSpecialChar>

	HD44780_Home();
 80023a4:	f000 f81d 	bl	80023e2 <HD44780_Home>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20002693 	.word	0x20002693
 80023b4:	20002694 	.word	0x20002694
 80023b8:	20002690 	.word	0x20002690
 80023bc:	20002691 	.word	0x20002691
 80023c0:	20002692 	.word	0x20002692
 80023c4:	20002160 	.word	0x20002160
 80023c8:	20002168 	.word	0x20002168

080023cc <HD44780_Clear>:

void HD44780_Clear() {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f000 f8c1 	bl	8002558 <SendCommand>
	DelayUS(2000);
 80023d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023da:	f000 f96f 	bl	80026bc <DelayUS>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HD44780_Home>:

void HD44780_Home() {
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 80023e6:	2002      	movs	r0, #2
 80023e8:	f000 f8b6 	bl	8002558 <SendCommand>
	DelayUS(2000);
 80023ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023f0:	f000 f964 	bl	80026bc <DelayUS>
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	460a      	mov	r2, r1
 8002402:	71fb      	strb	r3, [r7, #7]
 8002404:	4613      	mov	r3, r2
 8002406:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HD44780_SetCursor+0x5c>)
 800240a:	f107 0408 	add.w	r4, r7, #8
 800240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 8002414:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HD44780_SetCursor+0x60>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	79ba      	ldrb	r2, [r7, #6]
 800241a:	429a      	cmp	r2, r3
 800241c:	d303      	bcc.n	8002426 <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 800241e:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <HD44780_SetCursor+0x60>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002426:	79bb      	ldrb	r3, [r7, #6]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3318      	adds	r3, #24
 800242c:	443b      	add	r3, r7
 800242e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	4413      	add	r3, r2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	b25b      	sxtb	r3, r3
 800243c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002440:	b25b      	sxtb	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f887 	bl	8002558 <SendCommand>
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	0800f8f8 	.word	0x0800f8f8
 8002458:	20002693 	.word	0x20002693

0800245c <HD44780_Display>:
void HD44780_NoDisplay() {
	dpControl &= ~LCD_DISPLAYON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display() {
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <HD44780_Display+0x28>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HD44780_Display+0x28>)
 800246c:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HD44780_Display+0x28>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f86d 	bl	8002558 <SendCommand>
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20002691 	.word	0x20002691

08002488 <HD44780_CreateSpecialChar>:
void HD44780_NoAutoScroll(void) {
	dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
	SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	b25b      	sxtb	r3, r3
 80024a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f853 	bl	8002558 <SendCommand>
	for (int i = 0; i < 8; i++) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e009      	b.n	80024cc <HD44780_CreateSpecialChar+0x44>
		SendChar(charmap[i]);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f857 	bl	8002574 <SendChar>
	for (int i = 0; i < 8; i++) {
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3301      	adds	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b07      	cmp	r3, #7
 80024d0:	ddf2      	ble.n	80024b8 <HD44780_CreateSpecialChar+0x30>
	}
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
	HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	while (*c)
 80024e4:	e006      	b.n	80024f4 <HD44780_PrintStr+0x18>
		SendChar(*c++);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f840 	bl	8002574 <SendChar>
	while (*c)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f4      	bne.n	80024e6 <HD44780_PrintStr+0xa>
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HD44780_SetBacklight>:

void HD44780_SetBacklight(uint8_t new_val) {
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
	if (new_val)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HD44780_SetBacklight+0x16>
		HD44780_Backlight();
 8002516:	f000 f813 	bl	8002540 <HD44780_Backlight>
	else
		HD44780_NoBacklight();
}
 800251a:	e001      	b.n	8002520 <HD44780_SetBacklight+0x1a>
		HD44780_NoBacklight();
 800251c:	f000 f804 	bl	8002528 <HD44780_NoBacklight>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HD44780_NoBacklight>:

void HD44780_NoBacklight(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
	dpBacklight = LCD_NOBACKLIGHT;
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <HD44780_NoBacklight+0x14>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
	ExpanderWrite(0);
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f85e 	bl	80025f4 <ExpanderWrite>
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20002694 	.word	0x20002694

08002540 <HD44780_Backlight>:

void HD44780_Backlight(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	dpBacklight = LCD_BACKLIGHT;
 8002544:	4b03      	ldr	r3, [pc, #12]	@ (8002554 <HD44780_Backlight+0x14>)
 8002546:	2208      	movs	r2, #8
 8002548:	701a      	strb	r2, [r3, #0]
	ExpanderWrite(0);
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f852 	bl	80025f4 <ExpanderWrite>
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20002694 	.word	0x20002694

08002558 <SendCommand>:

static void SendCommand(uint8_t cmd) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f812 	bl	8002590 <Send>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <SendChar>:

static void SendChar(uint8_t ch) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2101      	movs	r1, #1
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f804 	bl	8002590 <Send>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <Send>:

static void Send(uint8_t value, uint8_t mode) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	460a      	mov	r2, r1
 800259a:	71fb      	strb	r3, [r7, #7]
 800259c:	4613      	mov	r3, r2
 800259e:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f023 030f 	bic.w	r3, r3, #15
 80025a6:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f80b 	bl	80025d2 <Write4Bits>
	Write4Bits((lownib) | mode);
 80025bc:	7bba      	ldrb	r2, [r7, #14]
 80025be:	79bb      	ldrb	r3, [r7, #6]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f804 	bl	80025d2 <Write4Bits>
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <Write4Bits>:

static void Write4Bits(uint8_t value) {
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f808 	bl	80025f4 <ExpanderWrite>
	PulseEnable(value);
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f820 	bl	800262c <PulseEnable>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <ExpanderWrite+0x30>)
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	4313      	orrs	r3, r2
 8002606:	b2db      	uxtb	r3, r3
 8002608:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 800260a:	f107 020f 	add.w	r2, r7, #15
 800260e:	230a      	movs	r3, #10
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	214e      	movs	r1, #78	@ 0x4e
 8002616:	4804      	ldr	r0, [pc, #16]	@ (8002628 <ExpanderWrite+0x34>)
 8002618:	f003 f90a 	bl	8005830 <HAL_I2C_Master_Transmit>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20002694 	.word	0x20002694
 8002628:	20002698 	.word	0x20002698

0800262c <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ffd8 	bl	80025f4 <ExpanderWrite>
	DelayUS(20);
 8002644:	2014      	movs	r0, #20
 8002646:	f000 f839 	bl	80026bc <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ffce 	bl	80025f4 <ExpanderWrite>
	DelayUS(20);
 8002658:	2014      	movs	r0, #20
 800265a:	f000 f82f 	bl	80026bc <DelayUS>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <DelayInit>:

static void DelayInit(void) {
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <DelayInit+0x4c>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a10      	ldr	r2, [pc, #64]	@ (80026b4 <DelayInit+0x4c>)
 8002672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <DelayInit+0x4c>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a0d      	ldr	r2, [pc, #52]	@ (80026b4 <DelayInit+0x4c>)
 800267e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002682:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <DelayInit+0x50>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0b      	ldr	r2, [pc, #44]	@ (80026b8 <DelayInit+0x50>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <DelayInit+0x50>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a08      	ldr	r2, [pc, #32]	@ (80026b8 <DelayInit+0x50>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <DelayInit+0x50>)
 800269e:	2200      	movs	r2, #0
 80026a0:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80026a2:	bf00      	nop
	__ASM volatile ("NOP");
 80026a4:	bf00      	nop
	__ASM volatile ("NOP");
 80026a6:	bf00      	nop
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000edf0 	.word	0xe000edf0
 80026b8:	e0001000 	.word	0xe0001000

080026bc <DelayUS>:

static void DelayUS(uint32_t us) {
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <DelayUS+0x44>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002704 <DelayUS+0x48>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9a      	lsrs	r2, r3, #18
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <DelayUS+0x4c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <DelayUS+0x4c>)
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d8f6      	bhi.n	80026de <DelayUS+0x22>
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	200024a0 	.word	0x200024a0
 8002704:	431bde83 	.word	0x431bde83
 8002708:	e0001000 	.word	0xe0001000

0800270c <LCD_Print>:

// user defined
void LCD_Print(char *text1){
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

	HD44780_Clear();
 8002714:	f7ff fe5a 	bl	80023cc <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8002718:	2100      	movs	r1, #0
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff fe6c 	bl	80023f8 <HD44780_SetCursor>
	HD44780_PrintStr(text1);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fedb 	bl	80024dc <HD44780_PrintStr>


}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <LCD_Print2>:

void LCD_Print2(char *text1, char *text2){
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]

	HD44780_Clear();
 8002738:	f7ff fe48 	bl	80023cc <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800273c:	2100      	movs	r1, #0
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff fe5a 	bl	80023f8 <HD44780_SetCursor>
	HD44780_PrintStr(text1);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fec9 	bl	80024dc <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 800274a:	2101      	movs	r1, #1
 800274c:	2000      	movs	r0, #0
 800274e:	f7ff fe53 	bl	80023f8 <HD44780_SetCursor>
	HD44780_PrintStr(text2);
 8002752:	6838      	ldr	r0, [r7, #0]
 8002754:	f7ff fec2 	bl	80024dc <HD44780_PrintStr>

}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002768:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800276c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d013      	beq.n	80027a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002778:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800277c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002780:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002788:	e000      	b.n	800278c <ITM_SendChar+0x2c>
    {
      __NOP();
 800278a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800278c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f9      	beq.n	800278a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002796:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80027a0:	687b      	ldr	r3, [r7, #4]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027b4:	f002 f9de 	bl	8004b74 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027b8:	f000 f8a6 	bl	8002908 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80027bc:	f000 fab8 	bl	8002d30 <MX_GPIO_Init>
	MX_DMA_Init();
 80027c0:	f000 fa80 	bl	8002cc4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80027c4:	f000 fa4e 	bl	8002c64 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80027c8:	f000 fa1c 	bl	8002c04 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 80027cc:	f000 f906 	bl	80029dc <MX_I2C1_Init>
	MX_SPI2_Init();
 80027d0:	f000 f944 	bl	8002a5c <MX_SPI2_Init>
	MX_TIM3_Init();
 80027d4:	f000 f980 	bl	8002ad8 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	// initialize uart
	link_uarts(&g_UART2_rx, &g_UART1_tx);
 80027d8:	493d      	ldr	r1, [pc, #244]	@ (80028d0 <main+0x120>)
 80027da:	483e      	ldr	r0, [pc, #248]	@ (80028d4 <main+0x124>)
 80027dc:	f7ff fb5b 	bl	8001e96 <link_uarts>
	init_uart_rx_ptrs(&g_UART2_rx);
 80027e0:	483c      	ldr	r0, [pc, #240]	@ (80028d4 <main+0x124>)
 80027e2:	f7ff fb11 	bl	8001e08 <init_uart_rx_ptrs>
	init_uart_tx_ptrs(&g_UART1_tx);
 80027e6:	483a      	ldr	r0, [pc, #232]	@ (80028d0 <main+0x120>)
 80027e8:	f7ff fb38 	bl	8001e5c <init_uart_tx_ptrs>
	link_uarts(&g_UART1_rx, &g_UART2_tx);
 80027ec:	493a      	ldr	r1, [pc, #232]	@ (80028d8 <main+0x128>)
 80027ee:	483b      	ldr	r0, [pc, #236]	@ (80028dc <main+0x12c>)
 80027f0:	f7ff fb51 	bl	8001e96 <link_uarts>
	init_uart_rx_ptrs(&g_UART1_rx);
 80027f4:	4839      	ldr	r0, [pc, #228]	@ (80028dc <main+0x12c>)
 80027f6:	f7ff fb07 	bl	8001e08 <init_uart_rx_ptrs>
	init_uart_tx_ptrs(&g_UART2_tx);
 80027fa:	4837      	ldr	r0, [pc, #220]	@ (80028d8 <main+0x128>)
 80027fc:	f7ff fb2e 	bl	8001e5c <init_uart_tx_ptrs>

	// start Reception
	start_uart_rx_to_idle(&g_UART2_rx);
 8002800:	4834      	ldr	r0, [pc, #208]	@ (80028d4 <main+0x124>)
 8002802:	f7fe fb57 	bl	8000eb4 <start_uart_rx_to_idle>
	__HAL_DMA_DISABLE_IT(g_UART2_rx.hdma_rx, DMA_IT_HT);
 8002806:	4b33      	ldr	r3, [pc, #204]	@ (80028d4 <main+0x124>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <main+0x124>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0204 	bic.w	r2, r2, #4
 8002818:	601a      	str	r2, [r3, #0]
	start_uart_rx_to_idle(&g_UART1_rx);
 800281a:	4830      	ldr	r0, [pc, #192]	@ (80028dc <main+0x12c>)
 800281c:	f7fe fb4a 	bl	8000eb4 <start_uart_rx_to_idle>
	__HAL_DMA_DISABLE_IT(g_UART1_rx.hdma_rx, DMA_IT_HT);
 8002820:	4b2e      	ldr	r3, [pc, #184]	@ (80028dc <main+0x12c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <main+0x12c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
//	printf("Initialized UART1 and UART2\n");

// initialize pixy pointers
	init_pixy_struct(&g_Pixy);
 8002834:	482a      	ldr	r0, [pc, #168]	@ (80028e0 <main+0x130>)
 8002836:	f7ff fc23 	bl	8002080 <init_pixy_struct>
//	printf("Initialized Pixy Camera\n");

// stop the LED from blinking
	HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_SET);
 800283a:	2201      	movs	r2, #1
 800283c:	2101      	movs	r1, #1
 800283e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002842:	f002 ff0f 	bl	8005664 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_SET);
 8002846:	2201      	movs	r2, #1
 8002848:	2102      	movs	r1, #2
 800284a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800284e:	f002 ff09 	bl	8005664 <HAL_GPIO_WritePin>
//	printf("Initialized Red and Blue LEDs\n");

// initialize LCD
	HD44780_Init(2);
 8002852:	2002      	movs	r0, #2
 8002854:	f7ff fd36 	bl	80022c4 <HD44780_Init>
	HD44780_Clear();
 8002858:	f7ff fdb8 	bl	80023cc <HD44780_Clear>
	HD44780_SetBacklight(1);
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff fe52 	bl	8002506 <HD44780_SetBacklight>
	HD44780_SetCursor(0, 0);
 8002862:	2100      	movs	r1, #0
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff fdc7 	bl	80023f8 <HD44780_SetCursor>
//	printf("Initialized LCD Display\n");

	LCD_Print("System Init");
 800286a:	481e      	ldr	r0, [pc, #120]	@ (80028e4 <main+0x134>)
 800286c:	f7ff ff4e 	bl	800270c <LCD_Print>
	printf("System Initialized\n");
 8002870:	481d      	ldr	r0, [pc, #116]	@ (80028e8 <main+0x138>)
 8002872:	f009 fa9d 	bl	800bdb0 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Insert all components state machines here
		esp_control(&g_ESP);
 8002876:	481d      	ldr	r0, [pc, #116]	@ (80028ec <main+0x13c>)
 8002878:	f7fe fbde 	bl	8001038 <esp_control>

		pixy_control(&g_Pixy);
 800287c:	4818      	ldr	r0, [pc, #96]	@ (80028e0 <main+0x130>)
 800287e:	f000 fee7 	bl	8003650 <pixy_control>

		motor_control(&g_Motor, &g_PID_controller, &g_left_VCW, &g_right_VCW);
 8002882:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <main+0x140>)
 8002884:	4a1b      	ldr	r2, [pc, #108]	@ (80028f4 <main+0x144>)
 8002886:	491c      	ldr	r1, [pc, #112]	@ (80028f8 <main+0x148>)
 8002888:	481c      	ldr	r0, [pc, #112]	@ (80028fc <main+0x14c>)
 800288a:	f000 fb0d 	bl	8002ea8 <motor_control>

#ifdef TEST_MOTOR
		obtain_graph_formula(&g_test_motors, &g_Motor, &g_left_VCW, &g_right_VCW);
#endif

		if ((uwTick != greenBlinker.lastTick)
 800288e:	4b1c      	ldr	r3, [pc, #112]	@ (8002900 <main+0x150>)
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	4b1c      	ldr	r3, [pc, #112]	@ (8002904 <main+0x154>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d0ed      	beq.n	8002876 <main+0xc6>
				&& (greenBlinker.expiryTick > 0)) {
 800289a:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <main+0x150>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0e9      	beq.n	8002876 <main+0xc6>
			greenBlinker.expiryTick -= 1;
 80028a2:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <main+0x150>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	4a15      	ldr	r2, [pc, #84]	@ (8002900 <main+0x150>)
 80028aa:	6053      	str	r3, [r2, #4]
			if (greenBlinker.expiryTick == 0) {
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <main+0x150>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d108      	bne.n	80028c6 <main+0x116>
				HAL_GPIO_TogglePin(Green_LD2_GPIO_Port, Green_LD2_Pin);
 80028b4:	2120      	movs	r1, #32
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ba:	f002 feeb 	bl	8005694 <HAL_GPIO_TogglePin>
				greenBlinker.expiryTick = greenBlinker.delayValue;
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <main+0x150>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002900 <main+0x150>)
 80028c4:	6053      	str	r3, [r2, #4]
			}
			greenBlinker.lastTick = uwTick;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <main+0x154>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <main+0x150>)
 80028cc:	6093      	str	r3, [r2, #8]
		esp_control(&g_ESP);
 80028ce:	e7d2      	b.n	8002876 <main+0xc6>
 80028d0:	20002078 	.word	0x20002078
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20001028 	.word	0x20001028
 80028dc:	20001050 	.word	0x20001050
 80028e0:	20002254 	.word	0x20002254
 80028e4:	0800f908 	.word	0x0800f908
 80028e8:	0800f914 	.word	0x0800f914
 80028ec:	200020a0 	.word	0x200020a0
 80028f0:	200021f4 	.word	0x200021f4
 80028f4:	200021dc 	.word	0x200021dc
 80028f8:	2000220c 	.word	0x2000220c
 80028fc:	20002170 	.word	0x20002170
 8002900:	200029bc 	.word	0x200029bc
 8002904:	200029cc 	.word	0x200029cc

08002908 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b0a6      	sub	sp, #152	@ 0x98
 800290c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800290e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002912:	2228      	movs	r2, #40	@ 0x28
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f009 fbb0 	bl	800c07c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800291c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	2258      	movs	r2, #88	@ 0x58
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f009 fba2 	bl	800c07c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002938:	2303      	movs	r3, #3
 800293a:	673b      	str	r3, [r7, #112]	@ 0x70
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800293c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002940:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002942:	2301      	movs	r3, #1
 8002944:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002946:	2310      	movs	r3, #16
 8002948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800294c:	2302      	movs	r3, #2
 800294e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800295a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800295e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002968:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800296c:	4618      	mov	r0, r3
 800296e:	f003 fb29 	bl	8005fc4 <HAL_RCC_OscConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <SystemClock_Config+0x74>
		Error_Handler();
 8002978:	f000 fa90 	bl	8002e9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800297c:	230f      	movs	r3, #15
 800297e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002980:	2302      	movs	r3, #2
 8002982:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002988:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800298c:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800298e:	2300      	movs	r3, #0
 8002990:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002992:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fb37 	bl	800700c <HAL_RCC_ClockConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <SystemClock_Config+0xa0>
		Error_Handler();
 80029a4:	f000 fa7a 	bl	8002e9c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <SystemClock_Config+0xd0>)
 80029aa:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM34;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80029b4:	2300      	movs	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
	PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	643b      	str	r3, [r7, #64]	@ 0x40
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fd36 	bl	8007430 <HAL_RCCEx_PeriphCLKConfig>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <SystemClock_Config+0xc6>
		Error_Handler();
 80029ca:	f000 fa67 	bl	8002e9c <Error_Handler>
	}
}
 80029ce:	bf00      	nop
 80029d0:	3798      	adds	r7, #152	@ 0x98
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	00200023 	.word	0x00200023

080029dc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <MX_I2C1_Init+0x74>)
 80029e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a54 <MX_I2C1_Init+0x78>)
 80029e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00201D2B;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <MX_I2C1_Init+0x74>)
 80029e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <MX_I2C1_Init+0x7c>)
 80029ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80029ec:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <MX_I2C1_Init+0x74>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f2:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <MX_I2C1_Init+0x74>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f8:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <MX_I2C1_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80029fe:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <MX_I2C1_Init+0x74>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a04:	4b12      	ldr	r3, [pc, #72]	@ (8002a50 <MX_I2C1_Init+0x74>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0a:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <MX_I2C1_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	@ (8002a50 <MX_I2C1_Init+0x74>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002a16:	480e      	ldr	r0, [pc, #56]	@ (8002a50 <MX_I2C1_Init+0x74>)
 8002a18:	f002 fe6e 	bl	80056f8 <HAL_I2C_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002a22:	f000 fa3b 	bl	8002e9c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002a26:	2100      	movs	r1, #0
 8002a28:	4809      	ldr	r0, [pc, #36]	@ (8002a50 <MX_I2C1_Init+0x74>)
 8002a2a:	f003 fa33 	bl	8005e94 <HAL_I2CEx_ConfigAnalogFilter>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002a34:	f000 fa32 	bl	8002e9c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4805      	ldr	r0, [pc, #20]	@ (8002a50 <MX_I2C1_Init+0x74>)
 8002a3c:	f003 fa75 	bl	8005f2a <HAL_I2CEx_ConfigDigitalFilter>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002a46:	f000 fa29 	bl	8002e9c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20002698 	.word	0x20002698
 8002a54:	40005400 	.word	0x40005400
 8002a58:	00201d2b 	.word	0x00201d2b

08002a5c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a62:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <MX_SPI2_Init+0x78>)
 8002a64:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a6c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a7a:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a7e:	2202      	movs	r2, #2
 8002a80:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a82:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a8a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002a8e:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a92:	2220      	movs	r2, #32
 8002a94:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002aaa:	2207      	movs	r2, #7
 8002aac:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002aba:	4805      	ldr	r0, [pc, #20]	@ (8002ad0 <MX_SPI2_Init+0x74>)
 8002abc:	f004 fed4 	bl	8007868 <HAL_SPI_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_SPI2_Init+0x6e>
		Error_Handler();
 8002ac6:	f000 f9e9 	bl	8002e9c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200026ec 	.word	0x200026ec
 8002ad4:	40003800 	.word	0x40003800

08002ad8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	@ 0x38
 8002adc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ade:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002af8:	463b      	mov	r3, r7
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]
 8002b06:	615a      	str	r2, [r3, #20]
 8002b08:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c00 <MX_TIM3_Init+0x128>)
 8002b0e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002b10:	4b3a      	ldr	r3, [pc, #232]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b16:	4b39      	ldr	r3, [pc, #228]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3599;
 8002b1c:	4b37      	ldr	r3, [pc, #220]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b1e:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002b22:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b24:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b2a:	4b34      	ldr	r3, [pc, #208]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b2c:	2280      	movs	r2, #128	@ 0x80
 8002b2e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002b30:	4832      	ldr	r0, [pc, #200]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b32:	f005 fe62 	bl	80087fa <HAL_TIM_Base_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM3_Init+0x68>
		Error_Handler();
 8002b3c:	f000 f9ae 	bl	8002e9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002b46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	482b      	ldr	r0, [pc, #172]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b4e:	f006 f9c9 	bl	8008ee4 <HAL_TIM_ConfigClockSource>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_TIM3_Init+0x84>
		Error_Handler();
 8002b58:	f000 f9a0 	bl	8002e9c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002b5c:	4827      	ldr	r0, [pc, #156]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b5e:	f005 fea3 	bl	80088a8 <HAL_TIM_PWM_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM3_Init+0x94>
		Error_Handler();
 8002b68:	f000 f998 	bl	8002e9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4820      	ldr	r0, [pc, #128]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002b7c:	f006 feec 	bl	8009958 <HAL_TIMEx_MasterConfigSynchronization>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8002b86:	f000 f989 	bl	8002e9c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b8a:	2360      	movs	r3, #96	@ 0x60
 8002b8c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8002b8e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b92:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4816      	ldr	r0, [pc, #88]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002ba4:	f006 f88a 	bl	8008cbc <HAL_TIM_PWM_ConfigChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM3_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8002bae:	f000 f975 	bl	8002e9c <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0208 	bic.w	r2, r2, #8
 8002bc0:	619a      	str	r2, [r3, #24]
	sConfigOC.Pulse = 700;
 8002bc2:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002bc6:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2208      	movs	r2, #8
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480b      	ldr	r0, [pc, #44]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002bd0:	f006 f874 	bl	8008cbc <HAL_TIM_PWM_ConfigChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM3_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 8002bda:	f000 f95f 	bl	8002e9c <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8002bde:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0208 	bic.w	r2, r2, #8
 8002bec:	61da      	str	r2, [r3, #28]
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002bee:	4803      	ldr	r0, [pc, #12]	@ (8002bfc <MX_TIM3_Init+0x124>)
 8002bf0:	f001 fcea 	bl	80045c8 <HAL_TIM_MspPostInit>

}
 8002bf4:	bf00      	nop
 8002bf6:	3738      	adds	r7, #56	@ 0x38
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20002750 	.word	0x20002750
 8002c00:	40000400 	.word	0x40000400

08002c04 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002c08:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c0a:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <MX_USART1_UART_Init+0x5c>)
 8002c0c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c14:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c34:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002c46:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c48:	f006 ff12 	bl	8009a70 <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8002c52:	f000 f923 	bl	8002e9c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000279c 	.word	0x2000279c
 8002c60:	40013800 	.word	0x40013800

08002c64 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002c68:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c6a:	4a15      	ldr	r2, [pc, #84]	@ (8002cc0 <MX_USART2_UART_Init+0x5c>)
 8002c6c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002c6e:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c74:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c76:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c9a:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002ca6:	4805      	ldr	r0, [pc, #20]	@ (8002cbc <MX_USART2_UART_Init+0x58>)
 8002ca8:	f006 fee2 	bl	8009a70 <HAL_UART_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8002cb2:	f000 f8f3 	bl	8002e9c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20002824 	.word	0x20002824
 8002cc0:	40004400 	.word	0x40004400

08002cc4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002cca:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <MX_DMA_Init+0x68>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <MX_DMA_Init+0x68>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6153      	str	r3, [r2, #20]
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <MX_DMA_Init+0x68>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	200e      	movs	r0, #14
 8002ce8:	f002 f8a9 	bl	8004e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002cec:	200e      	movs	r0, #14
 8002cee:	f002 f8c2 	bl	8004e76 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	200f      	movs	r0, #15
 8002cf8:	f002 f8a1 	bl	8004e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002cfc:	200f      	movs	r0, #15
 8002cfe:	f002 f8ba 	bl	8004e76 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	2010      	movs	r0, #16
 8002d08:	f002 f899 	bl	8004e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002d0c:	2010      	movs	r0, #16
 8002d0e:	f002 f8b2 	bl	8004e76 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	2011      	movs	r0, #17
 8002d18:	f002 f891 	bl	8004e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002d1c:	2011      	movs	r0, #17
 8002d1e:	f002 f8aa 	bl	8004e76 <HAL_NVIC_EnableIRQ>

}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000

08002d30 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	@ 0x28
 8002d34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002d36:	f107 0314 	add.w	r3, r7, #20
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	4b45      	ldr	r3, [pc, #276]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4a44      	ldr	r2, [pc, #272]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d50:	6153      	str	r3, [r2, #20]
 8002d52:	4b42      	ldr	r3, [pc, #264]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4a3e      	ldr	r2, [pc, #248]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d68:	6153      	str	r3, [r2, #20]
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	4b39      	ldr	r3, [pc, #228]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	4a38      	ldr	r2, [pc, #224]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d80:	6153      	str	r3, [r2, #20]
 8002d82:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	4b33      	ldr	r3, [pc, #204]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4a32      	ldr	r2, [pc, #200]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d98:	6153      	str	r3, [r2, #20]
 8002d9a:	4b30      	ldr	r3, [pc, #192]	@ (8002e5c <MX_GPIO_Init+0x12c>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BlueLED_Pin | RedLED_Pin | Green_LD2_Pin,
 8002da6:	2200      	movs	r2, #0
 8002da8:	2123      	movs	r1, #35	@ 0x23
 8002daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dae:	f002 fc59 	bl	8005664 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : Blue_B1_Pin */
	GPIO_InitStruct.Pin = Blue_B1_Pin;
 8002db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002db6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002db8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002dbc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Blue_B1_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4825      	ldr	r0, [pc, #148]	@ (8002e60 <MX_GPIO_Init+0x130>)
 8002dca:	f002 faa9 	bl	8005320 <HAL_GPIO_Init>

	/*Configure GPIO pins : Left_VCW_Pin Right_VCW_Pin */
	GPIO_InitStruct.Pin = Left_VCW_Pin | Right_VCW_Pin;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002dd2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002dd6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	481f      	ldr	r0, [pc, #124]	@ (8002e60 <MX_GPIO_Init+0x130>)
 8002de4:	f002 fa9c 	bl	8005320 <HAL_GPIO_Init>

	/*Configure GPIO pins : BlueLED_Pin RedLED_Pin */
	GPIO_InitStruct.Pin = BlueLED_Pin | RedLED_Pin;
 8002de8:	2303      	movs	r3, #3
 8002dea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002dec:	2311      	movs	r3, #17
 8002dee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e02:	f002 fa8d 	bl	8005320 <HAL_GPIO_Init>

	/*Configure GPIO pin : Green_LD2_Pin */
	GPIO_InitStruct.Pin = Green_LD2_Pin;
 8002e06:	2320      	movs	r3, #32
 8002e08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Green_LD2_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e20:	f002 fa7e 	bl	8005320 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	2006      	movs	r0, #6
 8002e2a:	f002 f808 	bl	8004e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e2e:	2006      	movs	r0, #6
 8002e30:	f002 f821 	bl	8004e76 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	2007      	movs	r0, #7
 8002e3a:	f002 f800 	bl	8004e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002e3e:	2007      	movs	r0, #7
 8002e40:	f002 f819 	bl	8004e76 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e44:	2200      	movs	r2, #0
 8002e46:	2100      	movs	r1, #0
 8002e48:	2028      	movs	r0, #40	@ 0x28
 8002e4a:	f001 fff8 	bl	8004e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e4e:	2028      	movs	r0, #40	@ 0x28
 8002e50:	f002 f811 	bl	8004e76 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002e54:	bf00      	nop
 8002e56:	3728      	adds	r7, #40	@ 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	48000800 	.word	0x48000800

08002e64 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e009      	b.n	8002e8a <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	60ba      	str	r2, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fc6e 	bl	8002760 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3301      	adds	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	dbf1      	blt.n	8002e76 <_write+0x12>
	}
	return len;
 8002e92:	687b      	ldr	r3, [r7, #4]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea0:	b672      	cpsid	i
}
 8002ea2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <Error_Handler+0x8>

08002ea8 <motor_control>:
extern UART_Tx_t g_UART1_tx;
extern UART_Rx_t g_UART2_rx;
extern UART_Tx_t g_UART2_tx;

void motor_control(Motor_t *motor, PIDController_t *pid,
		VelocimetricWheel_t *left, VelocimetricWheel_t *right) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
	switch (motor->state) {
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <motor_control+0x2e>
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d109      	bne.n	8002ed8 <motor_control+0x30>
	case MotorIdle:
		break;
	case MotorDataReceived:
		process_motor_data(motor, pid);
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f88c 	bl	8002fe4 <process_motor_data>
		motor->state = MotorIdle;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		break;
 8002ed4:	e000      	b.n	8002ed8 <motor_control+0x30>
		break;
 8002ed6:	bf00      	nop
	}

	if (motor->motors_moving) {
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d064      	beq.n	8002fac <motor_control+0x104>
		if (uwTick - motor->last_received_time >= SAMPLE_TIME) {
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd0 <motor_control+0x128>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ef0:	d343      	bcc.n	8002f7a <motor_control+0xd2>
			uint16_t left_total_count = left->fall_count + left->rise_count;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	82fb      	strh	r3, [r7, #22]
			uint16_t right_total_count = right->fall_count + right->rise_count;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	82bb      	strh	r3, [r7, #20]

			// calculate velocity
			left->calculated_velocity = (float) left_total_count
 8002f12:	8afb      	ldrh	r3, [r7, #22]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (float) SAMPLE_TIME;
 8002f1c:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002fd4 <motor_control+0x12c>
 8002f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
			left->calculated_velocity = (float) left_total_count
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	edc3 7a04 	vstr	s15, [r3, #16]
			right->calculated_velocity = (float) right_total_count
 8002f2a:	8abb      	ldrh	r3, [r7, #20]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (float) SAMPLE_TIME;
 8002f34:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002fd4 <motor_control+0x12c>
 8002f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
			right->calculated_velocity = (float) right_total_count
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	edc3 7a04 	vstr	s15, [r3, #16]

			// scale the velocity
			left->scaled_velocity = left->calculated_velocity
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	edd3 7a04 	vldr	s15, [r3, #16]
					* PWM_SCALING_FACTOR;
 8002f48:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002fd8 <motor_control+0x130>
 8002f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
			left->scaled_velocity = left->calculated_velocity
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	edc3 7a05 	vstr	s15, [r3, #20]
			right->scaled_velocity = right->calculated_velocity
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	edd3 7a04 	vldr	s15, [r3, #16]
					* PWM_SCALING_FACTOR;
 8002f5c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002fd8 <motor_control+0x130>
 8002f60:	ee67 7a87 	vmul.f32	s15, s15, s14
			right->scaled_velocity = right->calculated_velocity
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	edc3 7a05 	vstr	s15, [r3, #20]

			// reset vcw counts
			reset_vcw_values(left, right);
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff f91d 	bl	80021ac <reset_vcw_values>

			motor->last_received_time = uwTick;
 8002f72:	4b17      	ldr	r3, [pc, #92]	@ (8002fd0 <motor_control+0x128>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	665a      	str	r2, [r3, #100]	@ 0x64
		}
		if (motor->mvel_flag) {
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <motor_control+0x104>
			if (uwTick - pid->last_received_time >= PID_SAMPLE_TIME) {
 8002f84:	4b12      	ldr	r3, [pc, #72]	@ (8002fd0 <motor_control+0x128>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2bf9      	cmp	r3, #249	@ 0xf9
 8002f90:	d90c      	bls.n	8002fac <motor_control+0x104>
				apply_pid(motor, pid, left, right);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f9dd 	bl	8003358 <apply_pid>
				update_pwm(motor);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff f89e 	bl	80020e0 <update_pwm>

				pid->last_received_time = uwTick;
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <motor_control+0x128>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if (g_ESP.website_fully_setup && g_ESP.system_mode == AutoMode) {
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <motor_control+0x134>)
 8002fae:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <motor_control+0x11e>
 8002fb6:	4b09      	ldr	r3, [pc, #36]	@ (8002fdc <motor_control+0x134>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d103      	bne.n	8002fc6 <motor_control+0x11e>
		process_motor_in_auto_mode(motor, &g_Pixy);
 8002fbe:	4908      	ldr	r1, [pc, #32]	@ (8002fe0 <motor_control+0x138>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 faed 	bl	80035a0 <process_motor_in_auto_mode>
	}
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200029cc 	.word	0x200029cc
 8002fd4:	43fa0000 	.word	0x43fa0000
 8002fd8:	42c80000 	.word	0x42c80000
 8002fdc:	200020a0 	.word	0x200020a0
 8002fe0:	20002254 	.word	0x20002254

08002fe4 <process_motor_data>:

void process_motor_data(Motor_t *motor, PIDController_t *pid) {
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b08a      	sub	sp, #40	@ 0x28
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
	if (motor->command != NULL) {
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	333e      	adds	r3, #62	@ 0x3e
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 81a6 	beq.w	8003344 <process_motor_data+0x360>
		// clear the contents of response buffer
		memset(motor->response, 0, sizeof(motor->response));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	2232      	movs	r2, #50	@ 0x32
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f009 f83b 	bl	800c07c <memset>

		// start pwm generation - motor start moving
		if (strstr(motor->command, "at+start") != NULL) {
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	333e      	adds	r3, #62	@ 0x3e
 800300a:	49b3      	ldr	r1, [pc, #716]	@ (80032d8 <process_motor_data+0x2f4>)
 800300c:	4618      	mov	r0, r3
 800300e:	f009 f86c 	bl	800c0ea <strstr>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d026      	beq.n	8003066 <process_motor_data+0x82>
			printf("Starting motors!\n");
 8003018:	48b0      	ldr	r0, [pc, #704]	@ (80032dc <process_motor_data+0x2f8>)
 800301a:	f008 fec9 	bl	800bdb0 <puts>
			start_pwm(motor);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff f884 	bl	800212c <start_pwm>
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f103 000c 	add.w	r0, r3, #12
					"Left: %u\r\n, Right: %u\r\n", motor->left_CCR,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	891b      	ldrh	r3, [r3, #8]
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH,
 800302e:	461a      	mov	r2, r3
					motor->right_CCR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	895b      	ldrh	r3, [r3, #10]
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH,
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	4aa9      	ldr	r2, [pc, #676]	@ (80032e0 <process_motor_data+0x2fc>)
 800303a:	2123      	movs	r1, #35	@ 0x23
 800303c:	f008 fec0 	bl	800bdc0 <sniprintf>
			motor->motors_moving = true;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

			motor->last_received_time = uwTick; // start counting to get velocity
 8003048:	4ba6      	ldr	r3, [pc, #664]	@ (80032e4 <process_motor_data+0x300>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	665a      	str	r2, [r3, #100]	@ 0x64

			if (motor->mvel_flag) {
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 812d 	beq.w	80032b6 <process_motor_data+0x2d2>
				pid->last_received_time = uwTick;
 800305c:	4ba1      	ldr	r3, [pc, #644]	@ (80032e4 <process_motor_data+0x300>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e127      	b.n	80032b6 <process_motor_data+0x2d2>
			}
		}
		// stop pwm generation - motor stop moving
		else if (strstr(motor->command, "at+stop") != NULL) {
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	333e      	adds	r3, #62	@ 0x3e
 800306a:	499f      	ldr	r1, [pc, #636]	@ (80032e8 <process_motor_data+0x304>)
 800306c:	4618      	mov	r0, r3
 800306e:	f009 f83c 	bl	800c0ea <strstr>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d034      	beq.n	80030e2 <process_motor_data+0xfe>
			if (motor->motors_moving) {
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01c      	beq.n	80030bc <process_motor_data+0xd8>
				printf("Stopping motors!\n");
 8003082:	489a      	ldr	r0, [pc, #616]	@ (80032ec <process_motor_data+0x308>)
 8003084:	f008 fe94 	bl	800bdb0 <puts>
				stop_pwm(motor);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff f86f 	bl	800216c <stop_pwm>
				strcpy(motor->response, "All Stopped\r\n");
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	330c      	adds	r3, #12
 8003092:	4a97      	ldr	r2, [pc, #604]	@ (80032f0 <process_motor_data+0x30c>)
 8003094:	461c      	mov	r4, r3
 8003096:	4613      	mov	r3, r2
 8003098:	cb07      	ldmia	r3!, {r0, r1, r2}
 800309a:	6020      	str	r0, [r4, #0]
 800309c:	6061      	str	r1, [r4, #4]
 800309e:	60a2      	str	r2, [r4, #8]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	81a3      	strh	r3, [r4, #12]

				// reset vcw value and toggle the flag
				reset_vcw_values(&g_left_VCW, &g_right_VCW);
 80030a4:	4993      	ldr	r1, [pc, #588]	@ (80032f4 <process_motor_data+0x310>)
 80030a6:	4894      	ldr	r0, [pc, #592]	@ (80032f8 <process_motor_data+0x314>)
 80030a8:	f7ff f880 	bl	80021ac <reset_vcw_values>
				// reset pid properties
				reset_pid_properties(pid);
 80030ac:	6838      	ldr	r0, [r7, #0]
 80030ae:	f7ff f8df 	bl	8002270 <reset_pid_properties>

				motor->motors_moving = false;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80030ba:	e0fc      	b.n	80032b6 <process_motor_data+0x2d2>
			} else {
				printf("Motors already stopped!\n");
 80030bc:	488f      	ldr	r0, [pc, #572]	@ (80032fc <process_motor_data+0x318>)
 80030be:	f008 fe77 	bl	800bdb0 <puts>
				strcpy(motor->response, "Motors already stopped\r\n");
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	330c      	adds	r3, #12
 80030c6:	4a8e      	ldr	r2, [pc, #568]	@ (8003300 <process_motor_data+0x31c>)
 80030c8:	461d      	mov	r5, r3
 80030ca:	4614      	mov	r4, r2
 80030cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ce:	6028      	str	r0, [r5, #0]
 80030d0:	6069      	str	r1, [r5, #4]
 80030d2:	60aa      	str	r2, [r5, #8]
 80030d4:	60eb      	str	r3, [r5, #12]
 80030d6:	cc03      	ldmia	r4!, {r0, r1}
 80030d8:	6128      	str	r0, [r5, #16]
 80030da:	6169      	str	r1, [r5, #20]
 80030dc:	7823      	ldrb	r3, [r4, #0]
 80030de:	762b      	strb	r3, [r5, #24]
 80030e0:	e0e9      	b.n	80032b6 <process_motor_data+0x2d2>
			}
		}
		// cancel mvel flag
		else if (strstr(motor->command, "at+cancel") != NULL) {
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	333e      	adds	r3, #62	@ 0x3e
 80030e6:	4987      	ldr	r1, [pc, #540]	@ (8003304 <process_motor_data+0x320>)
 80030e8:	4618      	mov	r0, r3
 80030ea:	f008 fffe 	bl	800c0ea <strstr>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d028      	beq.n	8003146 <process_motor_data+0x162>
			if (motor->mvel_flag) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <process_motor_data+0x146>
				reset_vcw_values(&g_left_VCW, &g_right_VCW);
 80030fe:	497d      	ldr	r1, [pc, #500]	@ (80032f4 <process_motor_data+0x310>)
 8003100:	487d      	ldr	r0, [pc, #500]	@ (80032f8 <process_motor_data+0x314>)
 8003102:	f7ff f853 	bl	80021ac <reset_vcw_values>
				reset_pid_properties(pid);
 8003106:	6838      	ldr	r0, [r7, #0]
 8003108:	f7ff f8b2 	bl	8002270 <reset_pid_properties>
				motor->mvel_flag = false;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
				strcpy(motor->response, "Stopping mvel\r\n");
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	330c      	adds	r3, #12
 8003118:	4a7b      	ldr	r2, [pc, #492]	@ (8003308 <process_motor_data+0x324>)
 800311a:	461c      	mov	r4, r3
 800311c:	4615      	mov	r5, r2
 800311e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003120:	6020      	str	r0, [r4, #0]
 8003122:	6061      	str	r1, [r4, #4]
 8003124:	60a2      	str	r2, [r4, #8]
 8003126:	60e3      	str	r3, [r4, #12]
 8003128:	e0c5      	b.n	80032b6 <process_motor_data+0x2d2>
			} else {
				strcpy(motor->response, "Mvel already disabled\r\n");
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	330c      	adds	r3, #12
 800312e:	4a77      	ldr	r2, [pc, #476]	@ (800330c <process_motor_data+0x328>)
 8003130:	461d      	mov	r5, r3
 8003132:	4614      	mov	r4, r2
 8003134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003136:	6028      	str	r0, [r5, #0]
 8003138:	6069      	str	r1, [r5, #4]
 800313a:	60aa      	str	r2, [r5, #8]
 800313c:	60eb      	str	r3, [r5, #12]
 800313e:	cc03      	ldmia	r4!, {r0, r1}
 8003140:	6128      	str	r0, [r5, #16]
 8003142:	6169      	str	r1, [r5, #20]
 8003144:	e0b7      	b.n	80032b6 <process_motor_data+0x2d2>
			}
		}
		// command to set the desired velocity so that the robot can move relatively forward
		else if (sscanf(motor->command, "at+mvel=%u", &motor->input_value)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f103 003e 	add.w	r0, r3, #62	@ 0x3e
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3360      	adds	r3, #96	@ 0x60
 8003150:	461a      	mov	r2, r3
 8003152:	496f      	ldr	r1, [pc, #444]	@ (8003310 <process_motor_data+0x32c>)
 8003154:	f008 fe8c 	bl	800be70 <siscanf>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d134      	bne.n	80031c8 <process_motor_data+0x1e4>
				== 1) {
			motor->scaled_input = (float) motor->input_value
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (float) PWM_SCALING_FACTOR;
 800316c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8003314 <process_motor_data+0x330>
 8003170:	eec7 7a26 	vdiv.f32	s15, s14, s13
			motor->scaled_input = (float) motor->input_value
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
			obtain_ccr_values(motor);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff f82e 	bl	80021dc <obtain_ccr_values>
			motor->mvel_flag = true;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

			// capture the values for pid controller
			pid->desired_velocity = motor->input_value;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	edc3 7a01 	vstr	s15, [r3, #4]
			pid->scaled_desired_velocity = motor->scaled_input;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	609a      	str	r2, [r3, #8]
			reset_pid_properties(pid);
 80031a4:	6838      	ldr	r0, [r7, #0]
 80031a6:	f7ff f863 	bl	8002270 <reset_pid_properties>

			snprintf(motor->response, MOTOR_RESPONSE_LENGTH_V3,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f103 000c 	add.w	r0, r3, #12
					"Setting left to %u and right to %u\r\n", motor->left_CCR,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	891b      	ldrh	r3, [r3, #8]
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH_V3,
 80031b4:	461a      	mov	r2, r3
					motor->right_CCR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	895b      	ldrh	r3, [r3, #10]
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH_V3,
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	4a56      	ldr	r2, [pc, #344]	@ (8003318 <process_motor_data+0x334>)
 80031c0:	2127      	movs	r1, #39	@ 0x27
 80031c2:	f008 fdfd 	bl	800bdc0 <sniprintf>
 80031c6:	e076      	b.n	80032b6 <process_motor_data+0x2d2>
		}
		// set the left CCR
		else if (sscanf(motor->command, "at+m1a=%u", &motor->left_CCR) == 1) {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 003e 	add.w	r0, r3, #62	@ 0x3e
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3308      	adds	r3, #8
 80031d2:	461a      	mov	r2, r3
 80031d4:	4951      	ldr	r1, [pc, #324]	@ (800331c <process_motor_data+0x338>)
 80031d6:	f008 fe4b 	bl	800be70 <siscanf>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d13a      	bne.n	8003256 <process_motor_data+0x272>
			printf("Changing left motors\n");
 80031e0:	484f      	ldr	r0, [pc, #316]	@ (8003320 <process_motor_data+0x33c>)
 80031e2:	f008 fde5 	bl	800bdb0 <puts>
			char response_temp[MOTOR_RESPONSE_LENGTH_V1];
			snprintf(response_temp, MOTOR_RESPONSE_LENGTH_V1, "Left: %u\r\n",
					motor->left_CCR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	891b      	ldrh	r3, [r3, #8]
			snprintf(response_temp, MOTOR_RESPONSE_LENGTH_V1, "Left: %u\r\n",
 80031ea:	f107 000c 	add.w	r0, r7, #12
 80031ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003324 <process_motor_data+0x340>)
 80031f0:	2110      	movs	r1, #16
 80031f2:	f008 fde5 	bl	800bdc0 <sniprintf>
			strcpy(motor->response, response_temp);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	330c      	adds	r3, #12
 80031fa:	f107 020c 	add.w	r2, r7, #12
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f009 f800 	bl	800c206 <strcpy>

			// check for right motor command
			char *right_cmd = strstr(motor->command, "at+m2a=");
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	333e      	adds	r3, #62	@ 0x3e
 800320a:	4947      	ldr	r1, [pc, #284]	@ (8003328 <process_motor_data+0x344>)
 800320c:	4618      	mov	r0, r3
 800320e:	f008 ff6c 	bl	800c0ea <strstr>
 8003212:	61f8      	str	r0, [r7, #28]
			if (right_cmd != NULL) {
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04d      	beq.n	80032b6 <process_motor_data+0x2d2>
				if (sscanf(right_cmd, "at+m2a=%u", &motor->right_CCR) == 1) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	330a      	adds	r3, #10
 800321e:	461a      	mov	r2, r3
 8003220:	4942      	ldr	r1, [pc, #264]	@ (800332c <process_motor_data+0x348>)
 8003222:	69f8      	ldr	r0, [r7, #28]
 8003224:	f008 fe24 	bl	800be70 <siscanf>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	d143      	bne.n	80032b6 <process_motor_data+0x2d2>
					printf("Changing right motors too\n");
 800322e:	4840      	ldr	r0, [pc, #256]	@ (8003330 <process_motor_data+0x34c>)
 8003230:	f008 fdbe 	bl	800bdb0 <puts>
					// append right motor response
					snprintf(response_temp, MOTOR_RESPONSE_LENGTH_V1,
							"Right: %u\r\n", motor->right_CCR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	895b      	ldrh	r3, [r3, #10]
					snprintf(response_temp, MOTOR_RESPONSE_LENGTH_V1,
 8003238:	f107 000c 	add.w	r0, r7, #12
 800323c:	4a3d      	ldr	r2, [pc, #244]	@ (8003334 <process_motor_data+0x350>)
 800323e:	2110      	movs	r1, #16
 8003240:	f008 fdbe 	bl	800bdc0 <sniprintf>
					strcat(motor->response, response_temp);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	330c      	adds	r3, #12
 8003248:	f107 020c 	add.w	r2, r7, #12
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f008 ff1c 	bl	800c08c <strcat>
 8003254:	e02f      	b.n	80032b6 <process_motor_data+0x2d2>
				}
			}
		}
		// set the right CCR
		else if (sscanf(motor->command, "at+m2a=%u", &motor->right_CCR) == 1) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f103 003e 	add.w	r0, r3, #62	@ 0x3e
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	330a      	adds	r3, #10
 8003260:	461a      	mov	r2, r3
 8003262:	4932      	ldr	r1, [pc, #200]	@ (800332c <process_motor_data+0x348>)
 8003264:	f008 fe04 	bl	800be70 <siscanf>
 8003268:	4603      	mov	r3, r0
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10c      	bne.n	8003288 <process_motor_data+0x2a4>
			printf("Changing right motors\n");
 800326e:	4832      	ldr	r0, [pc, #200]	@ (8003338 <process_motor_data+0x354>)
 8003270:	f008 fd9e 	bl	800bdb0 <puts>
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH_V1, "Right: %u\r\n",
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f103 000c 	add.w	r0, r3, #12
					motor->right_CCR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	895b      	ldrh	r3, [r3, #10]
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH_V1, "Right: %u\r\n",
 800327e:	4a2d      	ldr	r2, [pc, #180]	@ (8003334 <process_motor_data+0x350>)
 8003280:	2110      	movs	r1, #16
 8003282:	f008 fd9d 	bl	800bdc0 <sniprintf>
 8003286:	e016      	b.n	80032b6 <process_motor_data+0x2d2>
		}
		// print out left and right CCR values
		else if (strstr(motor->command, "at") != NULL) {
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	333e      	adds	r3, #62	@ 0x3e
 800328c:	492b      	ldr	r1, [pc, #172]	@ (800333c <process_motor_data+0x358>)
 800328e:	4618      	mov	r0, r3
 8003290:	f008 ff2b 	bl	800c0ea <strstr>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00d      	beq.n	80032b6 <process_motor_data+0x2d2>
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f103 000c 	add.w	r0, r3, #12
					"Left: %u\r\n, Right: %u\r\n", motor->left_CCR,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	891b      	ldrh	r3, [r3, #8]
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH,
 80032a4:	461a      	mov	r2, r3
					motor->right_CCR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	895b      	ldrh	r3, [r3, #10]
			snprintf(motor->response, MOTOR_RESPONSE_LENGTH,
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	4a0c      	ldr	r2, [pc, #48]	@ (80032e0 <process_motor_data+0x2fc>)
 80032b0:	2123      	movs	r1, #35	@ 0x23
 80032b2:	f008 fd85 	bl	800bdc0 <sniprintf>
		}
		update_pwm(motor);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe ff12 	bl	80020e0 <update_pwm>

		// start to transmit data via uart2 tx
		g_UART2_tx.buffer_start = motor->response;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	330c      	adds	r3, #12
 80032c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003340 <process_motor_data+0x35c>)
 80032c2:	6153      	str	r3, [r2, #20]
		g_UART2_tx.data_size = strlen(motor->response);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	330c      	adds	r3, #12
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fc ffd9 	bl	8000280 <strlen>
 80032ce:	4603      	mov	r3, r0
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <process_motor_data+0x35c>)
 80032d4:	80da      	strh	r2, [r3, #6]
	} else {
		printf("Command buffer contains no data!\n");
	}
}
 80032d6:	e038      	b.n	800334a <process_motor_data+0x366>
 80032d8:	0800f928 	.word	0x0800f928
 80032dc:	0800f934 	.word	0x0800f934
 80032e0:	0800f948 	.word	0x0800f948
 80032e4:	200029cc 	.word	0x200029cc
 80032e8:	0800f960 	.word	0x0800f960
 80032ec:	0800f968 	.word	0x0800f968
 80032f0:	0800f97c 	.word	0x0800f97c
 80032f4:	200021f4 	.word	0x200021f4
 80032f8:	200021dc 	.word	0x200021dc
 80032fc:	0800f98c 	.word	0x0800f98c
 8003300:	0800f9a4 	.word	0x0800f9a4
 8003304:	0800f9c0 	.word	0x0800f9c0
 8003308:	0800f9cc 	.word	0x0800f9cc
 800330c:	0800f9dc 	.word	0x0800f9dc
 8003310:	0800f9f4 	.word	0x0800f9f4
 8003314:	42c80000 	.word	0x42c80000
 8003318:	0800fa00 	.word	0x0800fa00
 800331c:	0800fa28 	.word	0x0800fa28
 8003320:	0800fa34 	.word	0x0800fa34
 8003324:	0800fa4c 	.word	0x0800fa4c
 8003328:	0800fa58 	.word	0x0800fa58
 800332c:	0800fa60 	.word	0x0800fa60
 8003330:	0800fa6c 	.word	0x0800fa6c
 8003334:	0800fa88 	.word	0x0800fa88
 8003338:	0800fa94 	.word	0x0800fa94
 800333c:	0800faac 	.word	0x0800faac
 8003340:	20001028 	.word	0x20001028
		printf("Command buffer contains no data!\n");
 8003344:	4803      	ldr	r0, [pc, #12]	@ (8003354 <process_motor_data+0x370>)
 8003346:	f008 fd33 	bl	800bdb0 <puts>
}
 800334a:	bf00      	nop
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bdb0      	pop	{r4, r5, r7, pc}
 8003352:	bf00      	nop
 8003354:	0800fab0 	.word	0x0800fab0

08003358 <apply_pid>:

void apply_pid(Motor_t *motor, PIDController_t *pid, VelocimetricWheel_t *left,
		VelocimetricWheel_t *right) {
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b08a      	sub	sp, #40	@ 0x28
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	// if error_left is less than 0 - motor needs to slow down
	// else - motor nees to speed up

	// calculate current errors (desired - actual)
	pid->error_left_motor = pid->scaled_desired_velocity
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	ed93 7a02 	vldr	s14, [r3, #8]
			- left->calculated_velocity;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003372:	ee77 7a67 	vsub.f32	s15, s14, s15
	pid->error_left_motor = pid->scaled_desired_velocity
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->error_right_motor = pid->scaled_desired_velocity
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	ed93 7a02 	vldr	s14, [r3, #8]
			- right->calculated_velocity;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	edd3 7a04 	vldr	s15, [r3, #16]
 8003388:	ee77 7a67 	vsub.f32	s15, s14, s15
	pid->error_right_motor = pid->scaled_desired_velocity
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	edc3 7a04 	vstr	s15, [r3, #16]

	// calculate derivative terms
	pid->derivative_left = (pid->error_left_motor - pid->prev_error_left)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	ed93 7a03 	vldr	s14, [r3, #12]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	edd3 7a05 	vldr	s15, [r3, #20]
 800339e:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ pid->delta_time;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80033a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
	pid->derivative_left = (pid->error_left_motor - pid->prev_error_left)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->derivative_right = (pid->error_right_motor - pid->prev_error_right)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80033be:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ pid->delta_time;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80033c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
	pid->derivative_right = (pid->error_right_motor - pid->prev_error_right)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	edc3 7a08 	vstr	s15, [r3, #32]

	// calculate integral terms with anti-windup
	pid->integral_left += pid->error_left_motor * pid->delta_time;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	edd3 6a03 	vldr	s13, [r3, #12]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80033e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	pid->integral_right += pid->error_right_motor * pid->delta_time;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	edd3 6a04 	vldr	s13, [r3, #16]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// limit integral to prevent windup
	pid->integral_left =
			(pid->integral_left > 1000.0f) ? 1000.0f :
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003418:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003580 <apply_pid+0x228>
 800341c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	dd01      	ble.n	800342a <apply_pid+0xd2>
 8003426:	4b57      	ldr	r3, [pc, #348]	@ (8003584 <apply_pid+0x22c>)
 8003428:	e00d      	b.n	8003446 <apply_pid+0xee>
			(pid->integral_left < -1000.0f) ? -1000.0f : pid->integral_left;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003430:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003588 <apply_pid+0x230>
 8003434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343c:	d501      	bpl.n	8003442 <apply_pid+0xea>
 800343e:	4b53      	ldr	r3, [pc, #332]	@ (800358c <apply_pid+0x234>)
 8003440:	e001      	b.n	8003446 <apply_pid+0xee>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	pid->integral_left =
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	6293      	str	r3, [r2, #40]	@ 0x28
	pid->integral_right =
			(pid->integral_right > 1000.0f) ? 1000.0f :
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003450:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003580 <apply_pid+0x228>
 8003454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	dd01      	ble.n	8003462 <apply_pid+0x10a>
 800345e:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <apply_pid+0x22c>)
 8003460:	e00d      	b.n	800347e <apply_pid+0x126>
			(pid->integral_right < -1000.0f) ? -1000.0f : pid->integral_right;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003468:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8003588 <apply_pid+0x230>
 800346c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	d501      	bpl.n	800347a <apply_pid+0x122>
 8003476:	4b45      	ldr	r3, [pc, #276]	@ (800358c <apply_pid+0x234>)
 8003478:	e001      	b.n	800347e <apply_pid+0x126>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	pid->integral_right =
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// calculate total output
	pid->output_left = (KP * pid->error_left_motor) + (KI * pid->integral_left)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	ed93 7a03 	vldr	s14, [r3, #12]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800348e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8003590 <apply_pid+0x238>
 8003492:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003496:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (KD * pid->derivative_left);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	edd3 7a07 	vldr	s15, [r3, #28]
 80034a0:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8003594 <apply_pid+0x23c>
 80034a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->output_left = (KP * pid->error_left_motor) + (KI * pid->integral_left)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	pid->output_right = (KP * pid->error_right_motor)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	ed93 7a04 	vldr	s14, [r3, #16]
			+ (KI * pid->integral_right) + (KD * pid->derivative_right);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80034be:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8003590 <apply_pid+0x238>
 80034c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80034d0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8003594 <apply_pid+0x23c>
 80034d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034d8:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->output_right = (KP * pid->error_right_motor)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	printf("Left output: %.5f, Right output: %.5f\n", pid->output_left,
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd f836 	bl	8000558 <__aeabi_f2d>
 80034ec:	4604      	mov	r4, r0
 80034ee:	460d      	mov	r5, r1
			pid->output_right);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	printf("Left output: %.5f, Right output: %.5f\n", pid->output_left,
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd f82f 	bl	8000558 <__aeabi_f2d>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	e9cd 2300 	strd	r2, r3, [sp]
 8003502:	4622      	mov	r2, r4
 8003504:	462b      	mov	r3, r5
 8003506:	4824      	ldr	r0, [pc, #144]	@ (8003598 <apply_pid+0x240>)
 8003508:	f008 fbea 	bl	800bce0 <iprintf>

	// convert PID output to CCR adjustment - add to current CCR value
	int16_t left_adjustment = (int16_t) (pid->output_left * PWM_SCALING_FACTOR);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003512:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800359c <apply_pid+0x244>
 8003516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800351a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351e:	ee17 3a90 	vmov	r3, s15
 8003522:	83fb      	strh	r3, [r7, #30]
	int16_t right_adjustment =
			(int16_t) (pid->output_right * PWM_SCALING_FACTOR);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800352a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800359c <apply_pid+0x244>
 800352e:	ee67 7a87 	vmul.f32	s15, s15, s14
	int16_t right_adjustment =
 8003532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003536:	ee17 3a90 	vmov	r3, s15
 800353a:	83bb      	strh	r3, [r7, #28]

	// apply the adjustments
	int32_t new_left_ccr = (int32_t) (motor->left_CCR + left_adjustment);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	891b      	ldrh	r3, [r3, #8]
 8003540:	461a      	mov	r2, r3
 8003542:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003546:	4413      	add	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
	int32_t new_right_ccr = (motor->right_CCR + right_adjustment);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	895b      	ldrh	r3, [r3, #10]
 800354e:	461a      	mov	r2, r3
 8003550:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

	// change the CCR values
	motor->left_CCR = (uint16_t) new_left_ccr;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	811a      	strh	r2, [r3, #8]
	motor->right_CCR = (uint16_t) new_right_ccr;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	815a      	strh	r2, [r3, #10]

	// update previous error for next PID calculation
	pid->prev_error_left = pid->error_left_motor;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	615a      	str	r2, [r3, #20]
	pid->prev_error_right = pid->error_right_motor;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	619a      	str	r2, [r3, #24]

//    printf("Adjusted Left CCR: %u, Right CCR: %u\n", motor->left_CCR,
//            motor->right_CCR);
}
 8003578:	bf00      	nop
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bdb0      	pop	{r4, r5, r7, pc}
 8003580:	447a0000 	.word	0x447a0000
 8003584:	447a0000 	.word	0x447a0000
 8003588:	c47a0000 	.word	0xc47a0000
 800358c:	c47a0000 	.word	0xc47a0000
 8003590:	3e4ccccd 	.word	0x3e4ccccd
 8003594:	3d4ccccd 	.word	0x3d4ccccd
 8003598:	0800fad4 	.word	0x0800fad4
 800359c:	42c80000 	.word	0x42c80000

080035a0 <process_motor_in_auto_mode>:

void process_motor_in_auto_mode(Motor_t *motor, Pixy_t *pixy) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
	// if you wish to set mvel, remember to set it to false for all non-forward movement
	if (!motor->motors_moving) {
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035b0:	f083 0301 	eor.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00e      	beq.n	80035d8 <process_motor_in_auto_mode+0x38>
		motor->motors_moving = true;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
		// set default speed - forward
		motor->left_CCR = STD_CCR_LEFT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80035c8:	811a      	strh	r2, [r3, #8]
		motor->right_CCR = STD_CCR_RIGHT;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80035d0:	815a      	strh	r2, [r3, #10]
		/* set mvel flag here - use mvel to control the forward movement */
		start_pwm(motor);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fdaa 	bl	800212c <start_pwm>
	}

	// depending on what pixy sees - set corresponding CCR value
	switch (pixy->move_command_state) {
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f893 3243 	ldrb.w	r3, [r3, #579]	@ 0x243
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d82d      	bhi.n	8003640 <process_motor_in_auto_mode+0xa0>
 80035e4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ec <process_motor_in_auto_mode+0x4c>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	08003641 	.word	0x08003641
 80035f0:	08003601 	.word	0x08003601
 80035f4:	08003623 	.word	0x08003623
 80035f8:	08003613 	.word	0x08003613
 80035fc:	08003633 	.word	0x08003633
	case Idle:
		break;
	case Forward:
		motor->left_CCR = STD_CCR_LEFT;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003606:	811a      	strh	r2, [r3, #8]
		motor->right_CCR = STD_CCR_RIGHT;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800360e:	815a      	strh	r2, [r3, #10]
		/* set mvel flag here - use mvel to control the forward movement */
		break;
 8003610:	e017      	b.n	8003642 <process_motor_in_auto_mode+0xa2>
	case Left:
		// robot should halt left motors and move right
		motor->left_CCR = 0;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	811a      	strh	r2, [r3, #8]
		motor->right_CCR = STD_CCR_RIGHT;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800361e:	815a      	strh	r2, [r3, #10]
		break;
 8003620:	e00f      	b.n	8003642 <process_motor_in_auto_mode+0xa2>
	case Right:
		motor->left_CCR = STD_CCR_LEFT;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003628:	811a      	strh	r2, [r3, #8]
		motor->right_CCR = 0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	815a      	strh	r2, [r3, #10]
		break;
 8003630:	e007      	b.n	8003642 <process_motor_in_auto_mode+0xa2>
	case Stop:
		motor->left_CCR = 0;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	811a      	strh	r2, [r3, #8]
		motor->right_CCR = 0;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	815a      	strh	r2, [r3, #10]
		break;
 800363e:	e000      	b.n	8003642 <process_motor_in_auto_mode+0xa2>
	default:
		break;
 8003640:	bf00      	nop
	}

	update_pwm(motor);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe fd4c 	bl	80020e0 <update_pwm>
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <pixy_control>:
		.tx_data_size = 0, .response_buffer = { 0 }, .feature_buffer = { 0 },
		.num_of_vectors = 0, .move_command_state = Idle, .barcode_detected = false,
		.barcode.value = BarcodeNotDetected, .last_received_time = 0, .response_length =
				0, .timeout = 500, .num_of_branches = 0, };

void pixy_control(Pixy_t *pixy) { // to be run in main loop
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	switch (pixy->state) {
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b03      	cmp	r3, #3
 8003662:	d834      	bhi.n	80036ce <pixy_control+0x7e>
 8003664:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <pixy_control+0x1c>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	080036cf 	.word	0x080036cf
 8003670:	0800367d 	.word	0x0800367d
 8003674:	080036cf 	.word	0x080036cf
 8003678:	080036bf 	.word	0x080036bf
	case PixyIdle:
		break;
	case PixyTransmitting:
		memset(pixy->rx_buffer, 0, sizeof(pixy->rx_buffer)); // reset before tx
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	2284      	movs	r2, #132	@ 0x84
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f008 fcf9 	bl	800c07c <memset>
		HAL_GPIO_WritePin(pixy->ssPort, pixy->ssPin, GPIO_PIN_RESET);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8003696:	2200      	movs	r2, #0
 8003698:	4619      	mov	r1, r3
 800369a:	f001 ffe3 	bl	8005664 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(pixy->hspi, pixy->tx_ptr, pixy->tx_data_size);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80036ae:	461a      	mov	r2, r3
 80036b0:	f004 f986 	bl	80079c0 <HAL_SPI_Transmit_IT>
		pixy->state = PixyWaitingResponse;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
		break;
 80036bc:	e007      	b.n	80036ce <pixy_control+0x7e>
	case PixyWaitingResponse:
		break;
	case PixyDataReceived:
		// reset before tx
		process_pixy_data(pixy);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f836 	bl	8003730 <process_pixy_data>
		pixy->state = PixyIdle;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
		break;
 80036cc:	bf00      	nop
	}

	// for auto mode, will send the 'get all' cmd every timeout
	if (g_ESP.website_fully_setup && g_ESP.system_mode == AutoMode) {
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <pixy_control+0xd4>)
 80036d0:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d021      	beq.n	800371c <pixy_control+0xcc>
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <pixy_control+0xd4>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d11d      	bne.n	800371c <pixy_control+0xcc>
		if (uwTick - g_Pixy.last_received_time >= pixy->timeout) {
 80036e0:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <pixy_control+0xd8>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b11      	ldr	r3, [pc, #68]	@ (800372c <pixy_control+0xdc>)
 80036e6:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	f8b2 2248 	ldrh.w	r2, [r2, #584]	@ 0x248
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d312      	bcc.n	800371c <pixy_control+0xcc>
			pixy->tx_ptr = pixy->AEC1_commands[2];
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f103 029e 	add.w	r2, r3, #158	@ 0x9e
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			pixy->tx_data_size = 6;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2206      	movs	r2, #6
 8003706:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			pixy->state = PixyTransmitting;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
			// update last received time
			pixy->last_received_time = uwTick;
 8003712:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <pixy_control+0xd8>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
		}
	}
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200020a0 	.word	0x200020a0
 8003728:	200029cc 	.word	0x200029cc
 800372c:	20002254 	.word	0x20002254

08003730 <process_pixy_data>:

void process_pixy_data(Pixy_t *pixy) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pixy->ssPort, pixy->ssPin, GPIO_PIN_SET); // pull ss to low to start clock
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8003744:	2201      	movs	r2, #1
 8003746:	4619      	mov	r1, r3
 8003748:	f001 ff8c 	bl	8005664 <HAL_GPIO_WritePin>

	// reset from previous check
	pixy->checksum_valid = false;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
	pixy->response_length = 0;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
	pixy->calculated_checksum = 0;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e
	pixy->checksum_received = 0;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8a3 219c 	strh.w	r2, [r3, #412]	@ 0x19c

	AFC1Result afc1Result = find_afc1_response(pixy); // find AF C1
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f851 	bl	8003814 <find_afc1_response>
 8003772:	4603      	mov	r3, r0
 8003774:	73fb      	strb	r3, [r7, #15]

	line_following_algorithm(); // make a decision based on data received
 8003776:	f000 fa83 	bl	8003c80 <line_following_algorithm>

	if (afc1Result == AFC1ChecksumPassed) {
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d11a      	bne.n	80037b6 <process_pixy_data+0x86>
		// shift the buffer and start uart tx
		memcpy(pixy->response_buffer + pixy->response_length, C_PASSED,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	f892 2113 	ldrb.w	r2, [r2, #275]	@ 0x113
 800378c:	4413      	add	r3, r2
 800378e:	220c      	movs	r2, #12
 8003790:	491c      	ldr	r1, [pc, #112]	@ (8003804 <process_pixy_data+0xd4>)
 8003792:	4618      	mov	r0, r3
 8003794:	f008 fd3f 	bl	800c216 <memcpy>
				strlen(C_PASSED));

		extract_features(); // extract stuff like vectors, barcodes, interections
 8003798:	f000 f942 	bl	8003a20 <extract_features>

		// trigger uart tx
		g_UART2_tx.buffer_start = pixy->response_buffer;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80037a2:	4a19      	ldr	r2, [pc, #100]	@ (8003808 <process_pixy_data+0xd8>)
 80037a4:	6153      	str	r3, [r2, #20]
		g_UART2_tx.data_size = pixy->response_length + strlen(C_PASSED);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 80037ac:	330c      	adds	r3, #12
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	4b15      	ldr	r3, [pc, #84]	@ (8003808 <process_pixy_data+0xd8>)
 80037b2:	80da      	strh	r2, [r3, #6]
		g_UART2_tx.buffer_start = pixy->response_buffer;
		g_UART2_tx.data_size = pixy->response_length + strlen(C_FAILED);
	} else if (afc1Result == AFC1NotFound) {
		printf("AFC1 not found\n");
	}
}
 80037b4:	e021      	b.n	80037fa <process_pixy_data+0xca>
	} else if (afc1Result == AFC1ChecksumFailed) {
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d118      	bne.n	80037ee <process_pixy_data+0xbe>
		memcpy(pixy->response_buffer + pixy->response_length, C_FAILED,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	f892 2113 	ldrb.w	r2, [r2, #275]	@ 0x113
 80037c8:	4413      	add	r3, r2
 80037ca:	220c      	movs	r2, #12
 80037cc:	490f      	ldr	r1, [pc, #60]	@ (800380c <process_pixy_data+0xdc>)
 80037ce:	4618      	mov	r0, r3
 80037d0:	f008 fd21 	bl	800c216 <memcpy>
		g_UART2_tx.buffer_start = pixy->response_buffer;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80037da:	4a0b      	ldr	r2, [pc, #44]	@ (8003808 <process_pixy_data+0xd8>)
 80037dc:	6153      	str	r3, [r2, #20]
		g_UART2_tx.data_size = pixy->response_length + strlen(C_FAILED);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 80037e4:	330c      	adds	r3, #12
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <process_pixy_data+0xd8>)
 80037ea:	80da      	strh	r2, [r3, #6]
}
 80037ec:	e005      	b.n	80037fa <process_pixy_data+0xca>
	} else if (afc1Result == AFC1NotFound) {
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <process_pixy_data+0xca>
		printf("AFC1 not found\n");
 80037f4:	4806      	ldr	r0, [pc, #24]	@ (8003810 <process_pixy_data+0xe0>)
 80037f6:	f008 fadb 	bl	800bdb0 <puts>
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	0800fb08 	.word	0x0800fb08
 8003808:	20001028 	.word	0x20001028
 800380c:	0800fb18 	.word	0x0800fb18
 8003810:	0800fb28 	.word	0x0800fb28

08003814 <find_afc1_response>:

AFC1Result find_afc1_response(Pixy_t *pixy) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < SPI_RECEIVE_SIZE - 1; i++) {
 800381c:	2300      	movs	r3, #0
 800381e:	82fb      	strh	r3, [r7, #22]
 8003820:	e0e4      	b.n	80039ec <find_afc1_response+0x1d8>
		if (pixy->rx_buffer[i] == 0xAF && pixy->rx_buffer[i + 1] == 0xC1) {
 8003822:	8afb      	ldrh	r3, [r7, #22]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	791b      	ldrb	r3, [r3, #4]
 800382a:	2baf      	cmp	r3, #175	@ 0xaf
 800382c:	f040 80db 	bne.w	80039e6 <find_afc1_response+0x1d2>
 8003830:	8afb      	ldrh	r3, [r7, #22]
 8003832:	3301      	adds	r3, #1
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	791b      	ldrb	r3, [r3, #4]
 800383a:	2bc1      	cmp	r3, #193	@ 0xc1
 800383c:	f040 80d3 	bne.w	80039e6 <find_afc1_response+0x1d2>
			printf("Found AF C1 at index %d\n", i);
 8003840:	8afb      	ldrh	r3, [r7, #22]
 8003842:	4619      	mov	r1, r3
 8003844:	4872      	ldr	r0, [pc, #456]	@ (8003a10 <find_afc1_response+0x1fc>)
 8003846:	f008 fa4b 	bl	800bce0 <iprintf>
			pixy->response_packet_type = pixy->rx_buffer[i + 2];
 800384a:	8afb      	ldrh	r3, [r7, #22]
 800384c:	3302      	adds	r3, #2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	791a      	ldrb	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198
			pixy->payload_size = pixy->rx_buffer[i + 3];
 800385a:	8afb      	ldrh	r3, [r7, #22]
 800385c:	3303      	adds	r3, #3
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	791b      	ldrb	r3, [r3, #4]
 8003864:	461a      	mov	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8a3 219a 	strh.w	r2, [r3, #410]	@ 0x19a
			pixy->response_length = pixy->payload_size + 6; // Sync (2) + Type (1) + Length (1) + Checksum (2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8b3 319a 	ldrh.w	r3, [r3, #410]	@ 0x19a
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3306      	adds	r3, #6
 8003876:	b2da      	uxtb	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113

			// extract received checksum
			pixy->checksum_received = (uint16_t) pixy->rx_buffer[i + 4]
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	3304      	adds	r3, #4
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	791b      	ldrb	r3, [r3, #4]
 8003888:	b21a      	sxth	r2, r3
					| ((uint16_t) pixy->rx_buffer[i + 5] << 8);
 800388a:	8afb      	ldrh	r3, [r7, #22]
 800388c:	3305      	adds	r3, #5
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	440b      	add	r3, r1
 8003892:	791b      	ldrb	r3, [r3, #4]
 8003894:	b21b      	sxth	r3, r3
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	b21b      	sxth	r3, r3
 800389a:	4313      	orrs	r3, r2
 800389c:	b21b      	sxth	r3, r3
 800389e:	b29a      	uxth	r2, r3
			pixy->checksum_received = (uint16_t) pixy->rx_buffer[i + 4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8a3 219c 	strh.w	r2, [r3, #412]	@ 0x19c

			// reset calculated checksum
			pixy->calculated_checksum = 0;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e

			// calculate checksum only over the payload bytes
			for (uint16_t j = i + 6; j < i + 6 + pixy->payload_size; j++) {
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	3306      	adds	r3, #6
 80038b2:	82bb      	strh	r3, [r7, #20]
 80038b4:	e011      	b.n	80038da <find_afc1_response+0xc6>
				if (j < SPI_RECEIVE_SIZE) { // Prevent buffer overrun
 80038b6:	8abb      	ldrh	r3, [r7, #20]
 80038b8:	2b83      	cmp	r3, #131	@ 0x83
 80038ba:	d80b      	bhi.n	80038d4 <find_afc1_response+0xc0>
					pixy->calculated_checksum += pixy->rx_buffer[j];
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8b3 319e 	ldrh.w	r3, [r3, #414]	@ 0x19e
 80038c2:	8aba      	ldrh	r2, [r7, #20]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	440a      	add	r2, r1
 80038c8:	7912      	ldrb	r2, [r2, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e
			for (uint16_t j = i + 6; j < i + 6 + pixy->payload_size; j++) {
 80038d4:	8abb      	ldrh	r3, [r7, #20]
 80038d6:	3301      	adds	r3, #1
 80038d8:	82bb      	strh	r3, [r7, #20]
 80038da:	8aba      	ldrh	r2, [r7, #20]
 80038dc:	8afb      	ldrh	r3, [r7, #22]
 80038de:	3306      	adds	r3, #6
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	f8b1 119a 	ldrh.w	r1, [r1, #410]	@ 0x19a
 80038e6:	440b      	add	r3, r1
 80038e8:	429a      	cmp	r2, r3
 80038ea:	dbe4      	blt.n	80038b6 <find_afc1_response+0xa2>
				}
			}

			pixy->checksum_valid = (pixy->checksum_received
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 219c 	ldrh.w	r2, [r3, #412]	@ 0x19c
					== pixy->calculated_checksum);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8b3 319e 	ldrh.w	r3, [r3, #414]	@ 0x19e
 80038f8:	429a      	cmp	r2, r3
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2da      	uxtb	r2, r3
			pixy->checksum_valid = (pixy->checksum_received
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112

			if (pixy->checksum_valid) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 800390e:	2b00      	cmp	r3, #0
 8003910:	d05c      	beq.n	80039cc <find_afc1_response+0x1b8>
				printf(
						"AFC1 Found and checksum passed! Received: 0x%04X, Calculated: 0x%04X\n",
						pixy->checksum_received, pixy->calculated_checksum);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8b3 319c 	ldrh.w	r3, [r3, #412]	@ 0x19c
				printf(
 8003918:	4619      	mov	r1, r3
						pixy->checksum_received, pixy->calculated_checksum);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8b3 319e 	ldrh.w	r3, [r3, #414]	@ 0x19e
				printf(
 8003920:	461a      	mov	r2, r3
 8003922:	483c      	ldr	r0, [pc, #240]	@ (8003a14 <find_afc1_response+0x200>)
 8003924:	f008 f9dc 	bl	800bce0 <iprintf>

				// copy data to response buffer and feature buffer
				memset(pixy->response_buffer, 0, sizeof(pixy->response_buffer));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800392e:	2284      	movs	r2, #132	@ 0x84
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f008 fba2 	bl	800c07c <memset>
				memset(pixy->feature_buffer, 0, sizeof(pixy->feature_buffer));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800393e:	2284      	movs	r2, #132	@ 0x84
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f008 fb9a 	bl	800c07c <memset>

				// copy response including header
//				printf("Response bytes: ");
				for (int l = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e00f      	b.n	800396e <find_afc1_response+0x15a>
						l < pixy->response_length && (i + l) < SPI_RECEIVE_SIZE;
						l++) {
					pixy->response_buffer[l] = pixy->rx_buffer[i + l];
 800394e:	8afa      	ldrh	r2, [r7, #22]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	7919      	ldrb	r1, [r3, #4]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8003964:	460a      	mov	r2, r1
 8003966:	701a      	strb	r2, [r3, #0]
						l++) {
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	3301      	adds	r3, #1
 800396c:	613b      	str	r3, [r7, #16]
						l < pixy->response_length && (i + l) < SPI_RECEIVE_SIZE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8003974:	461a      	mov	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4293      	cmp	r3, r2
 800397a:	da04      	bge.n	8003986 <find_afc1_response+0x172>
 800397c:	8afa      	ldrh	r2, [r7, #22]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	2b83      	cmp	r3, #131	@ 0x83
 8003984:	dde3      	ble.n	800394e <find_afc1_response+0x13a>
				}
//				printf("\n");

				// copy just the payload to feature buffer
//				printf("Feature bytes: ");
				for (int m = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e010      	b.n	80039ae <find_afc1_response+0x19a>
						m < pixy->payload_size && (i + 6 + m) < SPI_RECEIVE_SIZE;
						m++) {
					pixy->feature_buffer[m] = pixy->rx_buffer[i + 6 + m];
 800398c:	8afb      	ldrh	r3, [r7, #22]
 800398e:	1d9a      	adds	r2, r3, #6
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	7919      	ldrb	r1, [r3, #4]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80039a4:	460a      	mov	r2, r1
 80039a6:	701a      	strb	r2, [r3, #0]
						m++) {
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
						m < pixy->payload_size && (i + 6 + m) < SPI_RECEIVE_SIZE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8b3 319a 	ldrh.w	r3, [r3, #410]	@ 0x19a
 80039b4:	461a      	mov	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	da05      	bge.n	80039c8 <find_afc1_response+0x1b4>
 80039bc:	8afb      	ldrh	r3, [r7, #22]
 80039be:	1d9a      	adds	r2, r3, #6
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	2b83      	cmp	r3, #131	@ 0x83
 80039c6:	dde1      	ble.n	800398c <find_afc1_response+0x178>
//					printf("%02X ", g_Pixy.feature_buffer[m]);
				}
//				printf("\n");

				return AFC1ChecksumPassed;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e01c      	b.n	8003a06 <find_afc1_response+0x1f2>
			} else {
				printf(
						"AFC1 Found but checksum failed! Received: 0x%04X, Calculated: 0x%04X\n",
						pixy->checksum_received, pixy->calculated_checksum);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8b3 319c 	ldrh.w	r3, [r3, #412]	@ 0x19c
				printf(
 80039d2:	4619      	mov	r1, r3
						pixy->checksum_received, pixy->calculated_checksum);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b3 319e 	ldrh.w	r3, [r3, #414]	@ 0x19e
				printf(
 80039da:	461a      	mov	r2, r3
 80039dc:	480e      	ldr	r0, [pc, #56]	@ (8003a18 <find_afc1_response+0x204>)
 80039de:	f008 f97f 	bl	800bce0 <iprintf>
//						j++) {
//					printf("%02X ", pixy->rx_buffer[j]);
//				}
//				printf("\n");

				return AFC1ChecksumFailed;
 80039e2:	2302      	movs	r3, #2
 80039e4:	e00f      	b.n	8003a06 <find_afc1_response+0x1f2>
	for (uint16_t i = 0; i < SPI_RECEIVE_SIZE - 1; i++) {
 80039e6:	8afb      	ldrh	r3, [r7, #22]
 80039e8:	3301      	adds	r3, #1
 80039ea:	82fb      	strh	r3, [r7, #22]
 80039ec:	8afb      	ldrh	r3, [r7, #22]
 80039ee:	2b82      	cmp	r3, #130	@ 0x82
 80039f0:	f67f af17 	bls.w	8003822 <find_afc1_response+0xe>
			}
		}
	}

	// could not find any valid AF C1 pattern
	g_Pixy.checksum_valid = false;
 80039f4:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <find_afc1_response+0x208>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
	g_Pixy.response_length = 0;
 80039fc:	4b07      	ldr	r3, [pc, #28]	@ (8003a1c <find_afc1_response+0x208>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
	return AFC1NotFound;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	0800fb38 	.word	0x0800fb38
 8003a14:	0800fb54 	.word	0x0800fb54
 8003a18:	0800fb9c 	.word	0x0800fb9c
 8003a1c:	20002254 	.word	0x20002254

08003a20 <extract_features>:

void extract_features() {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
//	if (g_Pixy.inputPacketType == 0x30) {
		// check if we have valid data to extract
		if (!g_Pixy.checksum_valid || g_Pixy.payload_size == 0) {
 8003a26:	4b91      	ldr	r3, [pc, #580]	@ (8003c6c <extract_features+0x24c>)
 8003a28:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003a2c:	f083 0301 	eor.w	r3, r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <extract_features+0x20>
 8003a36:	4b8d      	ldr	r3, [pc, #564]	@ (8003c6c <extract_features+0x24c>)
 8003a38:	f8b3 319a 	ldrh.w	r3, [r3, #410]	@ 0x19a
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <extract_features+0x28>
			printf("No valid data to extract features\n");
 8003a40:	488b      	ldr	r0, [pc, #556]	@ (8003c70 <extract_features+0x250>)
 8003a42:	f008 f9b5 	bl	800bdb0 <puts>
			return;
 8003a46:	e10e      	b.n	8003c66 <extract_features+0x246>
		}

		// start at base buffer
		uint16_t index = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	81fb      	strh	r3, [r7, #14]
		uint16_t featureSize = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	807b      	strh	r3, [r7, #2]
		// reset our feature structs
		memset(g_Pixy.vector, 0, sizeof(g_Pixy.vector));
 8003a50:	2218      	movs	r2, #24
 8003a52:	2100      	movs	r1, #0
 8003a54:	4887      	ldr	r0, [pc, #540]	@ (8003c74 <extract_features+0x254>)
 8003a56:	f008 fb11 	bl	800c07c <memset>
		memset(&g_Pixy.barcode, 0, sizeof(g_Pixy.barcode));
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4886      	ldr	r0, [pc, #536]	@ (8003c78 <extract_features+0x258>)
 8003a60:	f008 fb0c 	bl	800c07c <memset>
		g_Pixy.num_of_vectors = 0;
 8003a64:	4b81      	ldr	r3, [pc, #516]	@ (8003c6c <extract_features+0x24c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
		g_Pixy.num_of_branches = 0;
 8003a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c6c <extract_features+0x24c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
		g_Pixy.barcode_detected = false;
 8003a74:	4b7d      	ldr	r3, [pc, #500]	@ (8003c6c <extract_features+0x24c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
		g_Pixy.barcode.value = BarcodeNotDetected;
 8003a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8003c6c <extract_features+0x24c>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

		// start parsing features
		while (index < g_Pixy.payload_size) {
 8003a84:	e0e8      	b.n	8003c58 <extract_features+0x238>
			featureSize = g_Pixy.feature_buffer[index + 1];
 8003a86:	89fb      	ldrh	r3, [r7, #14]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	4a78      	ldr	r2, [pc, #480]	@ (8003c6c <extract_features+0x24c>)
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8003a92:	807b      	strh	r3, [r7, #2]
			switch (g_Pixy.feature_buffer[index]) {
 8003a94:	89fb      	ldrh	r3, [r7, #14]
 8003a96:	4a75      	ldr	r2, [pc, #468]	@ (8003c6c <extract_features+0x24c>)
 8003a98:	4413      	add	r3, r2
 8003a9a:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	f000 80ab 	beq.w	8003bfa <extract_features+0x1da>
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	f300 80d1 	bgt.w	8003c4c <extract_features+0x22c>
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d003      	beq.n	8003ab6 <extract_features+0x96>
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	f000 8099 	beq.w	8003be6 <extract_features+0x1c6>
 8003ab4:	e0ca      	b.n	8003c4c <extract_features+0x22c>
			case 0x01: // vector block
				// find the number of vectors by checking the index after
				// then do some processing with the data
				if (featureSize == 0x06) {
 8003ab6:	887b      	ldrh	r3, [r7, #2]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d104      	bne.n	8003ac6 <extract_features+0xa6>
					g_Pixy.num_of_vectors = 1;
 8003abc:	4b6b      	ldr	r3, [pc, #428]	@ (8003c6c <extract_features+0x24c>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
 8003ac4:	e016      	b.n	8003af4 <extract_features+0xd4>
				} else if (featureSize == 0x0C) {
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	d104      	bne.n	8003ad6 <extract_features+0xb6>
					g_Pixy.num_of_vectors = 2;
 8003acc:	4b67      	ldr	r3, [pc, #412]	@ (8003c6c <extract_features+0x24c>)
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
 8003ad4:	e00e      	b.n	8003af4 <extract_features+0xd4>
				} else if (featureSize == 0x12) {
 8003ad6:	887b      	ldrh	r3, [r7, #2]
 8003ad8:	2b12      	cmp	r3, #18
 8003ada:	d104      	bne.n	8003ae6 <extract_features+0xc6>
					g_Pixy.num_of_vectors = 3;
 8003adc:	4b63      	ldr	r3, [pc, #396]	@ (8003c6c <extract_features+0x24c>)
 8003ade:	2203      	movs	r2, #3
 8003ae0:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
 8003ae4:	e006      	b.n	8003af4 <extract_features+0xd4>
				} else if (featureSize == 0x18) {
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	2b18      	cmp	r3, #24
 8003aea:	d103      	bne.n	8003af4 <extract_features+0xd4>
					g_Pixy.num_of_vectors = 4;
 8003aec:	4b5f      	ldr	r3, [pc, #380]	@ (8003c6c <extract_features+0x24c>)
 8003aee:	2204      	movs	r2, #4
 8003af0:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
				}
				// now put in the data into vector
				for (int i = 0, v = index; i < g_Pixy.num_of_vectors; ++i, v += 7) {
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	89fb      	ldrh	r3, [r7, #14]
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	e06b      	b.n	8003bd6 <extract_features+0x1b6>
					g_Pixy.vector[i].x0 = g_Pixy.feature_buffer[v + 2];
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3302      	adds	r3, #2
 8003b02:	4a5a      	ldr	r2, [pc, #360]	@ (8003c6c <extract_features+0x24c>)
 8003b04:	4413      	add	r3, r2
 8003b06:	f893 01a0 	ldrb.w	r0, [r3, #416]	@ 0x1a0
 8003b0a:	4958      	ldr	r1, [pc, #352]	@ (8003c6c <extract_features+0x24c>)
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	440b      	add	r3, r1
 8003b18:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	701a      	strb	r2, [r3, #0]
					g_Pixy.vector[i].y0 = g_Pixy.feature_buffer[v + 3];
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3303      	adds	r3, #3
 8003b24:	4a51      	ldr	r2, [pc, #324]	@ (8003c6c <extract_features+0x24c>)
 8003b26:	4413      	add	r3, r2
 8003b28:	f893 01a0 	ldrb.w	r0, [r3, #416]	@ 0x1a0
 8003b2c:	494f      	ldr	r1, [pc, #316]	@ (8003c6c <extract_features+0x24c>)
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	440b      	add	r3, r1
 8003b3a:	f203 2325 	addw	r3, r3, #549	@ 0x225
 8003b3e:	4602      	mov	r2, r0
 8003b40:	701a      	strb	r2, [r3, #0]
					g_Pixy.vector[i].x1 = g_Pixy.feature_buffer[v + 4];
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4a49      	ldr	r2, [pc, #292]	@ (8003c6c <extract_features+0x24c>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	f893 01a0 	ldrb.w	r0, [r3, #416]	@ 0x1a0
 8003b4e:	4947      	ldr	r1, [pc, #284]	@ (8003c6c <extract_features+0x24c>)
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4413      	add	r3, r2
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8003b60:	4602      	mov	r2, r0
 8003b62:	701a      	strb	r2, [r3, #0]
					g_Pixy.vector[i].y1 = g_Pixy.feature_buffer[v + 5];
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3305      	adds	r3, #5
 8003b68:	4a40      	ldr	r2, [pc, #256]	@ (8003c6c <extract_features+0x24c>)
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f893 01a0 	ldrb.w	r0, [r3, #416]	@ 0x1a0
 8003b70:	493e      	ldr	r1, [pc, #248]	@ (8003c6c <extract_features+0x24c>)
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	440b      	add	r3, r1
 8003b7e:	f203 2327 	addw	r3, r3, #551	@ 0x227
 8003b82:	4602      	mov	r2, r0
 8003b84:	701a      	strb	r2, [r3, #0]
					g_Pixy.vector[i].flag = g_Pixy.feature_buffer[v + 6];
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3306      	adds	r3, #6
 8003b8a:	4a38      	ldr	r2, [pc, #224]	@ (8003c6c <extract_features+0x24c>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f893 01a0 	ldrb.w	r0, [r3, #416]	@ 0x1a0
 8003b92:	4936      	ldr	r1, [pc, #216]	@ (8003c6c <extract_features+0x24c>)
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f203 2329 	addw	r3, r3, #553	@ 0x229
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	701a      	strb	r2, [r3, #0]
					g_Pixy.vector[i].line_index = g_Pixy.feature_buffer[v + 7];
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3307      	adds	r3, #7
 8003bac:	4a2f      	ldr	r2, [pc, #188]	@ (8003c6c <extract_features+0x24c>)
 8003bae:	4413      	add	r3, r2
 8003bb0:	f893 01a0 	ldrb.w	r0, [r3, #416]	@ 0x1a0
 8003bb4:	492d      	ldr	r1, [pc, #180]	@ (8003c6c <extract_features+0x24c>)
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	701a      	strb	r2, [r3, #0]
				for (int i = 0, v = index; i < g_Pixy.num_of_vectors; ++i, v += 7) {
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3307      	adds	r3, #7
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	4b25      	ldr	r3, [pc, #148]	@ (8003c6c <extract_features+0x24c>)
 8003bd8:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4293      	cmp	r3, r2
 8003be2:	db8c      	blt.n	8003afe <extract_features+0xde>
				}
				break;
 8003be4:	e032      	b.n	8003c4c <extract_features+0x22c>
			case 0x02: // intersection
				g_Pixy.num_of_branches = g_Pixy.feature_buffer[index + 4];
 8003be6:	89fb      	ldrh	r3, [r7, #14]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4a20      	ldr	r2, [pc, #128]	@ (8003c6c <extract_features+0x24c>)
 8003bec:	4413      	add	r3, r2
 8003bee:	f893 21a0 	ldrb.w	r2, [r3, #416]	@ 0x1a0
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <extract_features+0x24c>)
 8003bf4:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
				break;
 8003bf8:	e028      	b.n	8003c4c <extract_features+0x22c>
			case 0x04: // barcode
				g_Pixy.barcode.x = g_Pixy.feature_buffer[index + 2];
 8003bfa:	89fb      	ldrh	r3, [r7, #14]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8003c6c <extract_features+0x24c>)
 8003c00:	4413      	add	r3, r2
 8003c02:	f893 21a0 	ldrb.w	r2, [r3, #416]	@ 0x1a0
 8003c06:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <extract_features+0x24c>)
 8003c08:	f883 223e 	strb.w	r2, [r3, #574]	@ 0x23e
				g_Pixy.barcode.y = g_Pixy.feature_buffer[index + 3];
 8003c0c:	89fb      	ldrh	r3, [r7, #14]
 8003c0e:	3303      	adds	r3, #3
 8003c10:	4a16      	ldr	r2, [pc, #88]	@ (8003c6c <extract_features+0x24c>)
 8003c12:	4413      	add	r3, r2
 8003c14:	f893 21a0 	ldrb.w	r2, [r3, #416]	@ 0x1a0
 8003c18:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <extract_features+0x24c>)
 8003c1a:	f883 223f 	strb.w	r2, [r3, #575]	@ 0x23f
				g_Pixy.barcode.flag = g_Pixy.feature_buffer[index + 4];
 8003c1e:	89fb      	ldrh	r3, [r7, #14]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4a12      	ldr	r2, [pc, #72]	@ (8003c6c <extract_features+0x24c>)
 8003c24:	4413      	add	r3, r2
 8003c26:	f893 21a0 	ldrb.w	r2, [r3, #416]	@ 0x1a0
 8003c2a:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <extract_features+0x24c>)
 8003c2c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
				g_Pixy.barcode.value = g_Pixy.feature_buffer[index + 5];
 8003c30:	89fb      	ldrh	r3, [r7, #14]
 8003c32:	3305      	adds	r3, #5
 8003c34:	4a0d      	ldr	r2, [pc, #52]	@ (8003c6c <extract_features+0x24c>)
 8003c36:	4413      	add	r3, r2
 8003c38:	f893 21a0 	ldrb.w	r2, [r3, #416]	@ 0x1a0
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <extract_features+0x24c>)
 8003c3e:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241
				g_Pixy.barcode_detected = true;
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <extract_features+0x24c>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
				break;
 8003c4a:	bf00      	nop
			}
			index += 2 + featureSize;
 8003c4c:	887a      	ldrh	r2, [r7, #2]
 8003c4e:	89fb      	ldrh	r3, [r7, #14]
 8003c50:	4413      	add	r3, r2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3302      	adds	r3, #2
 8003c56:	81fb      	strh	r3, [r7, #14]
		while (index < g_Pixy.payload_size) {
 8003c58:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <extract_features+0x24c>)
 8003c5a:	f8b3 319a 	ldrh.w	r3, [r3, #410]	@ 0x19a
 8003c5e:	89fa      	ldrh	r2, [r7, #14]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	f4ff af10 	bcc.w	8003a86 <extract_features+0x66>
//					g_Pixy.vector[i].y0, g_Pixy.vector[i].x1, g_Pixy.vector[i].y1);
//		}
//	} else {
//		printf("Packet type != Get Main/All. Ignore extracting features.\n");
//	}
}
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20002254 	.word	0x20002254
 8003c70:	0800fbe4 	.word	0x0800fbe4
 8003c74:	20002478 	.word	0x20002478
 8003c78:	20002492 	.word	0x20002492
 8003c7c:	00000000 	.word	0x00000000

08003c80 <line_following_algorithm>:

void line_following_algorithm() {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b092      	sub	sp, #72	@ 0x48
 8003c84:	af00      	add	r7, sp, #0
//	if (g_Pixy.inputPacketType == 0x30) {
		// reset previous move command if needed
		PixyMoveCommandState_t prevMoveCmd = g_Pixy.move_command_state;
 8003c86:	4bc2      	ldr	r3, [pc, #776]	@ (8003f90 <line_following_algorithm+0x310>)
 8003c88:	f893 3243 	ldrb.w	r3, [r3, #579]	@ 0x243
 8003c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		// if got barcode
		if (g_Pixy.barcode_detected) {
 8003c90:	4bbf      	ldr	r3, [pc, #764]	@ (8003f90 <line_following_algorithm+0x310>)
 8003c92:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d034      	beq.n	8003d04 <line_following_algorithm+0x84>
			printf("Barcode detected with value: %d\n", g_Pixy.barcode.value);
 8003c9a:	4bbd      	ldr	r3, [pc, #756]	@ (8003f90 <line_following_algorithm+0x310>)
 8003c9c:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	48bc      	ldr	r0, [pc, #752]	@ (8003f94 <line_following_algorithm+0x314>)
 8003ca4:	f008 f81c 	bl	800bce0 <iprintf>

			switch (g_Pixy.barcode.value) {
 8003ca8:	4bb9      	ldr	r3, [pc, #740]	@ (8003f90 <line_following_algorithm+0x310>)
 8003caa:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8003cae:	3b06      	subs	r3, #6
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d821      	bhi.n	8003cf8 <line_following_algorithm+0x78>
 8003cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <line_following_algorithm+0x3c>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003cef 	.word	0x08003cef
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003cdb 	.word	0x08003cdb
 8003cc8:	08003cf9 	.word	0x08003cf9
 8003ccc:	08003ce5 	.word	0x08003ce5
			case BarcodeForward:
				g_Pixy.move_command_state = Forward;
 8003cd0:	4baf      	ldr	r3, [pc, #700]	@ (8003f90 <line_following_algorithm+0x310>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
//				printf("Barcode command: Forward\n");
				break;
 8003cd8:	e013      	b.n	8003d02 <line_following_algorithm+0x82>
			case BarcodeLeft:
				g_Pixy.move_command_state = Left;
 8003cda:	4bad      	ldr	r3, [pc, #692]	@ (8003f90 <line_following_algorithm+0x310>)
 8003cdc:	2203      	movs	r2, #3
 8003cde:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
//				printf("Barcode command: Left\n");
				break;
 8003ce2:	e00e      	b.n	8003d02 <line_following_algorithm+0x82>
			case BarcodeRight:
				g_Pixy.move_command_state = Right;
 8003ce4:	4baa      	ldr	r3, [pc, #680]	@ (8003f90 <line_following_algorithm+0x310>)
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
//				printf("Barcode command: Right\n");
				break;
 8003cec:	e009      	b.n	8003d02 <line_following_algorithm+0x82>
			case BarcodeStop:
				g_Pixy.move_command_state = Stop;
 8003cee:	4ba8      	ldr	r3, [pc, #672]	@ (8003f90 <line_following_algorithm+0x310>)
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
//				printf("Barcode command: Stop\n");
				break;
 8003cf6:	e004      	b.n	8003d02 <line_following_algorithm+0x82>
			default:
//				printf("Unknown barcode value: %d, ignoring\n",
//						g_Pixy.barcode.value);
				g_Pixy.barcode_detected = false; // ignore barcode detected and proceed
 8003cf8:	4ba5      	ldr	r3, [pc, #660]	@ (8003f90 <line_following_algorithm+0x310>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
				// break is intentionally left out to allow following lines to be processed
			}
			return; // do not need to do more processing
 8003d00:	e32b      	b.n	800435a <line_following_algorithm+0x6da>
 8003d02:	e32a      	b.n	800435a <line_following_algorithm+0x6da>
		}

		// check for intersection if no barcode
		if (!g_Pixy.barcode_detected && g_Pixy.num_of_branches > 0) {
 8003d04:	4ba2      	ldr	r3, [pc, #648]	@ (8003f90 <line_following_algorithm+0x310>)
 8003d06:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8003d0a:	f083 0301 	eor.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 826b 	beq.w	80041ec <line_following_algorithm+0x56c>
 8003d16:	4b9e      	ldr	r3, [pc, #632]	@ (8003f90 <line_following_algorithm+0x310>)
 8003d18:	f893 323d 	ldrb.w	r3, [r3, #573]	@ 0x23d
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8265 	beq.w	80041ec <line_following_algorithm+0x56c>
			printf("Intersection detected with %d branches\n",
					g_Pixy.num_of_branches);
 8003d22:	4b9b      	ldr	r3, [pc, #620]	@ (8003f90 <line_following_algorithm+0x310>)
 8003d24:	f893 323d 	ldrb.w	r3, [r3, #573]	@ 0x23d
			printf("Intersection detected with %d branches\n",
 8003d28:	4619      	mov	r1, r3
 8003d2a:	489b      	ldr	r0, [pc, #620]	@ (8003f98 <line_following_algorithm+0x318>)
 8003d2c:	f007 ffd8 	bl	800bce0 <iprintf>

			if (g_Pixy.num_of_vectors == 3) { // detected a Y junction
 8003d30:	4b97      	ldr	r3, [pc, #604]	@ (8003f90 <line_following_algorithm+0x310>)
 8003d32:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	f040 810a 	bne.w	8003f50 <line_following_algorithm+0x2d0>
				// We need to decide which branch to follow - left, right, or forward
				int16_t left_error = INT16_MAX;  // initialize with large values
 8003d3c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003d40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
				int16_t right_error = INT16_MAX;
 8003d44:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003d48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
				int16_t forward_error = INT16_MAX;
 8003d4c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003d50:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
				// do remember that index is set negative
				int8_t left_index = -1;
 8003d54:	23ff      	movs	r3, #255	@ 0xff
 8003d56:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
				int8_t right_index = -1;
 8003d5a:	23ff      	movs	r3, #255	@ 0xff
 8003d5c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
				int8_t forward_index = -1;
 8003d60:	23ff      	movs	r3, #255	@ 0xff
 8003d62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

				// First, identify which vector is which (left, right, forward)
				// At a Y junction, we classify vectors by their endpoints' positions relative to center
				for (int i = 0; i < g_Pixy.num_of_vectors; i++) {
 8003d66:	2300      	movs	r3, #0
 8003d68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d6a:	e0a2      	b.n	8003eb2 <line_following_algorithm+0x232>
					// Calculate the angle of the vector relative to vertical
					float dx = g_Pixy.vector[i].x1 - g_Pixy.vector[i].x0;
 8003d6c:	4988      	ldr	r1, [pc, #544]	@ (8003f90 <line_following_algorithm+0x310>)
 8003d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	440b      	add	r3, r1
 8003d7a:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	4983      	ldr	r1, [pc, #524]	@ (8003f90 <line_following_algorithm+0x310>)
 8003d84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	440b      	add	r3, r1
 8003d90:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	1ac3      	subs	r3, r0, r3
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003da0:	edc7 7a05 	vstr	s15, [r7, #20]
					float dy = g_Pixy.vector[i].y1 - g_Pixy.vector[i].y0;
 8003da4:	497a      	ldr	r1, [pc, #488]	@ (8003f90 <line_following_algorithm+0x310>)
 8003da6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	440b      	add	r3, r1
 8003db2:	f203 2327 	addw	r3, r3, #551	@ 0x227
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	4975      	ldr	r1, [pc, #468]	@ (8003f90 <line_following_algorithm+0x310>)
 8003dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f203 2325 	addw	r3, r3, #549	@ 0x225
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	1ac3      	subs	r3, r0, r3
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd8:	edc7 7a04 	vstr	s15, [r7, #16]
					float angle = atan2f(dx, dy) * (180.0f / M_PI); // angle in degrees
 8003ddc:	edd7 0a04 	vldr	s1, [r7, #16]
 8003de0:	ed97 0a05 	vldr	s0, [r7, #20]
 8003de4:	f00a fe52 	bl	800ea8c <atan2f>
 8003de8:	ee10 3a10 	vmov	r3, s0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fbb3 	bl	8000558 <__aeabi_f2d>
 8003df2:	a365      	add	r3, pc, #404	@ (adr r3, 8003f88 <line_following_algorithm+0x308>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fc06 	bl	8000608 <__aeabi_dmul>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	f7fc fed8 	bl	8000bb8 <__aeabi_d2f>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]

					// Classify based on angle
					// Note: Adjust these thresholds based on your camera orientation and mounting
//					printf("Vector %d angle: %.2f degrees\n", i, angle);

					if (angle < -30.0f) {  // Left branch
 8003e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e10:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8003e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	d514      	bpl.n	8003e48 <line_following_algorithm+0x1c8>
						left_index = i;
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e20:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
						left_error = abs(CAMERA_CENTER_X - g_Pixy.vector[i].x1);
 8003e24:	495a      	ldr	r1, [pc, #360]	@ (8003f90 <line_following_algorithm+0x310>)
 8003e26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	440b      	add	r3, r1
 8003e32:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bfb8      	it	lt
 8003e40:	425b      	neglt	r3, r3
 8003e42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003e46:	e031      	b.n	8003eac <line_following_algorithm+0x22c>
					} else if (angle > 30.0f) {  // Right branch
 8003e48:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e4c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	dd14      	ble.n	8003e84 <line_following_algorithm+0x204>
						right_index = i;
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
						right_error = abs(CAMERA_CENTER_X - g_Pixy.vector[i].x1);
 8003e60:	494b      	ldr	r1, [pc, #300]	@ (8003f90 <line_following_algorithm+0x310>)
 8003e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bfb8      	it	lt
 8003e7c:	425b      	neglt	r3, r3
 8003e7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003e82:	e013      	b.n	8003eac <line_following_algorithm+0x22c>
					} else {  // Forward branch (approximately straight)
						forward_index = i;
 8003e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e86:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						forward_error = abs(CAMERA_CENTER_X - g_Pixy.vector[i].x1);
 8003e8a:	4941      	ldr	r1, [pc, #260]	@ (8003f90 <line_following_algorithm+0x310>)
 8003e8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	440b      	add	r3, r1
 8003e98:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bfb8      	it	lt
 8003ea6:	425b      	neglt	r3, r3
 8003ea8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
				for (int i = 0; i < g_Pixy.num_of_vectors; i++) {
 8003eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eae:	3301      	adds	r3, #1
 8003eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003eb2:	4b37      	ldr	r3, [pc, #220]	@ (8003f90 <line_following_algorithm+0x310>)
 8003eb4:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f6ff af55 	blt.w	8003d6c <line_following_algorithm+0xec>
//						rightError);
//				printf("Forward branch (index %d): error = %d\n", forwardIndex,
//						forwardError);

				// determine which direction has the smallest error
				if (left_index != -1 && left_error <= right_error
 8003ec2:	f997 3041 	ldrsb.w	r3, [r7, #65]	@ 0x41
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d013      	beq.n	8003ef4 <line_following_algorithm+0x274>
 8003ecc:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8003ed0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	dc0d      	bgt.n	8003ef4 <line_following_algorithm+0x274>
						&& left_error <= forward_error) {
 8003ed8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8003edc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	dc07      	bgt.n	8003ef4 <line_following_algorithm+0x274>
					g_Pixy.move_command_state = Left;
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f90 <line_following_algorithm+0x310>)
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
					printf("Y-junction decision: Left (smallest error)\n");
 8003eec:	482b      	ldr	r0, [pc, #172]	@ (8003f9c <line_following_algorithm+0x31c>)
 8003eee:	f007 ff5f 	bl	800bdb0 <puts>
 8003ef2:	e17a      	b.n	80041ea <line_following_algorithm+0x56a>
				} else if (right_index != -1 && right_error <= left_error
 8003ef4:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d013      	beq.n	8003f26 <line_following_algorithm+0x2a6>
 8003efe:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8003f02:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8003f06:	429a      	cmp	r2, r3
 8003f08:	dc0d      	bgt.n	8003f26 <line_following_algorithm+0x2a6>
						&& right_error <= forward_error) {
 8003f0a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8003f0e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8003f12:	429a      	cmp	r2, r3
 8003f14:	dc07      	bgt.n	8003f26 <line_following_algorithm+0x2a6>
					g_Pixy.move_command_state = Right;
 8003f16:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <line_following_algorithm+0x310>)
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
					printf("Y-junction decision: Right (smallest error)\n");
 8003f1e:	4820      	ldr	r0, [pc, #128]	@ (8003fa0 <line_following_algorithm+0x320>)
 8003f20:	f007 ff46 	bl	800bdb0 <puts>
 8003f24:	e161      	b.n	80041ea <line_following_algorithm+0x56a>
				} else if (forward_index != -1) {
 8003f26:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d007      	beq.n	8003f40 <line_following_algorithm+0x2c0>
					g_Pixy.move_command_state = Forward;
 8003f30:	4b17      	ldr	r3, [pc, #92]	@ (8003f90 <line_following_algorithm+0x310>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
					printf("Y-junction decision: Forward (smallest error)\n");
 8003f38:	481a      	ldr	r0, [pc, #104]	@ (8003fa4 <line_following_algorithm+0x324>)
 8003f3a:	f007 ff39 	bl	800bdb0 <puts>
			if (g_Pixy.num_of_vectors == 3) { // detected a Y junction
 8003f3e:	e1fa      	b.n	8004336 <line_following_algorithm+0x6b6>
				} else {
					// by default, just move forward
					g_Pixy.move_command_state = Forward;
 8003f40:	4b13      	ldr	r3, [pc, #76]	@ (8003f90 <line_following_algorithm+0x310>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
					printf(
 8003f48:	4817      	ldr	r0, [pc, #92]	@ (8003fa8 <line_following_algorithm+0x328>)
 8003f4a:	f007 ff31 	bl	800bdb0 <puts>
			if (g_Pixy.num_of_vectors == 3) { // detected a Y junction
 8003f4e:	e1f2      	b.n	8004336 <line_following_algorithm+0x6b6>
							"Couldn't make proper decision at Y-junction. Defaulting to Forward\n");
				}
			} else if (g_Pixy.num_of_vectors == 4) { // detected a cross intersection
 8003f50:	4b0f      	ldr	r3, [pc, #60]	@ (8003f90 <line_following_algorithm+0x310>)
 8003f52:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	f040 813b 	bne.w	80041d2 <line_following_algorithm+0x552>
				// similar for cross intersection
				int16_t left_error = INT16_MAX;
 8003f5c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003f60:	86fb      	strh	r3, [r7, #54]	@ 0x36
				int16_t right_error = INT16_MAX;
 8003f62:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003f66:	86bb      	strh	r3, [r7, #52]	@ 0x34
				int16_t forward_error = INT16_MAX;
 8003f68:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003f6c:	867b      	strh	r3, [r7, #50]	@ 0x32
				int8_t left_index = -1;
 8003f6e:	23ff      	movs	r3, #255	@ 0xff
 8003f70:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
				int8_t right_index = -1;
 8003f74:	23ff      	movs	r3, #255	@ 0xff
 8003f76:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
				int8_t forward_index = -1;
 8003f7a:	23ff      	movs	r3, #255	@ 0xff
 8003f7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				for (int i = 0; i < g_Pixy.num_of_vectors; i++) {
 8003f80:	2300      	movs	r3, #0
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f84:	e0d6      	b.n	8004134 <line_following_algorithm+0x4b4>
 8003f86:	bf00      	nop
 8003f88:	1a63c1f8 	.word	0x1a63c1f8
 8003f8c:	404ca5dc 	.word	0x404ca5dc
 8003f90:	20002254 	.word	0x20002254
 8003f94:	0800fc08 	.word	0x0800fc08
 8003f98:	0800fc2c 	.word	0x0800fc2c
 8003f9c:	0800fc54 	.word	0x0800fc54
 8003fa0:	0800fc80 	.word	0x0800fc80
 8003fa4:	0800fcac 	.word	0x0800fcac
 8003fa8:	0800fcdc 	.word	0x0800fcdc
					float dx = g_Pixy.vector[i].x1 - g_Pixy.vector[i].x0;
 8003fac:	49c4      	ldr	r1, [pc, #784]	@ (80042c0 <line_following_algorithm+0x640>)
 8003fae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	440b      	add	r3, r1
 8003fba:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	49bf      	ldr	r1, [pc, #764]	@ (80042c0 <line_following_algorithm+0x640>)
 8003fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	440b      	add	r3, r1
 8003fd0:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	1ac3      	subs	r3, r0, r3
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe0:	edc7 7a08 	vstr	s15, [r7, #32]
					float dy = g_Pixy.vector[i].y1 - g_Pixy.vector[i].y0;
 8003fe4:	49b6      	ldr	r1, [pc, #728]	@ (80042c0 <line_following_algorithm+0x640>)
 8003fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	440b      	add	r3, r1
 8003ff2:	f203 2327 	addw	r3, r3, #551	@ 0x227
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	49b1      	ldr	r1, [pc, #708]	@ (80042c0 <line_following_algorithm+0x640>)
 8003ffc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	440b      	add	r3, r1
 8004008:	f203 2325 	addw	r3, r3, #549	@ 0x225
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	1ac3      	subs	r3, r0, r3
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004018:	edc7 7a07 	vstr	s15, [r7, #28]
					float angle = atan2f(dx, dy) * (180.0f / M_PI);
 800401c:	edd7 0a07 	vldr	s1, [r7, #28]
 8004020:	ed97 0a08 	vldr	s0, [r7, #32]
 8004024:	f00a fd32 	bl	800ea8c <atan2f>
 8004028:	ee10 3a10 	vmov	r3, s0
 800402c:	4618      	mov	r0, r3
 800402e:	f7fc fa93 	bl	8000558 <__aeabi_f2d>
 8004032:	a3a1      	add	r3, pc, #644	@ (adr r3, 80042b8 <line_following_algorithm+0x638>)
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f7fc fae6 	bl	8000608 <__aeabi_dmul>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4610      	mov	r0, r2
 8004042:	4619      	mov	r1, r3
 8004044:	f7fc fdb8 	bl	8000bb8 <__aeabi_d2f>
 8004048:	4603      	mov	r3, r0
 800404a:	61bb      	str	r3, [r7, #24]

//					printf("Vector %d angle: %.2f degrees\n", i, angle);

					// classify based on angle (adjust thresholds as needed)
					if (angle < -45.0f && angle > -135.0f) {  // Left branch
 800404c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004050:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80042c4 <line_following_algorithm+0x644>
 8004054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405c:	d51c      	bpl.n	8004098 <line_following_algorithm+0x418>
 800405e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004062:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80042c8 <line_following_algorithm+0x648>
 8004066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	dd13      	ble.n	8004098 <line_following_algorithm+0x418>
						left_index = i;
 8004070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004072:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						left_error = abs(CAMERA_CENTER_X - g_Pixy.vector[i].x1);
 8004076:	4992      	ldr	r1, [pc, #584]	@ (80042c0 <line_following_algorithm+0x640>)
 8004078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	440b      	add	r3, r1
 8004084:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 800408e:	2b00      	cmp	r3, #0
 8004090:	bfb8      	it	lt
 8004092:	425b      	neglt	r3, r3
 8004094:	86fb      	strh	r3, [r7, #54]	@ 0x36
					if (angle < -45.0f && angle > -135.0f) {  // Left branch
 8004096:	e04a      	b.n	800412e <line_following_algorithm+0x4ae>
					} else if (angle > 45.0f && angle < 135.0f) { // Right branch
 8004098:	edd7 7a06 	vldr	s15, [r7, #24]
 800409c:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80042cc <line_following_algorithm+0x64c>
 80040a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a8:	dd1c      	ble.n	80040e4 <line_following_algorithm+0x464>
 80040aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80040ae:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80042d0 <line_following_algorithm+0x650>
 80040b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ba:	d513      	bpl.n	80040e4 <line_following_algorithm+0x464>
						right_index = i;
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
						right_error = abs(CAMERA_CENTER_X - g_Pixy.vector[i].x1);
 80040c2:	497f      	ldr	r1, [pc, #508]	@ (80042c0 <line_following_algorithm+0x640>)
 80040c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	440b      	add	r3, r1
 80040d0:	f203 2326 	addw	r3, r3, #550	@ 0x226
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bfb8      	it	lt
 80040de:	425b      	neglt	r3, r3
 80040e0:	86bb      	strh	r3, [r7, #52]	@ 0x34
					} else if (angle > 45.0f && angle < 135.0f) { // Right branch
 80040e2:	e024      	b.n	800412e <line_following_algorithm+0x4ae>
					} else if (angle > -45.0f && angle < 45.0f) { // Forward branch
 80040e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80040e8:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80042c4 <line_following_algorithm+0x644>
 80040ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f4:	dd1b      	ble.n	800412e <line_following_algorithm+0x4ae>
 80040f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80040fa:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80042cc <line_following_algorithm+0x64c>
 80040fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004106:	d512      	bpl.n	800412e <line_following_algorithm+0x4ae>
						forward_index = i;
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						forward_error = abs(CAMERA_CENTER_X - g_Pixy.vector[i].x1);
 800410e:	496c      	ldr	r1, [pc, #432]	@ (80042c0 <line_following_algorithm+0x640>)
 8004110:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	440b      	add	r3, r1
 800411c:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8004126:	2b00      	cmp	r3, #0
 8004128:	bfb8      	it	lt
 800412a:	425b      	neglt	r3, r3
 800412c:	867b      	strh	r3, [r7, #50]	@ 0x32
				for (int i = 0; i < g_Pixy.num_of_vectors; i++) {
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	3301      	adds	r3, #1
 8004132:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004134:	4b62      	ldr	r3, [pc, #392]	@ (80042c0 <line_following_algorithm+0x640>)
 8004136:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 800413a:	461a      	mov	r2, r3
 800413c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413e:	4293      	cmp	r3, r2
 8004140:	f6ff af34 	blt.w	8003fac <line_following_algorithm+0x32c>
//						rightError);
//				printf("Forward branch (index %d): error = %d\n", forwardIndex,
//						forwardError);

				// determine which direction has the smallest error
				if (left_index != -1 && left_error <= right_error
 8004144:	f997 3031 	ldrsb.w	r3, [r7, #49]	@ 0x31
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d013      	beq.n	8004176 <line_following_algorithm+0x4f6>
 800414e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8004152:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8004156:	429a      	cmp	r2, r3
 8004158:	dc0d      	bgt.n	8004176 <line_following_algorithm+0x4f6>
						&& left_error <= forward_error) {
 800415a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 800415e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004162:	429a      	cmp	r2, r3
 8004164:	dc07      	bgt.n	8004176 <line_following_algorithm+0x4f6>
					g_Pixy.move_command_state = Left;
 8004166:	4b56      	ldr	r3, [pc, #344]	@ (80042c0 <line_following_algorithm+0x640>)
 8004168:	2203      	movs	r2, #3
 800416a:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
					printf("Cross-junction decision: Left (smallest error)\n");
 800416e:	4859      	ldr	r0, [pc, #356]	@ (80042d4 <line_following_algorithm+0x654>)
 8004170:	f007 fe1e 	bl	800bdb0 <puts>
 8004174:	e039      	b.n	80041ea <line_following_algorithm+0x56a>
				} else if (right_index != -1 && right_error <= left_error
 8004176:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d013      	beq.n	80041a8 <line_following_algorithm+0x528>
 8004180:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 8004184:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004188:	429a      	cmp	r2, r3
 800418a:	dc0d      	bgt.n	80041a8 <line_following_algorithm+0x528>
						&& right_error <= forward_error) {
 800418c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 8004190:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004194:	429a      	cmp	r2, r3
 8004196:	dc07      	bgt.n	80041a8 <line_following_algorithm+0x528>
					g_Pixy.move_command_state = Right;
 8004198:	4b49      	ldr	r3, [pc, #292]	@ (80042c0 <line_following_algorithm+0x640>)
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
					printf("Cross-junction decision: Right (smallest error)\n");
 80041a0:	484d      	ldr	r0, [pc, #308]	@ (80042d8 <line_following_algorithm+0x658>)
 80041a2:	f007 fe05 	bl	800bdb0 <puts>
 80041a6:	e020      	b.n	80041ea <line_following_algorithm+0x56a>
				} else if (forward_index != -1) {
 80041a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d007      	beq.n	80041c2 <line_following_algorithm+0x542>
					g_Pixy.move_command_state = Forward;
 80041b2:	4b43      	ldr	r3, [pc, #268]	@ (80042c0 <line_following_algorithm+0x640>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
					printf(
 80041ba:	4848      	ldr	r0, [pc, #288]	@ (80042dc <line_following_algorithm+0x65c>)
 80041bc:	f007 fdf8 	bl	800bdb0 <puts>
			if (g_Pixy.num_of_vectors == 3) { // detected a Y junction
 80041c0:	e0b9      	b.n	8004336 <line_following_algorithm+0x6b6>
							"Cross-junction decision: Forward (smallest error)\n");
				} else {
					// by default, just move forward
					g_Pixy.move_command_state = Forward;
 80041c2:	4b3f      	ldr	r3, [pc, #252]	@ (80042c0 <line_following_algorithm+0x640>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
					printf(
 80041ca:	4845      	ldr	r0, [pc, #276]	@ (80042e0 <line_following_algorithm+0x660>)
 80041cc:	f007 fdf0 	bl	800bdb0 <puts>
			if (g_Pixy.num_of_vectors == 3) { // detected a Y junction
 80041d0:	e0b1      	b.n	8004336 <line_following_algorithm+0x6b6>
							"Couldn't make proper decision at cross junction, defaulting to Forward\n");
				}
			} else { // unexpected number of vectors at intersection
				g_Pixy.move_command_state = Forward;
 80041d2:	4b3b      	ldr	r3, [pc, #236]	@ (80042c0 <line_following_algorithm+0x640>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
				printf(
						"Unexpected number of vectors (%d) at intersection, defaulting to Forward\n",
						g_Pixy.num_of_vectors);
 80041da:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <line_following_algorithm+0x640>)
 80041dc:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
				printf(
 80041e0:	4619      	mov	r1, r3
 80041e2:	4840      	ldr	r0, [pc, #256]	@ (80042e4 <line_following_algorithm+0x664>)
 80041e4:	f007 fd7c 	bl	800bce0 <iprintf>
			if (g_Pixy.num_of_vectors == 3) { // detected a Y junction
 80041e8:	e0a5      	b.n	8004336 <line_following_algorithm+0x6b6>
 80041ea:	e0a4      	b.n	8004336 <line_following_algorithm+0x6b6>
			}
		}

		// follow the line if no barcode or intersection!
		else if (!g_Pixy.barcode_detected && g_Pixy.num_of_vectors > 0) {
 80041ec:	4b34      	ldr	r3, [pc, #208]	@ (80042c0 <line_following_algorithm+0x640>)
 80041ee:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 80041f2:	f083 0301 	eor.w	r3, r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8086 	beq.w	800430a <line_following_algorithm+0x68a>
 80041fe:	4b30      	ldr	r3, [pc, #192]	@ (80042c0 <line_following_algorithm+0x640>)
 8004200:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8080 	beq.w	800430a <line_following_algorithm+0x68a>
			int8_t xError = CAMERA_CENTER_X - g_Pixy.vector[0].x1;
 800420a:	4b2d      	ldr	r3, [pc, #180]	@ (80042c0 <line_following_algorithm+0x640>)
 800420c:	f893 3226 	ldrb.w	r3, [r3, #550]	@ 0x226
 8004210:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8004214:	b2db      	uxtb	r3, r3
 8004216:	72fb      	strb	r3, [r7, #11]
			int8_t yError = CAMERA_CENTER_Y - g_Pixy.vector[0].y1;
 8004218:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <line_following_algorithm+0x640>)
 800421a:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 800421e:	f1c3 0319 	rsb	r3, r3, #25
 8004222:	b2db      	uxtb	r3, r3
 8004224:	72bb      	strb	r3, [r7, #10]

			float angleDiff = 0.0f;
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	607b      	str	r3, [r7, #4]
			if (xError != 0) { // cant divide by zero
 800422c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d023      	beq.n	800427c <line_following_algorithm+0x5fc>
				// currently angle diff is not really used
				angleDiff = atan2f((float) yError, (float) xError)
 8004234:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004240:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004244:	ee07 3a10 	vmov	s14, r3
 8004248:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800424c:	eef0 0a47 	vmov.f32	s1, s14
 8004250:	eeb0 0a67 	vmov.f32	s0, s15
 8004254:	f00a fc1a 	bl	800ea8c <atan2f>
 8004258:	ee10 3a10 	vmov	r3, s0
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc f97b 	bl	8000558 <__aeabi_f2d>
						* (180.0f / M_PI);
 8004262:	a315      	add	r3, pc, #84	@ (adr r3, 80042b8 <line_following_algorithm+0x638>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f7fc f9ce 	bl	8000608 <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
				angleDiff = atan2f((float) yError, (float) xError)
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	f7fc fca0 	bl	8000bb8 <__aeabi_d2f>
 8004278:	4603      	mov	r3, r0
 800427a:	607b      	str	r3, [r7, #4]
//			printf(
//					"Line following: X Error: %d, Y Error: %d, Angle Difference: %.2f degrees\n",
//					xError, yError, angleDiff);

			// make decision based on error
			if (abs(xError) < THRESHOLD_X) {
 800427c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004280:	2b00      	cmp	r3, #0
 8004282:	bfb8      	it	lt
 8004284:	425b      	neglt	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b09      	cmp	r3, #9
 800428a:	d807      	bhi.n	800429c <line_following_algorithm+0x61c>
				g_Pixy.move_command_state = Forward;
 800428c:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <line_following_algorithm+0x640>)
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
				printf("Line following decision: Forward\n");
 8004294:	4814      	ldr	r0, [pc, #80]	@ (80042e8 <line_following_algorithm+0x668>)
 8004296:	f007 fd8b 	bl	800bdb0 <puts>
		else if (!g_Pixy.barcode_detected && g_Pixy.num_of_vectors > 0) {
 800429a:	e04b      	b.n	8004334 <line_following_algorithm+0x6b4>
			} else if (xError > THRESHOLD_X) {
 800429c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80042a0:	2b0a      	cmp	r3, #10
 80042a2:	dd25      	ble.n	80042f0 <line_following_algorithm+0x670>
				g_Pixy.move_command_state = Left;
 80042a4:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <line_following_algorithm+0x640>)
 80042a6:	2203      	movs	r2, #3
 80042a8:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
				printf("Line following decision: Left\n");
 80042ac:	480f      	ldr	r0, [pc, #60]	@ (80042ec <line_following_algorithm+0x66c>)
 80042ae:	f007 fd7f 	bl	800bdb0 <puts>
		else if (!g_Pixy.barcode_detected && g_Pixy.num_of_vectors > 0) {
 80042b2:	e03f      	b.n	8004334 <line_following_algorithm+0x6b4>
 80042b4:	f3af 8000 	nop.w
 80042b8:	1a63c1f8 	.word	0x1a63c1f8
 80042bc:	404ca5dc 	.word	0x404ca5dc
 80042c0:	20002254 	.word	0x20002254
 80042c4:	c2340000 	.word	0xc2340000
 80042c8:	c3070000 	.word	0xc3070000
 80042cc:	42340000 	.word	0x42340000
 80042d0:	43070000 	.word	0x43070000
 80042d4:	0800fd20 	.word	0x0800fd20
 80042d8:	0800fd50 	.word	0x0800fd50
 80042dc:	0800fd80 	.word	0x0800fd80
 80042e0:	0800fdb4 	.word	0x0800fdb4
 80042e4:	0800fdfc 	.word	0x0800fdfc
 80042e8:	0800fe48 	.word	0x0800fe48
 80042ec:	0800fe6c 	.word	0x0800fe6c
			} else if (xError < -THRESHOLD_X) {
 80042f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80042f4:	f113 0f0a 	cmn.w	r3, #10
 80042f8:	da1c      	bge.n	8004334 <line_following_algorithm+0x6b4>
				g_Pixy.move_command_state = Right;
 80042fa:	4b19      	ldr	r3, [pc, #100]	@ (8004360 <line_following_algorithm+0x6e0>)
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
				printf("Line following decision: Right\n");
 8004302:	4818      	ldr	r0, [pc, #96]	@ (8004364 <line_following_algorithm+0x6e4>)
 8004304:	f007 fd54 	bl	800bdb0 <puts>
		else if (!g_Pixy.barcode_detected && g_Pixy.num_of_vectors > 0) {
 8004308:	e014      	b.n	8004334 <line_following_algorithm+0x6b4>
			}
		}

		// no valid features detected
		else if (!g_Pixy.barcode_detected && g_Pixy.num_of_vectors == 0) {
 800430a:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <line_following_algorithm+0x6e0>)
 800430c:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8004310:	f083 0301 	eor.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <line_following_algorithm+0x6b6>
 800431a:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <line_following_algorithm+0x6e0>)
 800431c:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d108      	bne.n	8004336 <line_following_algorithm+0x6b6>
			printf("No line or barcode detected, stopping\n");
 8004324:	4810      	ldr	r0, [pc, #64]	@ (8004368 <line_following_algorithm+0x6e8>)
 8004326:	f007 fd43 	bl	800bdb0 <puts>
			g_Pixy.move_command_state = Stop;
 800432a:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <line_following_algorithm+0x6e0>)
 800432c:	2204      	movs	r2, #4
 800432e:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
 8004332:	e000      	b.n	8004336 <line_following_algorithm+0x6b6>
		else if (!g_Pixy.barcode_detected && g_Pixy.num_of_vectors > 0) {
 8004334:	bf00      	nop
		}

		// command has changed
		if (prevMoveCmd != g_Pixy.move_command_state) {
 8004336:	4b0a      	ldr	r3, [pc, #40]	@ (8004360 <line_following_algorithm+0x6e0>)
 8004338:	f893 3243 	ldrb.w	r3, [r3, #579]	@ 0x243
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004342:	429a      	cmp	r2, r3
 8004344:	d009      	beq.n	800435a <line_following_algorithm+0x6da>
			printf("Move command changed from %d to %d\n", prevMoveCmd,
 8004346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
					g_Pixy.move_command_state);
 800434a:	4a05      	ldr	r2, [pc, #20]	@ (8004360 <line_following_algorithm+0x6e0>)
 800434c:	f892 2243 	ldrb.w	r2, [r2, #579]	@ 0x243
 8004350:	b2d2      	uxtb	r2, r2
			printf("Move command changed from %d to %d\n", prevMoveCmd,
 8004352:	4619      	mov	r1, r3
 8004354:	4805      	ldr	r0, [pc, #20]	@ (800436c <line_following_algorithm+0x6ec>)
 8004356:	f007 fcc3 	bl	800bce0 <iprintf>
		}
//	} else {
//		printf(
//				"Packet type != Get Main/All. Ignoring line following algorithm.\n");
//	}
}
 800435a:	3748      	adds	r7, #72	@ 0x48
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20002254 	.word	0x20002254
 8004364:	0800fe8c 	.word	0x0800fe8c
 8004368:	0800feac 	.word	0x0800feac
 800436c:	0800fed4 	.word	0x0800fed4

08004370 <update_website_movement_state>:

void update_website_movement_state(int connection_id) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	switch (g_Pixy.move_command_state) {
 8004378:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <update_website_movement_state+0x8c>)
 800437a:	f893 3243 	ldrb.w	r3, [r3, #579]	@ 0x243
 800437e:	b2db      	uxtb	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	2b03      	cmp	r3, #3
 8004384:	d826      	bhi.n	80043d4 <update_website_movement_state+0x64>
 8004386:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <update_website_movement_state+0x1c>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	0800439d 	.word	0x0800439d
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043ab 	.word	0x080043ab
 8004398:	080043c7 	.word	0x080043c7
	case Forward:
		strcpy((char*) g_ESP.response, forward_response);
 800439c:	4b18      	ldr	r3, [pc, #96]	@ (8004400 <update_website_movement_state+0x90>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4619      	mov	r1, r3
 80043a2:	4818      	ldr	r0, [pc, #96]	@ (8004404 <update_website_movement_state+0x94>)
 80043a4:	f007 ff2f 	bl	800c206 <strcpy>
		break;
 80043a8:	e014      	b.n	80043d4 <update_website_movement_state+0x64>
	case Left:
		strcpy((char*) g_ESP.response, left_response);
 80043aa:	4b17      	ldr	r3, [pc, #92]	@ (8004408 <update_website_movement_state+0x98>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4814      	ldr	r0, [pc, #80]	@ (8004404 <update_website_movement_state+0x94>)
 80043b2:	f007 ff28 	bl	800c206 <strcpy>
		break;
 80043b6:	e00d      	b.n	80043d4 <update_website_movement_state+0x64>
	case Right:
		strcpy((char*) g_ESP.response, right_response);
 80043b8:	4b14      	ldr	r3, [pc, #80]	@ (800440c <update_website_movement_state+0x9c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4619      	mov	r1, r3
 80043be:	4811      	ldr	r0, [pc, #68]	@ (8004404 <update_website_movement_state+0x94>)
 80043c0:	f007 ff21 	bl	800c206 <strcpy>
		break;
 80043c4:	e006      	b.n	80043d4 <update_website_movement_state+0x64>
	case Stop:
		strcpy((char*) g_ESP.response, stop_response);
 80043c6:	4b12      	ldr	r3, [pc, #72]	@ (8004410 <update_website_movement_state+0xa0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4619      	mov	r1, r3
 80043cc:	480d      	ldr	r0, [pc, #52]	@ (8004404 <update_website_movement_state+0x94>)
 80043ce:	f007 ff1a 	bl	800c206 <strcpy>
		break;
 80043d2:	bf00      	nop
	}

	// possible race conditions
	sprintf(g_ESP.website_command, "AT+CIPSEND=%d,2\r\n", connection_id);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	490f      	ldr	r1, [pc, #60]	@ (8004414 <update_website_movement_state+0xa4>)
 80043d8:	480f      	ldr	r0, [pc, #60]	@ (8004418 <update_website_movement_state+0xa8>)
 80043da:	f007 fd27 	bl	800be2c <siprintf>
	g_UART1_tx.buffer_start = g_ESP.website_command;
 80043de:	4b0f      	ldr	r3, [pc, #60]	@ (800441c <update_website_movement_state+0xac>)
 80043e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004418 <update_website_movement_state+0xa8>)
 80043e2:	615a      	str	r2, [r3, #20]
	g_UART1_tx.data_size = strlen(g_ESP.website_command);
 80043e4:	480c      	ldr	r0, [pc, #48]	@ (8004418 <update_website_movement_state+0xa8>)
 80043e6:	f7fb ff4b 	bl	8000280 <strlen>
 80043ea:	4603      	mov	r3, r0
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <update_website_movement_state+0xac>)
 80043f0:	80da      	strh	r2, [r3, #6]
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20002254 	.word	0x20002254
 8004400:	2000224c 	.word	0x2000224c
 8004404:	20002149 	.word	0x20002149
 8004408:	20002244 	.word	0x20002244
 800440c:	20002248 	.word	0x20002248
 8004410:	20002250 	.word	0x20002250
 8004414:	0800fef8 	.word	0x0800fef8
 8004418:	20002134 	.word	0x20002134
 800441c:	20002078 	.word	0x20002078

08004420 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004426:	4b0f      	ldr	r3, [pc, #60]	@ (8004464 <HAL_MspInit+0x44>)
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	4a0e      	ldr	r2, [pc, #56]	@ (8004464 <HAL_MspInit+0x44>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6193      	str	r3, [r2, #24]
 8004432:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_MspInit+0x44>)
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	4b09      	ldr	r3, [pc, #36]	@ (8004464 <HAL_MspInit+0x44>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <HAL_MspInit+0x44>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004448:	61d3      	str	r3, [r2, #28]
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <HAL_MspInit+0x44>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000

08004468 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	@ 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <HAL_I2C_MspInit+0x7c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d128      	bne.n	80044dc <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800448a:	4b17      	ldr	r3, [pc, #92]	@ (80044e8 <HAL_I2C_MspInit+0x80>)
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <HAL_I2C_MspInit+0x80>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004494:	6153      	str	r3, [r2, #20]
 8004496:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <HAL_I2C_MspInit+0x80>)
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80044a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a8:	2312      	movs	r3, #18
 80044aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044b0:	2303      	movs	r3, #3
 80044b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044b4:	2304      	movs	r3, #4
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b8:	f107 0314 	add.w	r3, r7, #20
 80044bc:	4619      	mov	r1, r3
 80044be:	480b      	ldr	r0, [pc, #44]	@ (80044ec <HAL_I2C_MspInit+0x84>)
 80044c0:	f000 ff2e 	bl	8005320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044c4:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <HAL_I2C_MspInit+0x80>)
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	4a07      	ldr	r2, [pc, #28]	@ (80044e8 <HAL_I2C_MspInit+0x80>)
 80044ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80044ce:	61d3      	str	r3, [r2, #28]
 80044d0:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <HAL_I2C_MspInit+0x80>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80044dc:	bf00      	nop
 80044de:	3728      	adds	r7, #40	@ 0x28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40005400 	.word	0x40005400
 80044e8:	40021000 	.word	0x40021000
 80044ec:	48000400 	.word	0x48000400

080044f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	@ 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_SPI_MspInit+0x8c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d130      	bne.n	8004574 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004512:	4b1b      	ldr	r3, [pc, #108]	@ (8004580 <HAL_SPI_MspInit+0x90>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4a1a      	ldr	r2, [pc, #104]	@ (8004580 <HAL_SPI_MspInit+0x90>)
 8004518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800451c:	61d3      	str	r3, [r2, #28]
 800451e:	4b18      	ldr	r3, [pc, #96]	@ (8004580 <HAL_SPI_MspInit+0x90>)
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800452a:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <HAL_SPI_MspInit+0x90>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <HAL_SPI_MspInit+0x90>)
 8004530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004534:	6153      	str	r3, [r2, #20]
 8004536:	4b12      	ldr	r3, [pc, #72]	@ (8004580 <HAL_SPI_MspInit+0x90>)
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004542:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8004546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004548:	2302      	movs	r3, #2
 800454a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004550:	2303      	movs	r3, #3
 8004552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004554:	2305      	movs	r3, #5
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004558:	f107 0314 	add.w	r3, r7, #20
 800455c:	4619      	mov	r1, r3
 800455e:	4809      	ldr	r0, [pc, #36]	@ (8004584 <HAL_SPI_MspInit+0x94>)
 8004560:	f000 fede 	bl	8005320 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	2100      	movs	r1, #0
 8004568:	2024      	movs	r0, #36	@ 0x24
 800456a:	f000 fc68 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800456e:	2024      	movs	r0, #36	@ 0x24
 8004570:	f000 fc81 	bl	8004e76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004574:	bf00      	nop
 8004576:	3728      	adds	r7, #40	@ 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40003800 	.word	0x40003800
 8004580:	40021000 	.word	0x40021000
 8004584:	48000400 	.word	0x48000400

08004588 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0a      	ldr	r2, [pc, #40]	@ (80045c0 <HAL_TIM_Base_MspInit+0x38>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d10b      	bne.n	80045b2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <HAL_TIM_Base_MspInit+0x3c>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4a09      	ldr	r2, [pc, #36]	@ (80045c4 <HAL_TIM_Base_MspInit+0x3c>)
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	61d3      	str	r3, [r2, #28]
 80045a6:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <HAL_TIM_Base_MspInit+0x3c>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 030c 	add.w	r3, r7, #12
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a11      	ldr	r2, [pc, #68]	@ (800462c <HAL_TIM_MspPostInit+0x64>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d11b      	bne.n	8004622 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ea:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <HAL_TIM_MspPostInit+0x68>)
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	4a10      	ldr	r2, [pc, #64]	@ (8004630 <HAL_TIM_MspPostInit+0x68>)
 80045f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045f4:	6153      	str	r3, [r2, #20]
 80045f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004630 <HAL_TIM_MspPostInit+0x68>)
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8004602:	2311      	movs	r3, #17
 8004604:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004606:	2302      	movs	r3, #2
 8004608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004612:	2302      	movs	r3, #2
 8004614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004616:	f107 030c 	add.w	r3, r7, #12
 800461a:	4619      	mov	r1, r3
 800461c:	4805      	ldr	r0, [pc, #20]	@ (8004634 <HAL_TIM_MspPostInit+0x6c>)
 800461e:	f000 fe7f 	bl	8005320 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004622:	bf00      	nop
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40000400 	.word	0x40000400
 8004630:	40021000 	.word	0x40021000
 8004634:	48000400 	.word	0x48000400

08004638 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08c      	sub	sp, #48	@ 0x30
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	f107 031c 	add.w	r3, r7, #28
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a83      	ldr	r2, [pc, #524]	@ (8004864 <HAL_UART_MspInit+0x22c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d17e      	bne.n	8004758 <HAL_UART_MspInit+0x120>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800465a:	4b83      	ldr	r3, [pc, #524]	@ (8004868 <HAL_UART_MspInit+0x230>)
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	4a82      	ldr	r2, [pc, #520]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004664:	6193      	str	r3, [r2, #24]
 8004666:	4b80      	ldr	r3, [pc, #512]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004672:	4b7d      	ldr	r3, [pc, #500]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	4a7c      	ldr	r2, [pc, #496]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467c:	6153      	str	r3, [r2, #20]
 800467e:	4b7a      	ldr	r3, [pc, #488]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800468a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800468e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004698:	2303      	movs	r3, #3
 800469a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800469c:	2307      	movs	r3, #7
 800469e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a0:	f107 031c 	add.w	r3, r7, #28
 80046a4:	4619      	mov	r1, r3
 80046a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046aa:	f000 fe39 	bl	8005320 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80046ae:	4b6f      	ldr	r3, [pc, #444]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046b0:	4a6f      	ldr	r2, [pc, #444]	@ (8004870 <HAL_UART_MspInit+0x238>)
 80046b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046b4:	4b6d      	ldr	r3, [pc, #436]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046ba:	4b6c      	ldr	r3, [pc, #432]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046c0:	4b6a      	ldr	r3, [pc, #424]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046c2:	2280      	movs	r2, #128	@ 0x80
 80046c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046c6:	4b69      	ldr	r3, [pc, #420]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046cc:	4b67      	ldr	r3, [pc, #412]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80046d2:	4b66      	ldr	r3, [pc, #408]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046d8:	4b64      	ldr	r3, [pc, #400]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046de:	4863      	ldr	r0, [pc, #396]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046e0:	f000 fbe3 	bl	8004eaa <HAL_DMA_Init>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80046ea:	f7fe fbd7 	bl	8002e9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a5e      	ldr	r2, [pc, #376]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046f2:	675a      	str	r2, [r3, #116]	@ 0x74
 80046f4:	4a5d      	ldr	r2, [pc, #372]	@ (800486c <HAL_UART_MspInit+0x234>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80046fa:	4b5e      	ldr	r3, [pc, #376]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 80046fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004878 <HAL_UART_MspInit+0x240>)
 80046fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004700:	4b5c      	ldr	r3, [pc, #368]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 8004702:	2210      	movs	r2, #16
 8004704:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004706:	4b5b      	ldr	r3, [pc, #364]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 8004708:	2200      	movs	r2, #0
 800470a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800470c:	4b59      	ldr	r3, [pc, #356]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 800470e:	2280      	movs	r2, #128	@ 0x80
 8004710:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004712:	4b58      	ldr	r3, [pc, #352]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004718:	4b56      	ldr	r3, [pc, #344]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 800471a:	2200      	movs	r2, #0
 800471c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800471e:	4b55      	ldr	r3, [pc, #340]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004724:	4b53      	ldr	r3, [pc, #332]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800472a:	4852      	ldr	r0, [pc, #328]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 800472c:	f000 fbbd 	bl	8004eaa <HAL_DMA_Init>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8004736:	f7fe fbb1 	bl	8002e9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a4d      	ldr	r2, [pc, #308]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 800473e:	671a      	str	r2, [r3, #112]	@ 0x70
 8004740:	4a4c      	ldr	r2, [pc, #304]	@ (8004874 <HAL_UART_MspInit+0x23c>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	2100      	movs	r1, #0
 800474a:	2025      	movs	r0, #37	@ 0x25
 800474c:	f000 fb77 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004750:	2025      	movs	r0, #37	@ 0x25
 8004752:	f000 fb90 	bl	8004e76 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8004756:	e081      	b.n	800485c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a47      	ldr	r2, [pc, #284]	@ (800487c <HAL_UART_MspInit+0x244>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d17c      	bne.n	800485c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004762:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a40      	ldr	r2, [pc, #256]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476c:	61d3      	str	r3, [r2, #28]
 800476e:	4b3e      	ldr	r3, [pc, #248]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477a:	4b3b      	ldr	r3, [pc, #236]	@ (8004868 <HAL_UART_MspInit+0x230>)
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	4a3a      	ldr	r2, [pc, #232]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004784:	6153      	str	r3, [r2, #20]
 8004786:	4b38      	ldr	r3, [pc, #224]	@ (8004868 <HAL_UART_MspInit+0x230>)
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004792:	230c      	movs	r3, #12
 8004794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004796:	2302      	movs	r3, #2
 8004798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800479e:	2303      	movs	r3, #3
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047a2:	2307      	movs	r3, #7
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a6:	f107 031c 	add.w	r3, r7, #28
 80047aa:	4619      	mov	r1, r3
 80047ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047b0:	f000 fdb6 	bl	8005320 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80047b4:	4b32      	ldr	r3, [pc, #200]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047b6:	4a33      	ldr	r2, [pc, #204]	@ (8004884 <HAL_UART_MspInit+0x24c>)
 80047b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047ba:	4b31      	ldr	r3, [pc, #196]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047bc:	2210      	movs	r2, #16
 80047be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047c8:	2280      	movs	r2, #128	@ 0x80
 80047ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80047d8:	4b29      	ldr	r3, [pc, #164]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047da:	2200      	movs	r2, #0
 80047dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047de:	4b28      	ldr	r3, [pc, #160]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80047e4:	4826      	ldr	r0, [pc, #152]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047e6:	f000 fb60 	bl	8004eaa <HAL_DMA_Init>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 80047f0:	f7fe fb54 	bl	8002e9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a22      	ldr	r2, [pc, #136]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80047fa:	4a21      	ldr	r2, [pc, #132]	@ (8004880 <HAL_UART_MspInit+0x248>)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004800:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <HAL_UART_MspInit+0x250>)
 8004802:	4a22      	ldr	r2, [pc, #136]	@ (800488c <HAL_UART_MspInit+0x254>)
 8004804:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_UART_MspInit+0x250>)
 8004808:	2200      	movs	r2, #0
 800480a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800480c:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <HAL_UART_MspInit+0x250>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004812:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <HAL_UART_MspInit+0x250>)
 8004814:	2280      	movs	r2, #128	@ 0x80
 8004816:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <HAL_UART_MspInit+0x250>)
 800481a:	2200      	movs	r2, #0
 800481c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800481e:	4b1a      	ldr	r3, [pc, #104]	@ (8004888 <HAL_UART_MspInit+0x250>)
 8004820:	2200      	movs	r2, #0
 8004822:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004824:	4b18      	ldr	r3, [pc, #96]	@ (8004888 <HAL_UART_MspInit+0x250>)
 8004826:	2200      	movs	r2, #0
 8004828:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800482a:	4b17      	ldr	r3, [pc, #92]	@ (8004888 <HAL_UART_MspInit+0x250>)
 800482c:	2200      	movs	r2, #0
 800482e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004830:	4815      	ldr	r0, [pc, #84]	@ (8004888 <HAL_UART_MspInit+0x250>)
 8004832:	f000 fb3a 	bl	8004eaa <HAL_DMA_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_UART_MspInit+0x208>
      Error_Handler();
 800483c:	f7fe fb2e 	bl	8002e9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a11      	ldr	r2, [pc, #68]	@ (8004888 <HAL_UART_MspInit+0x250>)
 8004844:	675a      	str	r2, [r3, #116]	@ 0x74
 8004846:	4a10      	ldr	r2, [pc, #64]	@ (8004888 <HAL_UART_MspInit+0x250>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800484c:	2200      	movs	r2, #0
 800484e:	2100      	movs	r1, #0
 8004850:	2026      	movs	r0, #38	@ 0x26
 8004852:	f000 faf4 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004856:	2026      	movs	r0, #38	@ 0x26
 8004858:	f000 fb0d 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 800485c:	bf00      	nop
 800485e:	3730      	adds	r7, #48	@ 0x30
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40013800 	.word	0x40013800
 8004868:	40021000 	.word	0x40021000
 800486c:	200028ac 	.word	0x200028ac
 8004870:	40020058 	.word	0x40020058
 8004874:	200028f0 	.word	0x200028f0
 8004878:	40020044 	.word	0x40020044
 800487c:	40004400 	.word	0x40004400
 8004880:	20002934 	.word	0x20002934
 8004884:	40020080 	.word	0x40020080
 8004888:	20002978 	.word	0x20002978
 800488c:	4002006c 	.word	0x4002006c

08004890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <NMI_Handler+0x4>

08004898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <HardFault_Handler+0x4>

080048a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <MemManage_Handler+0x4>

080048a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <BusFault_Handler+0x4>

080048b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <UsageFault_Handler+0x4>

080048b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048bc:	bf00      	nop
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048c6:	b480      	push	{r7}
 80048c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048e6:	f000 f98b 	bl	8004c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}

080048ee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_VCW_Pin);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f000 fee8 	bl	80056c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_VCW_Pin);
 8004900:	2002      	movs	r0, #2
 8004902:	f000 fee1 	bl	80056c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004910:	4802      	ldr	r0, [pc, #8]	@ (800491c <DMA1_Channel4_IRQHandler+0x10>)
 8004912:	f000 fbec 	bl	80050ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200028f0 	.word	0x200028f0

08004920 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004924:	4802      	ldr	r0, [pc, #8]	@ (8004930 <DMA1_Channel5_IRQHandler+0x10>)
 8004926:	f000 fbe2 	bl	80050ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200028ac 	.word	0x200028ac

08004934 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004938:	4802      	ldr	r0, [pc, #8]	@ (8004944 <DMA1_Channel6_IRQHandler+0x10>)
 800493a:	f000 fbd8 	bl	80050ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20002978 	.word	0x20002978

08004948 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800494c:	4802      	ldr	r0, [pc, #8]	@ (8004958 <DMA1_Channel7_IRQHandler+0x10>)
 800494e:	f000 fbce 	bl	80050ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20002934 	.word	0x20002934

0800495c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004960:	4802      	ldr	r0, [pc, #8]	@ (800496c <SPI2_IRQHandler+0x10>)
 8004962:	f003 fa15 	bl	8007d90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200026ec 	.word	0x200026ec

08004970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004974:	4802      	ldr	r0, [pc, #8]	@ (8004980 <USART1_IRQHandler+0x10>)
 8004976:	f005 faed 	bl	8009f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	2000279c 	.word	0x2000279c

08004984 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004988:	4802      	ldr	r0, [pc, #8]	@ (8004994 <USART2_IRQHandler+0x10>)
 800498a:	f005 fae3 	bl	8009f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20002824 	.word	0x20002824

08004998 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_B1_Pin);
 800499c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80049a0:	f000 fe92 	bl	80056c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return 1;
 80049ac:	2301      	movs	r3, #1
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <_kill>:

int _kill(int pid, int sig)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049c2:	f007 fbf3 	bl	800c1ac <__errno>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2216      	movs	r2, #22
 80049ca:	601a      	str	r2, [r3, #0]
  return -1;
 80049cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <_exit>:

void _exit (int status)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049e0:	f04f 31ff 	mov.w	r1, #4294967295
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ffe7 	bl	80049b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80049ea:	bf00      	nop
 80049ec:	e7fd      	b.n	80049ea <_exit+0x12>

080049ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e00a      	b.n	8004a16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a00:	f3af 8000 	nop.w
 8004a04:	4601      	mov	r1, r0
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	60ba      	str	r2, [r7, #8]
 8004a0c:	b2ca      	uxtb	r2, r1
 8004a0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3301      	adds	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	dbf0      	blt.n	8004a00 <_read+0x12>
  }

  return len;
 8004a1e:	687b      	ldr	r3, [r7, #4]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a50:	605a      	str	r2, [r3, #4]
  return 0;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <_isatty>:

int _isatty(int file)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a68:	2301      	movs	r3, #1
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a98:	4a14      	ldr	r2, [pc, #80]	@ (8004aec <_sbrk+0x5c>)
 8004a9a:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <_sbrk+0x60>)
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004aa4:	4b13      	ldr	r3, [pc, #76]	@ (8004af4 <_sbrk+0x64>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004aac:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <_sbrk+0x64>)
 8004aae:	4a12      	ldr	r2, [pc, #72]	@ (8004af8 <_sbrk+0x68>)
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <_sbrk+0x64>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d207      	bcs.n	8004ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ac0:	f007 fb74 	bl	800c1ac <__errno>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	220c      	movs	r2, #12
 8004ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ace:	e009      	b.n	8004ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ad0:	4b08      	ldr	r3, [pc, #32]	@ (8004af4 <_sbrk+0x64>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ad6:	4b07      	ldr	r3, [pc, #28]	@ (8004af4 <_sbrk+0x64>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	4a05      	ldr	r2, [pc, #20]	@ (8004af4 <_sbrk+0x64>)
 8004ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20010000 	.word	0x20010000
 8004af0:	00000400 	.word	0x00000400
 8004af4:	200029c8 	.word	0x200029c8
 8004af8:	20002b20 	.word	0x20002b20

08004afc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b00:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <SystemInit+0x20>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	4a05      	ldr	r2, [pc, #20]	@ (8004b1c <SystemInit+0x20>)
 8004b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b24:	f7ff ffea 	bl	8004afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b28:	480c      	ldr	r0, [pc, #48]	@ (8004b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8004b2a:	490d      	ldr	r1, [pc, #52]	@ (8004b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b64 <LoopForever+0xe>)
  movs r3, #0
 8004b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b30:	e002      	b.n	8004b38 <LoopCopyDataInit>

08004b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b36:	3304      	adds	r3, #4

08004b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b3c:	d3f9      	bcc.n	8004b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b40:	4c0a      	ldr	r4, [pc, #40]	@ (8004b6c <LoopForever+0x16>)
  movs r3, #0
 8004b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b44:	e001      	b.n	8004b4a <LoopFillZerobss>

08004b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b48:	3204      	adds	r2, #4

08004b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b4c:	d3fb      	bcc.n	8004b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b4e:	f007 fb33 	bl	800c1b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b52:	f7fd fe2d 	bl	80027b0 <main>

08004b56 <LoopForever>:

LoopForever:
    b LoopForever
 8004b56:	e7fe      	b.n	8004b56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b60:	20002674 	.word	0x20002674
  ldr r2, =_sidata
 8004b64:	08010324 	.word	0x08010324
  ldr r2, =_sbss
 8004b68:	20002674 	.word	0x20002674
  ldr r4, =_ebss
 8004b6c:	20002b1c 	.word	0x20002b1c

08004b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b70:	e7fe      	b.n	8004b70 <ADC1_2_IRQHandler>
	...

08004b74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b78:	4b08      	ldr	r3, [pc, #32]	@ (8004b9c <HAL_Init+0x28>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a07      	ldr	r2, [pc, #28]	@ (8004b9c <HAL_Init+0x28>)
 8004b7e:	f043 0310 	orr.w	r3, r3, #16
 8004b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b84:	2003      	movs	r0, #3
 8004b86:	f000 f94f 	bl	8004e28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b8a:	200f      	movs	r0, #15
 8004b8c:	f000 f808 	bl	8004ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b90:	f7ff fc46 	bl	8004420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40022000 	.word	0x40022000

08004ba0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ba8:	4b12      	ldr	r3, [pc, #72]	@ (8004bf4 <HAL_InitTick+0x54>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <HAL_InitTick+0x58>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f967 	bl	8004e92 <HAL_SYSTICK_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e00e      	b.n	8004bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b0f      	cmp	r3, #15
 8004bd2:	d80a      	bhi.n	8004bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	f000 f92f 	bl	8004e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004be0:	4a06      	ldr	r2, [pc, #24]	@ (8004bfc <HAL_InitTick+0x5c>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200024a0 	.word	0x200024a0
 8004bf8:	200024a8 	.word	0x200024a8
 8004bfc:	200024a4 	.word	0x200024a4

08004c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <HAL_IncTick+0x20>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_IncTick+0x24>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4413      	add	r3, r2
 8004c10:	4a04      	ldr	r2, [pc, #16]	@ (8004c24 <HAL_IncTick+0x24>)
 8004c12:	6013      	str	r3, [r2, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	200024a8 	.word	0x200024a8
 8004c24:	200029cc 	.word	0x200029cc

08004c28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8004c2c:	4b03      	ldr	r3, [pc, #12]	@ (8004c3c <HAL_GetTick+0x14>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	200029cc 	.word	0x200029cc

08004c40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c48:	f7ff ffee 	bl	8004c28 <HAL_GetTick>
 8004c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d005      	beq.n	8004c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <HAL_Delay+0x44>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004c66:	bf00      	nop
 8004c68:	f7ff ffde 	bl	8004c28 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d8f7      	bhi.n	8004c68 <HAL_Delay+0x28>
  {
  }
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200024a8 	.word	0x200024a8

08004c88 <__NVIC_SetPriorityGrouping>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c98:	4b0c      	ldr	r3, [pc, #48]	@ (8004ccc <__NVIC_SetPriorityGrouping+0x44>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cba:	4a04      	ldr	r2, [pc, #16]	@ (8004ccc <__NVIC_SetPriorityGrouping+0x44>)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	60d3      	str	r3, [r2, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <__NVIC_GetPriorityGrouping>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd4:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 0307 	and.w	r3, r3, #7
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	e000ed00 	.word	0xe000ed00

08004cec <__NVIC_EnableIRQ>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db0b      	blt.n	8004d16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	f003 021f 	and.w	r2, r3, #31
 8004d04:	4907      	ldr	r1, [pc, #28]	@ (8004d24 <__NVIC_EnableIRQ+0x38>)
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	e000e100 	.word	0xe000e100

08004d28 <__NVIC_SetPriority>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	6039      	str	r1, [r7, #0]
 8004d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db0a      	blt.n	8004d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	490c      	ldr	r1, [pc, #48]	@ (8004d74 <__NVIC_SetPriority+0x4c>)
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	0112      	lsls	r2, r2, #4
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d50:	e00a      	b.n	8004d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4908      	ldr	r1, [pc, #32]	@ (8004d78 <__NVIC_SetPriority+0x50>)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	0112      	lsls	r2, r2, #4
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	440b      	add	r3, r1
 8004d66:	761a      	strb	r2, [r3, #24]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000e100 	.word	0xe000e100
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <NVIC_EncodePriority>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	@ 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f1c3 0307 	rsb	r3, r3, #7
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	bf28      	it	cs
 8004d9a:	2304      	movcs	r3, #4
 8004d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3304      	adds	r3, #4
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d902      	bls.n	8004dac <NVIC_EncodePriority+0x30>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3b03      	subs	r3, #3
 8004daa:	e000      	b.n	8004dae <NVIC_EncodePriority+0x32>
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	43d9      	mvns	r1, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd4:	4313      	orrs	r3, r2
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3724      	adds	r7, #36	@ 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <SysTick_Config>:
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004df4:	d301      	bcc.n	8004dfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004df6:	2301      	movs	r3, #1
 8004df8:	e00f      	b.n	8004e1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8004e24 <SysTick_Config+0x40>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e02:	210f      	movs	r1, #15
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	f7ff ff8e 	bl	8004d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <SysTick_Config+0x40>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e12:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <SysTick_Config+0x40>)
 8004e14:	2207      	movs	r2, #7
 8004e16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	e000e010 	.word	0xe000e010

08004e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ff29 	bl	8004c88 <__NVIC_SetPriorityGrouping>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	4603      	mov	r3, r0
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e50:	f7ff ff3e 	bl	8004cd0 <__NVIC_GetPriorityGrouping>
 8004e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	6978      	ldr	r0, [r7, #20]
 8004e5c:	f7ff ff8e 	bl	8004d7c <NVIC_EncodePriority>
 8004e60:	4602      	mov	r2, r0
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff ff5d 	bl	8004d28 <__NVIC_SetPriority>
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff31 	bl	8004cec <__NVIC_EnableIRQ>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ffa2 	bl	8004de4 <SysTick_Config>
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e037      	b.n	8004f30 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ed6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004eda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f9c8 	bl	80052a8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_DMA_Start_IT+0x20>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e04a      	b.n	8004fee <HAL_DMA_Start_IT+0xb6>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d13a      	bne.n	8004fe0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f95c 	bl	800524c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 020e 	orr.w	r2, r2, #14
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e00f      	b.n	8004fce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 020a 	orr.w	r2, r2, #10
 8004fbc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0204 	bic.w	r2, r2, #4
 8004fcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e005      	b.n	8004fec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e02e      	b.n	8005066 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800500e:	2b02      	cmp	r3, #2
 8005010:	d008      	beq.n	8005024 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2204      	movs	r2, #4
 8005016:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e020      	b.n	8005066 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 020e 	bic.w	r2, r2, #14
 8005032:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504c:	2101      	movs	r1, #1
 800504e:	fa01 f202 	lsl.w	r2, r1, r2
 8005052:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005084:	2b02      	cmp	r3, #2
 8005086:	d005      	beq.n	8005094 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2204      	movs	r2, #4
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e027      	b.n	80050e4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 020e 	bic.w	r2, r2, #14
 80050a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f202 	lsl.w	r2, r1, r2
 80050c2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
    }
  }
  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	2204      	movs	r2, #4
 800510c:	409a      	lsls	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d024      	beq.n	8005160 <HAL_DMA_IRQHandler+0x72>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01f      	beq.n	8005160 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d107      	bne.n	800513e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0204 	bic.w	r2, r2, #4
 800513c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005146:	2104      	movs	r1, #4
 8005148:	fa01 f202 	lsl.w	r2, r1, r2
 800514c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d06a      	beq.n	800522c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800515e:	e065      	b.n	800522c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	2202      	movs	r2, #2
 8005166:	409a      	lsls	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d02c      	beq.n	80051ca <HAL_DMA_IRQHandler+0xdc>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d027      	beq.n	80051ca <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 020a 	bic.w	r2, r2, #10
 8005196:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a8:	2102      	movs	r1, #2
 80051aa:	fa01 f202 	lsl.w	r2, r1, r2
 80051ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d035      	beq.n	800522c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80051c8:	e030      	b.n	800522c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	2208      	movs	r2, #8
 80051d0:	409a      	lsls	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d028      	beq.n	800522c <HAL_DMA_IRQHandler+0x13e>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d023      	beq.n	800522c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 020e 	bic.w	r2, r2, #14
 80051f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	2101      	movs	r1, #1
 80051fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005202:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
    }
  }
}
 800522a:	e7ff      	b.n	800522c <HAL_DMA_IRQHandler+0x13e>
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005262:	2101      	movs	r1, #1
 8005264:	fa01 f202 	lsl.w	r2, r1, r2
 8005268:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b10      	cmp	r3, #16
 8005278:	d108      	bne.n	800528c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800528a:	e007      	b.n	800529c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <DMA_CalcBaseAndBitshift+0x60>)
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d80f      	bhi.n	80052dc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	4b12      	ldr	r3, [pc, #72]	@ (800530c <DMA_CalcBaseAndBitshift+0x64>)
 80052c4:	4413      	add	r3, r2
 80052c6:	4a12      	ldr	r2, [pc, #72]	@ (8005310 <DMA_CalcBaseAndBitshift+0x68>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	009a      	lsls	r2, r3, #2
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005314 <DMA_CalcBaseAndBitshift+0x6c>)
 80052d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80052da:	e00e      	b.n	80052fa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <DMA_CalcBaseAndBitshift+0x70>)
 80052e4:	4413      	add	r3, r2
 80052e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005310 <DMA_CalcBaseAndBitshift+0x68>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	009a      	lsls	r2, r3, #2
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a09      	ldr	r2, [pc, #36]	@ (800531c <DMA_CalcBaseAndBitshift+0x74>)
 80052f8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40020407 	.word	0x40020407
 800530c:	bffdfff8 	.word	0xbffdfff8
 8005310:	cccccccd 	.word	0xcccccccd
 8005314:	40020000 	.word	0x40020000
 8005318:	bffdfbf8 	.word	0xbffdfbf8
 800531c:	40020400 	.word	0x40020400

08005320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800532e:	e160      	b.n	80055f2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	4013      	ands	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8152 	beq.w	80055ec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d005      	beq.n	8005360 <HAL_GPIO_Init+0x40>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d130      	bne.n	80053c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	2203      	movs	r2, #3
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4013      	ands	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005396:	2201      	movs	r2, #1
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43db      	mvns	r3, r3
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4013      	ands	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f003 0201 	and.w	r2, r3, #1
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d017      	beq.n	80053fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	2203      	movs	r2, #3
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4013      	ands	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d123      	bne.n	8005452 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	08da      	lsrs	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3208      	adds	r2, #8
 8005412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005416:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	220f      	movs	r2, #15
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4013      	ands	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	08da      	lsrs	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3208      	adds	r2, #8
 800544c:	6939      	ldr	r1, [r7, #16]
 800544e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	2203      	movs	r2, #3
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4013      	ands	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0203 	and.w	r2, r3, #3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80ac 	beq.w	80055ec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005494:	4b5e      	ldr	r3, [pc, #376]	@ (8005610 <HAL_GPIO_Init+0x2f0>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	4a5d      	ldr	r2, [pc, #372]	@ (8005610 <HAL_GPIO_Init+0x2f0>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6193      	str	r3, [r2, #24]
 80054a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005610 <HAL_GPIO_Init+0x2f0>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054ac:	4a59      	ldr	r2, [pc, #356]	@ (8005614 <HAL_GPIO_Init+0x2f4>)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	3302      	adds	r3, #2
 80054b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	220f      	movs	r2, #15
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80054d6:	d025      	beq.n	8005524 <HAL_GPIO_Init+0x204>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a4f      	ldr	r2, [pc, #316]	@ (8005618 <HAL_GPIO_Init+0x2f8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d01f      	beq.n	8005520 <HAL_GPIO_Init+0x200>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a4e      	ldr	r2, [pc, #312]	@ (800561c <HAL_GPIO_Init+0x2fc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d019      	beq.n	800551c <HAL_GPIO_Init+0x1fc>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005620 <HAL_GPIO_Init+0x300>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_GPIO_Init+0x1f8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005624 <HAL_GPIO_Init+0x304>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00d      	beq.n	8005514 <HAL_GPIO_Init+0x1f4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a4b      	ldr	r2, [pc, #300]	@ (8005628 <HAL_GPIO_Init+0x308>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <HAL_GPIO_Init+0x1f0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a4a      	ldr	r2, [pc, #296]	@ (800562c <HAL_GPIO_Init+0x30c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d101      	bne.n	800550c <HAL_GPIO_Init+0x1ec>
 8005508:	2306      	movs	r3, #6
 800550a:	e00c      	b.n	8005526 <HAL_GPIO_Init+0x206>
 800550c:	2307      	movs	r3, #7
 800550e:	e00a      	b.n	8005526 <HAL_GPIO_Init+0x206>
 8005510:	2305      	movs	r3, #5
 8005512:	e008      	b.n	8005526 <HAL_GPIO_Init+0x206>
 8005514:	2304      	movs	r3, #4
 8005516:	e006      	b.n	8005526 <HAL_GPIO_Init+0x206>
 8005518:	2303      	movs	r3, #3
 800551a:	e004      	b.n	8005526 <HAL_GPIO_Init+0x206>
 800551c:	2302      	movs	r3, #2
 800551e:	e002      	b.n	8005526 <HAL_GPIO_Init+0x206>
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <HAL_GPIO_Init+0x206>
 8005524:	2300      	movs	r3, #0
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	f002 0203 	and.w	r2, r2, #3
 800552c:	0092      	lsls	r2, r2, #2
 800552e:	4093      	lsls	r3, r2
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005536:	4937      	ldr	r1, [pc, #220]	@ (8005614 <HAL_GPIO_Init+0x2f4>)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	3302      	adds	r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005544:	4b3a      	ldr	r3, [pc, #232]	@ (8005630 <HAL_GPIO_Init+0x310>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	43db      	mvns	r3, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4013      	ands	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005568:	4a31      	ldr	r2, [pc, #196]	@ (8005630 <HAL_GPIO_Init+0x310>)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800556e:	4b30      	ldr	r3, [pc, #192]	@ (8005630 <HAL_GPIO_Init+0x310>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43db      	mvns	r3, r3
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4013      	ands	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005592:	4a27      	ldr	r2, [pc, #156]	@ (8005630 <HAL_GPIO_Init+0x310>)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005598:	4b25      	ldr	r3, [pc, #148]	@ (8005630 <HAL_GPIO_Init+0x310>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80055bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005630 <HAL_GPIO_Init+0x310>)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005630 <HAL_GPIO_Init+0x310>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4013      	ands	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80055e6:	4a12      	ldr	r2, [pc, #72]	@ (8005630 <HAL_GPIO_Init+0x310>)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	3301      	adds	r3, #1
 80055f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f47f ae97 	bne.w	8005330 <HAL_GPIO_Init+0x10>
  }
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40021000 	.word	0x40021000
 8005614:	40010000 	.word	0x40010000
 8005618:	48000400 	.word	0x48000400
 800561c:	48000800 	.word	0x48000800
 8005620:	48000c00 	.word	0x48000c00
 8005624:	48001000 	.word	0x48001000
 8005628:	48001400 	.word	0x48001400
 800562c:	48001800 	.word	0x48001800
 8005630:	40010400 	.word	0x40010400

08005634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	887b      	ldrh	r3, [r7, #2]
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e001      	b.n	8005656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	807b      	strh	r3, [r7, #2]
 8005670:	4613      	mov	r3, r2
 8005672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005674:	787b      	ldrb	r3, [r7, #1]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800567a:	887a      	ldrh	r2, [r7, #2]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005680:	e002      	b.n	8005688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005682:	887a      	ldrh	r2, [r7, #2]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056a6:	887a      	ldrh	r2, [r7, #2]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4013      	ands	r3, r2
 80056ac:	041a      	lsls	r2, r3, #16
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	43d9      	mvns	r1, r3
 80056b2:	887b      	ldrh	r3, [r7, #2]
 80056b4:	400b      	ands	r3, r1
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	619a      	str	r2, [r3, #24]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80056d2:	4b08      	ldr	r3, [pc, #32]	@ (80056f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	4013      	ands	r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d006      	beq.n	80056ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056de:	4a05      	ldr	r2, [pc, #20]	@ (80056f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fb fab6 	bl	8000c58 <HAL_GPIO_EXTI_Callback>
  }
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40010400 	.word	0x40010400

080056f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e08d      	b.n	8005826 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fe fea2 	bl	8004468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2224      	movs	r2, #36	@ 0x24
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0201 	bic.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d107      	bne.n	8005772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	e006      	b.n	8005780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800577e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d108      	bne.n	800579a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	e007      	b.n	80057aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69d9      	ldr	r1, [r3, #28]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1a      	ldr	r2, [r3, #32]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af02      	add	r7, sp, #8
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	461a      	mov	r2, r3
 800583c:	460b      	mov	r3, r1
 800583e:	817b      	strh	r3, [r7, #10]
 8005840:	4613      	mov	r3, r2
 8005842:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b20      	cmp	r3, #32
 800584e:	f040 80fd 	bne.w	8005a4c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_I2C_Master_Transmit+0x30>
 800585c:	2302      	movs	r3, #2
 800585e:	e0f6      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x21e>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005868:	f7ff f9de 	bl	8004c28 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	2319      	movs	r3, #25
 8005874:	2201      	movs	r2, #1
 8005876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f914 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0e1      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2221      	movs	r2, #33	@ 0x21
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2210      	movs	r2, #16
 8005896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	893a      	ldrh	r2, [r7, #8]
 80058aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2bff      	cmp	r3, #255	@ 0xff
 80058ba:	d906      	bls.n	80058ca <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	22ff      	movs	r2, #255	@ 0xff
 80058c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80058c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e007      	b.n	80058da <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80058d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d024      	beq.n	800592c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005916:	b2db      	uxtb	r3, r3
 8005918:	3301      	adds	r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	8979      	ldrh	r1, [r7, #10]
 800591e:	4b4e      	ldr	r3, [pc, #312]	@ (8005a58 <HAL_I2C_Master_Transmit+0x228>)
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 fa83 	bl	8005e30 <I2C_TransferConfig>
 800592a:	e066      	b.n	80059fa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005930:	b2da      	uxtb	r2, r3
 8005932:	8979      	ldrh	r1, [r7, #10]
 8005934:	4b48      	ldr	r3, [pc, #288]	@ (8005a58 <HAL_I2C_Master_Transmit+0x228>)
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fa78 	bl	8005e30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005940:	e05b      	b.n	80059fa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	6a39      	ldr	r1, [r7, #32]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f907 	bl	8005b5a <I2C_WaitOnTXISFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e07b      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	781a      	ldrb	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d034      	beq.n	80059fa <HAL_I2C_Master_Transmit+0x1ca>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005994:	2b00      	cmp	r3, #0
 8005996:	d130      	bne.n	80059fa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	2200      	movs	r2, #0
 80059a0:	2180      	movs	r1, #128	@ 0x80
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f880 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e04d      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2bff      	cmp	r3, #255	@ 0xff
 80059ba:	d90e      	bls.n	80059da <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	22ff      	movs	r2, #255	@ 0xff
 80059c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	8979      	ldrh	r1, [r7, #10]
 80059ca:	2300      	movs	r3, #0
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fa2c 	bl	8005e30 <I2C_TransferConfig>
 80059d8:	e00f      	b.n	80059fa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	8979      	ldrh	r1, [r7, #10]
 80059ec:	2300      	movs	r3, #0
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fa1b 	bl	8005e30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d19e      	bne.n	8005942 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	6a39      	ldr	r1, [r7, #32]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f8ed 	bl	8005be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e01a      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a5c <HAL_I2C_Master_Transmit+0x22c>)
 8005a2c:	400b      	ands	r3, r1
 8005a2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e000      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005a4c:	2302      	movs	r3, #2
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	80002000 	.word	0x80002000
 8005a5c:	fe00e800 	.word	0xfe00e800

08005a60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d103      	bne.n	8005a7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d007      	beq.n	8005a9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	619a      	str	r2, [r3, #24]
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab8:	e03b      	b.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f8d6 	bl	8005c70 <I2C_IsErrorOccurred>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e041      	b.n	8005b52 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d02d      	beq.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7ff f8a7 	bl	8004c28 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <I2C_WaitOnFlagUntilTimeout+0x44>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d122      	bne.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d113      	bne.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	f043 0220 	orr.w	r2, r3, #32
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e00f      	b.n	8005b52 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d0b4      	beq.n	8005aba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b66:	e033      	b.n	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f87f 	bl	8005c70 <I2C_IsErrorOccurred>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e031      	b.n	8005be0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d025      	beq.n	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b84:	f7ff f850 	bl	8004c28 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d302      	bcc.n	8005b9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d11a      	bne.n	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d013      	beq.n	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bac:	f043 0220 	orr.w	r2, r3, #32
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e007      	b.n	8005be0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d1c4      	bne.n	8005b68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bf4:	e02f      	b.n	8005c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f838 	bl	8005c70 <I2C_IsErrorOccurred>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e02d      	b.n	8005c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0a:	f7ff f80d 	bl	8004c28 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11a      	bne.n	8005c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d013      	beq.n	8005c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	f043 0220 	orr.w	r2, r3, #32
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e007      	b.n	8005c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d1c8      	bne.n	8005bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	@ 0x28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d068      	beq.n	8005d6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ca4:	e049      	b.n	8005d3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d045      	beq.n	8005d3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cae:	f7fe ffbb 	bl	8004c28 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d302      	bcc.n	8005cc4 <I2C_IsErrorOccurred+0x54>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d13a      	bne.n	8005d3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce6:	d121      	bne.n	8005d2c <I2C_IsErrorOccurred+0xbc>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cee:	d01d      	beq.n	8005d2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d01a      	beq.n	8005d2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d06:	f7fe ff8f 	bl	8004c28 <HAL_GetTick>
 8005d0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d0c:	e00e      	b.n	8005d2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d0e:	f7fe ff8b 	bl	8004c28 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b19      	cmp	r3, #25
 8005d1a:	d907      	bls.n	8005d2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f043 0320 	orr.w	r3, r3, #32
 8005d22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005d2a:	e006      	b.n	8005d3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d1e9      	bne.n	8005d0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d003      	beq.n	8005d50 <I2C_IsErrorOccurred+0xe0>
 8005d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0aa      	beq.n	8005ca6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d103      	bne.n	8005d60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f043 0304 	orr.w	r3, r3, #4
 8005d66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f043 0308 	orr.w	r3, r3, #8
 8005da8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	f043 0302 	orr.w	r3, r3, #2
 8005dca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01c      	beq.n	8005e1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fe3b 	bl	8005a60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6859      	ldr	r1, [r3, #4]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	4b0d      	ldr	r3, [pc, #52]	@ (8005e2c <I2C_IsErrorOccurred+0x1bc>)
 8005df6:	400b      	ands	r3, r1
 8005df8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	431a      	orrs	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3728      	adds	r7, #40	@ 0x28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	fe00e800 	.word	0xfe00e800

08005e30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e42:	897b      	ldrh	r3, [r7, #10]
 8005e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e48:	7a7b      	ldrb	r3, [r7, #9]
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	0d5b      	lsrs	r3, r3, #21
 8005e6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e6e:	4b08      	ldr	r3, [pc, #32]	@ (8005e90 <I2C_TransferConfig+0x60>)
 8005e70:	430b      	orrs	r3, r1
 8005e72:	43db      	mvns	r3, r3
 8005e74:	ea02 0103 	and.w	r1, r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	03ff63ff 	.word	0x03ff63ff

08005e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d138      	bne.n	8005f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e032      	b.n	8005f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2224      	movs	r2, #36	@ 0x24
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d139      	bne.n	8005fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e033      	b.n	8005fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2224      	movs	r2, #36	@ 0x24
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e000      	b.n	8005fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fb4:	2302      	movs	r3, #2
  }
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005fd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f001 b80a 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8161 	beq.w	80062c2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006000:	4bae      	ldr	r3, [pc, #696]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 030c 	and.w	r3, r3, #12
 8006008:	2b04      	cmp	r3, #4
 800600a:	d00c      	beq.n	8006026 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800600c:	4bab      	ldr	r3, [pc, #684]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 030c 	and.w	r3, r3, #12
 8006014:	2b08      	cmp	r3, #8
 8006016:	d157      	bne.n	80060c8 <HAL_RCC_OscConfig+0x104>
 8006018:	4ba8      	ldr	r3, [pc, #672]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006024:	d150      	bne.n	80060c8 <HAL_RCC_OscConfig+0x104>
 8006026:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800602a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006032:	fa93 f3a3 	rbit	r3, r3
 8006036:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800603a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603e:	fab3 f383 	clz	r3, r3
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b3f      	cmp	r3, #63	@ 0x3f
 8006046:	d802      	bhi.n	800604e <HAL_RCC_OscConfig+0x8a>
 8006048:	4b9c      	ldr	r3, [pc, #624]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	e015      	b.n	800607a <HAL_RCC_OscConfig+0xb6>
 800604e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006052:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800605a:	fa93 f3a3 	rbit	r3, r3
 800605e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8006062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006066:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800606a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800606e:	fa93 f3a3 	rbit	r3, r3
 8006072:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8006076:	4b91      	ldr	r3, [pc, #580]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800607e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8006082:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8006086:	fa92 f2a2 	rbit	r2, r2
 800608a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800608e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8006092:	fab2 f282 	clz	r2, r2
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	f042 0220 	orr.w	r2, r2, #32
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	f002 021f 	and.w	r2, r2, #31
 80060a2:	2101      	movs	r1, #1
 80060a4:	fa01 f202 	lsl.w	r2, r1, r2
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 8108 	beq.w	80062c0 <HAL_RCC_OscConfig+0x2fc>
 80060b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f040 80ff 	bne.w	80062c0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f000 bf9b 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d8:	d106      	bne.n	80060e8 <HAL_RCC_OscConfig+0x124>
 80060da:	4b78      	ldr	r3, [pc, #480]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a77      	ldr	r2, [pc, #476]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e036      	b.n	8006156 <HAL_RCC_OscConfig+0x192>
 80060e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10c      	bne.n	8006112 <HAL_RCC_OscConfig+0x14e>
 80060f8:	4b70      	ldr	r3, [pc, #448]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a6f      	ldr	r2, [pc, #444]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 80060fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	4b6d      	ldr	r3, [pc, #436]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6c      	ldr	r2, [pc, #432]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 800610a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e021      	b.n	8006156 <HAL_RCC_OscConfig+0x192>
 8006112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006116:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006122:	d10c      	bne.n	800613e <HAL_RCC_OscConfig+0x17a>
 8006124:	4b65      	ldr	r3, [pc, #404]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a64      	ldr	r2, [pc, #400]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 800612a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	4b62      	ldr	r3, [pc, #392]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a61      	ldr	r2, [pc, #388]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	e00b      	b.n	8006156 <HAL_RCC_OscConfig+0x192>
 800613e:	4b5f      	ldr	r3, [pc, #380]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a5e      	ldr	r2, [pc, #376]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	4b5c      	ldr	r3, [pc, #368]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a5b      	ldr	r2, [pc, #364]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006150:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006154:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800615a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d054      	beq.n	8006210 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006166:	f7fe fd5f 	bl	8004c28 <HAL_GetTick>
 800616a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616e:	e00a      	b.n	8006186 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006170:	f7fe fd5a 	bl	8004c28 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b64      	cmp	r3, #100	@ 0x64
 800617e:	d902      	bls.n	8006186 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	f000 bf3c 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006186:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800618a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8006192:	fa93 f3a3 	rbit	r3, r3
 8006196:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800619a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619e:	fab3 f383 	clz	r3, r3
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80061a6:	d802      	bhi.n	80061ae <HAL_RCC_OscConfig+0x1ea>
 80061a8:	4b44      	ldr	r3, [pc, #272]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	e015      	b.n	80061da <HAL_RCC_OscConfig+0x216>
 80061ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061b2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80061ba:	fa93 f3a3 	rbit	r3, r3
 80061be:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80061c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061c6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80061ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80061ce:	fa93 f3a3 	rbit	r3, r3
 80061d2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80061d6:	4b39      	ldr	r3, [pc, #228]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80061de:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80061e2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80061e6:	fa92 f2a2 	rbit	r2, r2
 80061ea:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80061ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80061f2:	fab2 f282 	clz	r2, r2
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	f042 0220 	orr.w	r2, r2, #32
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	f002 021f 	and.w	r2, r2, #31
 8006202:	2101      	movs	r1, #1
 8006204:	fa01 f202 	lsl.w	r2, r1, r2
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0b0      	beq.n	8006170 <HAL_RCC_OscConfig+0x1ac>
 800620e:	e058      	b.n	80062c2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006210:	f7fe fd0a 	bl	8004c28 <HAL_GetTick>
 8006214:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006218:	e00a      	b.n	8006230 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800621a:	f7fe fd05 	bl	8004c28 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	@ 0x64
 8006228:	d902      	bls.n	8006230 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	f000 bee7 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006230:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006234:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006238:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800623c:	fa93 f3a3 	rbit	r3, r3
 8006240:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8006244:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006248:	fab3 f383 	clz	r3, r3
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006250:	d802      	bhi.n	8006258 <HAL_RCC_OscConfig+0x294>
 8006252:	4b1a      	ldr	r3, [pc, #104]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	e015      	b.n	8006284 <HAL_RCC_OscConfig+0x2c0>
 8006258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800625c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006260:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8006264:	fa93 f3a3 	rbit	r3, r3
 8006268:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800626c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006270:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8006274:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006278:	fa93 f3a3 	rbit	r3, r3
 800627c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8006280:	4b0e      	ldr	r3, [pc, #56]	@ (80062bc <HAL_RCC_OscConfig+0x2f8>)
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006288:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800628c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8006290:	fa92 f2a2 	rbit	r2, r2
 8006294:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8006298:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800629c:	fab2 f282 	clz	r2, r2
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	f042 0220 	orr.w	r2, r2, #32
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	f002 021f 	and.w	r2, r2, #31
 80062ac:	2101      	movs	r1, #1
 80062ae:	fa01 f202 	lsl.w	r2, r1, r2
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1b0      	bne.n	800621a <HAL_RCC_OscConfig+0x256>
 80062b8:	e003      	b.n	80062c2 <HAL_RCC_OscConfig+0x2fe>
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 816d 	beq.w	80065b2 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80062d8:	4bcd      	ldr	r3, [pc, #820]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f003 030c 	and.w	r3, r3, #12
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80062e4:	4bca      	ldr	r3, [pc, #808]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 030c 	and.w	r3, r3, #12
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d16e      	bne.n	80063ce <HAL_RCC_OscConfig+0x40a>
 80062f0:	4bc7      	ldr	r3, [pc, #796]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80062f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062fc:	d167      	bne.n	80063ce <HAL_RCC_OscConfig+0x40a>
 80062fe:	2302      	movs	r3, #2
 8006300:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006304:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8006308:	fa93 f3a3 	rbit	r3, r3
 800630c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8006310:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006314:	fab3 f383 	clz	r3, r3
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b3f      	cmp	r3, #63	@ 0x3f
 800631c:	d802      	bhi.n	8006324 <HAL_RCC_OscConfig+0x360>
 800631e:	4bbc      	ldr	r3, [pc, #752]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	e013      	b.n	800634c <HAL_RCC_OscConfig+0x388>
 8006324:	2302      	movs	r3, #2
 8006326:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800632e:	fa93 f3a3 	rbit	r3, r3
 8006332:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8006336:	2302      	movs	r3, #2
 8006338:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800633c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006340:	fa93 f3a3 	rbit	r3, r3
 8006344:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006348:	4bb1      	ldr	r3, [pc, #708]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	2202      	movs	r2, #2
 800634e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8006352:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8006356:	fa92 f2a2 	rbit	r2, r2
 800635a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800635e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8006362:	fab2 f282 	clz	r2, r2
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	f042 0220 	orr.w	r2, r2, #32
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	f002 021f 	and.w	r2, r2, #31
 8006372:	2101      	movs	r1, #1
 8006374:	fa01 f202 	lsl.w	r2, r1, r2
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_RCC_OscConfig+0x3d0>
 800637e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006382:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d002      	beq.n	8006394 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f000 be35 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006394:	4b9e      	ldr	r3, [pc, #632]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800639c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	21f8      	movs	r1, #248	@ 0xf8
 80063aa:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ae:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80063b2:	fa91 f1a1 	rbit	r1, r1
 80063b6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80063ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80063be:	fab1 f181 	clz	r1, r1
 80063c2:	b2c9      	uxtb	r1, r1
 80063c4:	408b      	lsls	r3, r1
 80063c6:	4992      	ldr	r1, [pc, #584]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063cc:	e0f1      	b.n	80065b2 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8083 	beq.w	80064e6 <HAL_RCC_OscConfig+0x522>
 80063e0:	2301      	movs	r3, #1
 80063e2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80063ea:	fa93 f3a3 	rbit	r3, r3
 80063ee:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80063f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063f6:	fab3 f383 	clz	r3, r3
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006400:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	461a      	mov	r2, r3
 8006408:	2301      	movs	r3, #1
 800640a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7fe fc0c 	bl	8004c28 <HAL_GetTick>
 8006410:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006414:	e00a      	b.n	800642c <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006416:	f7fe fc07 	bl	8004c28 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d902      	bls.n	800642c <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	f000 bde9 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>
 800642c:	2302      	movs	r3, #2
 800642e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006432:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006436:	fa93 f3a3 	rbit	r3, r3
 800643a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800643e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006442:	fab3 f383 	clz	r3, r3
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b3f      	cmp	r3, #63	@ 0x3f
 800644a:	d802      	bhi.n	8006452 <HAL_RCC_OscConfig+0x48e>
 800644c:	4b70      	ldr	r3, [pc, #448]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	e013      	b.n	800647a <HAL_RCC_OscConfig+0x4b6>
 8006452:	2302      	movs	r3, #2
 8006454:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006458:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800645c:	fa93 f3a3 	rbit	r3, r3
 8006460:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8006464:	2302      	movs	r3, #2
 8006466:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800646a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8006476:	4b66      	ldr	r3, [pc, #408]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	2202      	movs	r2, #2
 800647c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8006480:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006484:	fa92 f2a2 	rbit	r2, r2
 8006488:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800648c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8006490:	fab2 f282 	clz	r2, r2
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	f042 0220 	orr.w	r2, r2, #32
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	f002 021f 	and.w	r2, r2, #31
 80064a0:	2101      	movs	r1, #1
 80064a2:	fa01 f202 	lsl.w	r2, r1, r2
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0b4      	beq.n	8006416 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ac:	4b58      	ldr	r3, [pc, #352]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80064b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	21f8      	movs	r1, #248	@ 0xf8
 80064c2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80064ca:	fa91 f1a1 	rbit	r1, r1
 80064ce:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80064d2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80064d6:	fab1 f181 	clz	r1, r1
 80064da:	b2c9      	uxtb	r1, r1
 80064dc:	408b      	lsls	r3, r1
 80064de:	494c      	ldr	r1, [pc, #304]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	600b      	str	r3, [r1, #0]
 80064e4:	e065      	b.n	80065b2 <HAL_RCC_OscConfig+0x5ee>
 80064e6:	2301      	movs	r3, #1
 80064e8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80064f0:	fa93 f3a3 	rbit	r3, r3
 80064f4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80064f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064fc:	fab3 f383 	clz	r3, r3
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006506:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	461a      	mov	r2, r3
 800650e:	2300      	movs	r3, #0
 8006510:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006512:	f7fe fb89 	bl	8004c28 <HAL_GetTick>
 8006516:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651a:	e00a      	b.n	8006532 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800651c:	f7fe fb84 	bl	8004c28 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d902      	bls.n	8006532 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	f000 bd66 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006532:	2302      	movs	r3, #2
 8006534:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006538:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800653c:	fa93 f3a3 	rbit	r3, r3
 8006540:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8006544:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006548:	fab3 f383 	clz	r3, r3
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006550:	d802      	bhi.n	8006558 <HAL_RCC_OscConfig+0x594>
 8006552:	4b2f      	ldr	r3, [pc, #188]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	e013      	b.n	8006580 <HAL_RCC_OscConfig+0x5bc>
 8006558:	2302      	movs	r3, #2
 800655a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006562:	fa93 f3a3 	rbit	r3, r3
 8006566:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800656a:	2302      	movs	r3, #2
 800656c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006570:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006574:	fa93 f3a3 	rbit	r3, r3
 8006578:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800657c:	4b24      	ldr	r3, [pc, #144]	@ (8006610 <HAL_RCC_OscConfig+0x64c>)
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	2202      	movs	r2, #2
 8006582:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8006586:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800658a:	fa92 f2a2 	rbit	r2, r2
 800658e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8006592:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006596:	fab2 f282 	clz	r2, r2
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	f042 0220 	orr.w	r2, r2, #32
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	f002 021f 	and.w	r2, r2, #31
 80065a6:	2101      	movs	r1, #1
 80065a8:	fa01 f202 	lsl.w	r2, r1, r2
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1b4      	bne.n	800651c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80065b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 8119 	beq.w	80067fa <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80065cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8082 	beq.w	80066de <HAL_RCC_OscConfig+0x71a>
 80065da:	2301      	movs	r3, #1
 80065dc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	fa93 f3a3 	rbit	r3, r3
 80065e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80065ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065f0:	fab3 f383 	clz	r3, r3
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <HAL_RCC_OscConfig+0x650>)
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	461a      	mov	r2, r3
 8006600:	2301      	movs	r3, #1
 8006602:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006604:	f7fe fb10 	bl	8004c28 <HAL_GetTick>
 8006608:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800660c:	e00f      	b.n	800662e <HAL_RCC_OscConfig+0x66a>
 800660e:	bf00      	nop
 8006610:	40021000 	.word	0x40021000
 8006614:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006618:	f7fe fb06 	bl	8004c28 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d902      	bls.n	800662e <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	f000 bce8 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>
 800662e:	2302      	movs	r3, #2
 8006630:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006638:	fa93 f2a3 	rbit	r2, r3
 800663c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006640:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800664a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800664e:	2202      	movs	r2, #2
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	fa93 f2a3 	rbit	r2, r3
 8006660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800666e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006672:	2202      	movs	r2, #2
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800667a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	fa93 f2a3 	rbit	r2, r3
 8006684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006688:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800668c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800668e:	4bb0      	ldr	r3, [pc, #704]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 8006690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006696:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800669a:	2102      	movs	r1, #2
 800669c:	6019      	str	r1, [r3, #0]
 800669e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	fa93 f1a3 	rbit	r1, r3
 80066ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80066b4:	6019      	str	r1, [r3, #0]
  return result;
 80066b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066ba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	fab3 f383 	clz	r3, r3
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2101      	movs	r1, #1
 80066d2:	fa01 f303 	lsl.w	r3, r1, r3
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d09d      	beq.n	8006618 <HAL_RCC_OscConfig+0x654>
 80066dc:	e08d      	b.n	80067fa <HAL_RCC_OscConfig+0x836>
 80066de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	fa93 f2a3 	rbit	r2, r3
 80066f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066fc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006700:	601a      	str	r2, [r3, #0]
  return result;
 8006702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006706:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800670a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800670c:	fab3 f383 	clz	r3, r3
 8006710:	b2db      	uxtb	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	4b8f      	ldr	r3, [pc, #572]	@ (8006954 <HAL_RCC_OscConfig+0x990>)
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	461a      	mov	r2, r3
 800671c:	2300      	movs	r3, #0
 800671e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006720:	f7fe fa82 	bl	8004c28 <HAL_GetTick>
 8006724:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006728:	e00a      	b.n	8006740 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800672a:	f7fe fa7d 	bl	8004c28 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d902      	bls.n	8006740 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	f000 bc5f 	b.w	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006744:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006748:	2202      	movs	r2, #2
 800674a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006750:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	fa93 f2a3 	rbit	r2, r3
 800675a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800675e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006768:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800676c:	2202      	movs	r2, #2
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006774:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	fa93 f2a3 	rbit	r2, r3
 800677e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006782:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800678c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006790:	2202      	movs	r2, #2
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006798:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	fa93 f2a3 	rbit	r2, r3
 80067a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80067aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067ac:	4b68      	ldr	r3, [pc, #416]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80067ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80067b8:	2102      	movs	r1, #2
 80067ba:	6019      	str	r1, [r3, #0]
 80067bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	fa93 f1a3 	rbit	r1, r3
 80067ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067ce:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80067d2:	6019      	str	r1, [r3, #0]
  return result;
 80067d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	fab3 f383 	clz	r3, r3
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 031f 	and.w	r3, r3, #31
 80067ee:	2101      	movs	r1, #1
 80067f0:	fa01 f303 	lsl.w	r3, r1, r3
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d197      	bne.n	800672a <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 819c 	beq.w	8006b48 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006810:	2300      	movs	r3, #0
 8006812:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006816:	4b4e      	ldr	r3, [pc, #312]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d116      	bne.n	8006850 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006822:	4b4b      	ldr	r3, [pc, #300]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	4a4a      	ldr	r2, [pc, #296]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800682c:	61d3      	str	r3, [r2, #28]
 800682e:	4b48      	ldr	r3, [pc, #288]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800683a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006848:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006850:	4b41      	ldr	r3, [pc, #260]	@ (8006958 <HAL_RCC_OscConfig+0x994>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006858:	2b00      	cmp	r3, #0
 800685a:	d11a      	bne.n	8006892 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800685c:	4b3e      	ldr	r3, [pc, #248]	@ (8006958 <HAL_RCC_OscConfig+0x994>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a3d      	ldr	r2, [pc, #244]	@ (8006958 <HAL_RCC_OscConfig+0x994>)
 8006862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006866:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006868:	f7fe f9de 	bl	8004c28 <HAL_GetTick>
 800686c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006870:	e009      	b.n	8006886 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006872:	f7fe f9d9 	bl	8004c28 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b64      	cmp	r3, #100	@ 0x64
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e3bb      	b.n	8006ffe <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006886:	4b34      	ldr	r3, [pc, #208]	@ (8006958 <HAL_RCC_OscConfig+0x994>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0ef      	beq.n	8006872 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006896:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d106      	bne.n	80068b0 <HAL_RCC_OscConfig+0x8ec>
 80068a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	6213      	str	r3, [r2, #32]
 80068ae:	e035      	b.n	800691c <HAL_RCC_OscConfig+0x958>
 80068b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10c      	bne.n	80068da <HAL_RCC_OscConfig+0x916>
 80068c0:	4b23      	ldr	r3, [pc, #140]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	4a22      	ldr	r2, [pc, #136]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	6213      	str	r3, [r2, #32]
 80068cc:	4b20      	ldr	r3, [pc, #128]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068d2:	f023 0304 	bic.w	r3, r3, #4
 80068d6:	6213      	str	r3, [r2, #32]
 80068d8:	e020      	b.n	800691c <HAL_RCC_OscConfig+0x958>
 80068da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	d10c      	bne.n	8006904 <HAL_RCC_OscConfig+0x940>
 80068ea:	4b19      	ldr	r3, [pc, #100]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	4a18      	ldr	r2, [pc, #96]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068f0:	f043 0304 	orr.w	r3, r3, #4
 80068f4:	6213      	str	r3, [r2, #32]
 80068f6:	4b16      	ldr	r3, [pc, #88]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	4a15      	ldr	r2, [pc, #84]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	6213      	str	r3, [r2, #32]
 8006902:	e00b      	b.n	800691c <HAL_RCC_OscConfig+0x958>
 8006904:	4b12      	ldr	r3, [pc, #72]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	4a11      	ldr	r2, [pc, #68]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 800690a:	f023 0301 	bic.w	r3, r3, #1
 800690e:	6213      	str	r3, [r2, #32]
 8006910:	4b0f      	ldr	r3, [pc, #60]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	4a0e      	ldr	r2, [pc, #56]	@ (8006950 <HAL_RCC_OscConfig+0x98c>)
 8006916:	f023 0304 	bic.w	r3, r3, #4
 800691a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800691c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006920:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8085 	beq.w	8006a38 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800692e:	f7fe f97b 	bl	8004c28 <HAL_GetTick>
 8006932:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006936:	e011      	b.n	800695c <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006938:	f7fe f976 	bl	8004c28 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006948:	4293      	cmp	r3, r2
 800694a:	d907      	bls.n	800695c <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e356      	b.n	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006950:	40021000 	.word	0x40021000
 8006954:	10908120 	.word	0x10908120
 8006958:	40007000 	.word	0x40007000
 800695c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006960:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006964:	2202      	movs	r2, #2
 8006966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800696c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	fa93 f2a3 	rbit	r2, r3
 8006976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800697a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006984:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006988:	2202      	movs	r2, #2
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006990:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	fa93 f2a3 	rbit	r2, r3
 800699a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800699e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80069a2:	601a      	str	r2, [r3, #0]
  return result;
 80069a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80069ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ae:	fab3 f383 	clz	r3, r3
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <HAL_RCC_OscConfig+0xa00>
 80069be:	4b98      	ldr	r3, [pc, #608]	@ (8006c20 <HAL_RCC_OscConfig+0xc5c>)
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	e013      	b.n	80069ec <HAL_RCC_OscConfig+0xa28>
 80069c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069c8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80069cc:	2202      	movs	r2, #2
 80069ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069d4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	fa93 f2a3 	rbit	r2, r3
 80069de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069e2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	4b8d      	ldr	r3, [pc, #564]	@ (8006c20 <HAL_RCC_OscConfig+0xc5c>)
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80069f0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80069f4:	2102      	movs	r1, #2
 80069f6:	6011      	str	r1, [r2, #0]
 80069f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80069fc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	fa92 f1a2 	rbit	r1, r2
 8006a06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006a0a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8006a0e:	6011      	str	r1, [r2, #0]
  return result;
 8006a10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006a14:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	fab2 f282 	clz	r2, r2
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	f002 021f 	and.w	r2, r2, #31
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d080      	beq.n	8006938 <HAL_RCC_OscConfig+0x974>
 8006a36:	e07d      	b.n	8006b34 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a38:	f7fe f8f6 	bl	8004c28 <HAL_GetTick>
 8006a3c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a40:	e00b      	b.n	8006a5a <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a42:	f7fe f8f1 	bl	8004c28 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e2d1      	b.n	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a5e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006a62:	2202      	movs	r2, #2
 8006a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a6a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	fa93 f2a3 	rbit	r2, r3
 8006a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a78:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a82:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006a86:	2202      	movs	r2, #2
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a8e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	fa93 f2a3 	rbit	r2, r3
 8006a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a9c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006aa0:	601a      	str	r2, [r3, #0]
  return result;
 8006aa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006aa6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006aaa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aac:	fab3 f383 	clz	r3, r3
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <HAL_RCC_OscConfig+0xafe>
 8006abc:	4b58      	ldr	r3, [pc, #352]	@ (8006c20 <HAL_RCC_OscConfig+0xc5c>)
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	e013      	b.n	8006aea <HAL_RCC_OscConfig+0xb26>
 8006ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ac6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006aca:	2202      	movs	r2, #2
 8006acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ad2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	fa93 f2a3 	rbit	r2, r3
 8006adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ae0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8006c20 <HAL_RCC_OscConfig+0xc5c>)
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006aee:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006af2:	2102      	movs	r1, #2
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006afa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	fa92 f1a2 	rbit	r1, r2
 8006b04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006b08:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8006b0c:	6011      	str	r1, [r2, #0]
  return result;
 8006b0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006b12:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	fab2 f282 	clz	r2, r2
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	f002 021f 	and.w	r2, r2, #31
 8006b28:	2101      	movs	r1, #1
 8006b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d186      	bne.n	8006a42 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b34:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d105      	bne.n	8006b48 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b3c:	4b38      	ldr	r3, [pc, #224]	@ (8006c20 <HAL_RCC_OscConfig+0xc5c>)
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	4a37      	ldr	r2, [pc, #220]	@ (8006c20 <HAL_RCC_OscConfig+0xc5c>)
 8006b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8251 	beq.w	8006ffc <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b5a:	4b31      	ldr	r3, [pc, #196]	@ (8006c20 <HAL_RCC_OscConfig+0xc5c>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	f000 820f 	beq.w	8006f86 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	f040 8165 	bne.w	8006e44 <HAL_RCC_OscConfig+0xe80>
 8006b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b7e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006b82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b8c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	fa93 f2a3 	rbit	r2, r3
 8006b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b9a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006b9e:	601a      	str	r2, [r3, #0]
  return result;
 8006ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ba4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006ba8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006baa:	fab3 f383 	clz	r3, r3
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006bb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	461a      	mov	r2, r3
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc0:	f7fe f832 	bl	8004c28 <HAL_GetTick>
 8006bc4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bc8:	e009      	b.n	8006bde <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bca:	f7fe f82d 	bl	8004c28 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e20f      	b.n	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006bde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006be2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006be6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006bf0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	fa93 f2a3 	rbit	r2, r3
 8006bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006bfe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006c02:	601a      	str	r2, [r3, #0]
  return result;
 8006c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c08:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006c0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c0e:	fab3 f383 	clz	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c16:	d805      	bhi.n	8006c24 <HAL_RCC_OscConfig+0xc60>
 8006c18:	4b01      	ldr	r3, [pc, #4]	@ (8006c20 <HAL_RCC_OscConfig+0xc5c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	e02a      	b.n	8006c74 <HAL_RCC_OscConfig+0xcb0>
 8006c1e:	bf00      	nop
 8006c20:	40021000 	.word	0x40021000
 8006c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c28:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006c2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c36:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	fa93 f2a3 	rbit	r2, r3
 8006c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c44:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c4e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c5c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	fa93 f2a3 	rbit	r2, r3
 8006c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c6a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	4bca      	ldr	r3, [pc, #808]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006c78:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006c7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006c80:	6011      	str	r1, [r2, #0]
 8006c82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006c86:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	fa92 f1a2 	rbit	r1, r2
 8006c90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006c94:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8006c98:	6011      	str	r1, [r2, #0]
  return result;
 8006c9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006c9e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	fab2 f282 	clz	r2, r2
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	f042 0220 	orr.w	r2, r2, #32
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	f002 021f 	and.w	r2, r2, #31
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d184      	bne.n	8006bca <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cc0:	4bb6      	ldr	r3, [pc, #728]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	f023 020f 	bic.w	r2, r3, #15
 8006cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ccc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd4:	49b1      	ldr	r1, [pc, #708]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006cda:	4bb0      	ldr	r3, [pc, #704]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8006ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ce6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6a19      	ldr	r1, [r3, #32]
 8006cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006cf2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	49a7      	ldr	r1, [pc, #668]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	604b      	str	r3, [r1, #4]
 8006d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d06:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006d0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d14:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	fa93 f2a3 	rbit	r2, r3
 8006d1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d22:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006d26:	601a      	str	r2, [r3, #0]
  return result;
 8006d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d2c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006d30:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d32:	fab3 f383 	clz	r3, r3
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006d3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	461a      	mov	r2, r3
 8006d44:	2301      	movs	r3, #1
 8006d46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d48:	f7fd ff6e 	bl	8004c28 <HAL_GetTick>
 8006d4c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d50:	e009      	b.n	8006d66 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d52:	f7fd ff69 	bl	8004c28 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e14b      	b.n	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d6a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006d6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d78:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	fa93 f2a3 	rbit	r2, r3
 8006d82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d86:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006d8a:	601a      	str	r2, [r3, #0]
  return result;
 8006d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d90:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006d94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d96:	fab3 f383 	clz	r3, r3
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d9e:	d802      	bhi.n	8006da6 <HAL_RCC_OscConfig+0xde2>
 8006da0:	4b7e      	ldr	r3, [pc, #504]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	e027      	b.n	8006df6 <HAL_RCC_OscConfig+0xe32>
 8006da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006daa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006dae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006db8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	fa93 f2a3 	rbit	r2, r3
 8006dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dc6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dd0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006dd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dde:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	fa93 f2a3 	rbit	r2, r3
 8006de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dec:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006dfa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006dfe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006e02:	6011      	str	r1, [r2, #0]
 8006e04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006e08:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	fa92 f1a2 	rbit	r1, r2
 8006e12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006e16:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8006e1a:	6011      	str	r1, [r2, #0]
  return result;
 8006e1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006e20:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	fab2 f282 	clz	r2, r2
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	f042 0220 	orr.w	r2, r2, #32
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	f002 021f 	and.w	r2, r2, #31
 8006e36:	2101      	movs	r1, #1
 8006e38:	fa01 f202 	lsl.w	r2, r1, r2
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d087      	beq.n	8006d52 <HAL_RCC_OscConfig+0xd8e>
 8006e42:	e0db      	b.n	8006ffc <HAL_RCC_OscConfig+0x1038>
 8006e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e48:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006e4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e56:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	fa93 f2a3 	rbit	r2, r3
 8006e60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e64:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006e68:	601a      	str	r2, [r3, #0]
  return result;
 8006e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e6e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006e72:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e74:	fab3 f383 	clz	r3, r3
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006e7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	461a      	mov	r2, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8a:	f7fd fecd 	bl	8004c28 <HAL_GetTick>
 8006e8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e92:	e009      	b.n	8006ea8 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fd fec8 	bl	8004c28 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e0aa      	b.n	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006eac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006eb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006eba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	fa93 f2a3 	rbit	r2, r3
 8006ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ec8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006ecc:	601a      	str	r2, [r3, #0]
  return result;
 8006ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ed2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006ed6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ed8:	fab3 f383 	clz	r3, r3
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ee0:	d802      	bhi.n	8006ee8 <HAL_RCC_OscConfig+0xf24>
 8006ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	e027      	b.n	8006f38 <HAL_RCC_OscConfig+0xf74>
 8006ee8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006eec:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006ef0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006efa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	fa93 f2a3 	rbit	r2, r3
 8006f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f08:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f12:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006f16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f20:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	fa93 f2a3 	rbit	r2, r3
 8006f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f2e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	4b19      	ldr	r3, [pc, #100]	@ (8006f9c <HAL_RCC_OscConfig+0xfd8>)
 8006f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006f3c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006f40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006f44:	6011      	str	r1, [r2, #0]
 8006f46:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006f4a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	fa92 f1a2 	rbit	r1, r2
 8006f54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006f58:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8006f5c:	6011      	str	r1, [r2, #0]
  return result;
 8006f5e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006f62:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	fab2 f282 	clz	r2, r2
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	f042 0220 	orr.w	r2, r2, #32
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	f002 021f 	and.w	r2, r2, #31
 8006f78:	2101      	movs	r1, #1
 8006f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d187      	bne.n	8006e94 <HAL_RCC_OscConfig+0xed0>
 8006f84:	e03a      	b.n	8006ffc <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d104      	bne.n	8006fa0 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e031      	b.n	8006ffe <HAL_RCC_OscConfig+0x103a>
 8006f9a:	bf00      	nop
 8006f9c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fa0:	4b19      	ldr	r3, [pc, #100]	@ (8007008 <HAL_RCC_OscConfig+0x1044>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006fa8:	4b17      	ldr	r3, [pc, #92]	@ (8007008 <HAL_RCC_OscConfig+0x1044>)
 8006faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fac:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006fb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8006fb4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8006fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d117      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006fc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8006fcc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d10b      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006fe4:	f003 020f 	and.w	r2, r3, #15
 8006fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40021000 	.word	0x40021000

0800700c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b09e      	sub	sp, #120	@ 0x78
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e154      	b.n	80072ce <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007024:	4b89      	ldr	r3, [pc, #548]	@ (800724c <HAL_RCC_ClockConfig+0x240>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d910      	bls.n	8007054 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007032:	4b86      	ldr	r3, [pc, #536]	@ (800724c <HAL_RCC_ClockConfig+0x240>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f023 0207 	bic.w	r2, r3, #7
 800703a:	4984      	ldr	r1, [pc, #528]	@ (800724c <HAL_RCC_ClockConfig+0x240>)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	4313      	orrs	r3, r2
 8007040:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007042:	4b82      	ldr	r3, [pc, #520]	@ (800724c <HAL_RCC_ClockConfig+0x240>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d001      	beq.n	8007054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e13c      	b.n	80072ce <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d008      	beq.n	8007072 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007060:	4b7b      	ldr	r3, [pc, #492]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4978      	ldr	r1, [pc, #480]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 800706e:	4313      	orrs	r3, r2
 8007070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 80cd 	beq.w	800721a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d137      	bne.n	80070f8 <HAL_RCC_ClockConfig+0xec>
 8007088:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800708c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007090:	fa93 f3a3 	rbit	r3, r3
 8007094:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007098:	fab3 f383 	clz	r3, r3
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b3f      	cmp	r3, #63	@ 0x3f
 80070a0:	d802      	bhi.n	80070a8 <HAL_RCC_ClockConfig+0x9c>
 80070a2:	4b6b      	ldr	r3, [pc, #428]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	e00f      	b.n	80070c8 <HAL_RCC_ClockConfig+0xbc>
 80070a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80070ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070b0:	fa93 f3a3 	rbit	r3, r3
 80070b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80070b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80070ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80070bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070be:	fa93 f3a3 	rbit	r3, r3
 80070c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070c4:	4b62      	ldr	r3, [pc, #392]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80070cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070d0:	fa92 f2a2 	rbit	r2, r2
 80070d4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80070d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070d8:	fab2 f282 	clz	r2, r2
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	f042 0220 	orr.w	r2, r2, #32
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	f002 021f 	and.w	r2, r2, #31
 80070e8:	2101      	movs	r1, #1
 80070ea:	fa01 f202 	lsl.w	r2, r1, r2
 80070ee:	4013      	ands	r3, r2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d171      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0ea      	b.n	80072ce <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d137      	bne.n	8007170 <HAL_RCC_ClockConfig+0x164>
 8007100:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007104:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007108:	fa93 f3a3 	rbit	r3, r3
 800710c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800710e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007110:	fab3 f383 	clz	r3, r3
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b3f      	cmp	r3, #63	@ 0x3f
 8007118:	d802      	bhi.n	8007120 <HAL_RCC_ClockConfig+0x114>
 800711a:	4b4d      	ldr	r3, [pc, #308]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	e00f      	b.n	8007140 <HAL_RCC_ClockConfig+0x134>
 8007120:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007124:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007128:	fa93 f3a3 	rbit	r3, r3
 800712c:	647b      	str	r3, [r7, #68]	@ 0x44
 800712e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007132:	643b      	str	r3, [r7, #64]	@ 0x40
 8007134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007136:	fa93 f3a3 	rbit	r3, r3
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800713c:	4b44      	ldr	r3, [pc, #272]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007144:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007146:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007148:	fa92 f2a2 	rbit	r2, r2
 800714c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800714e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007150:	fab2 f282 	clz	r2, r2
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	f042 0220 	orr.w	r2, r2, #32
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	f002 021f 	and.w	r2, r2, #31
 8007160:	2101      	movs	r1, #1
 8007162:	fa01 f202 	lsl.w	r2, r1, r2
 8007166:	4013      	ands	r3, r2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d135      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0ae      	b.n	80072ce <HAL_RCC_ClockConfig+0x2c2>
 8007170:	2302      	movs	r3, #2
 8007172:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	fa93 f3a3 	rbit	r3, r3
 800717a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800717c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800717e:	fab3 f383 	clz	r3, r3
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b3f      	cmp	r3, #63	@ 0x3f
 8007186:	d802      	bhi.n	800718e <HAL_RCC_ClockConfig+0x182>
 8007188:	4b31      	ldr	r3, [pc, #196]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	e00d      	b.n	80071aa <HAL_RCC_ClockConfig+0x19e>
 800718e:	2302      	movs	r3, #2
 8007190:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	fa93 f3a3 	rbit	r3, r3
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
 800719a:	2302      	movs	r3, #2
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	fa93 f3a3 	rbit	r3, r3
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	2202      	movs	r2, #2
 80071ac:	61ba      	str	r2, [r7, #24]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	fa92 f2a2 	rbit	r2, r2
 80071b4:	617a      	str	r2, [r7, #20]
  return result;
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	fab2 f282 	clz	r2, r2
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	f042 0220 	orr.w	r2, r2, #32
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	f002 021f 	and.w	r2, r2, #31
 80071c8:	2101      	movs	r1, #1
 80071ca:	fa01 f202 	lsl.w	r2, r1, r2
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e07a      	b.n	80072ce <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f023 0203 	bic.w	r2, r3, #3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	491a      	ldr	r1, [pc, #104]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071ea:	f7fd fd1d 	bl	8004c28 <HAL_GetTick>
 80071ee:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071f0:	e00a      	b.n	8007208 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071f2:	f7fd fd19 	bl	8004c28 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007200:	4293      	cmp	r3, r2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e062      	b.n	80072ce <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007208:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <HAL_RCC_ClockConfig+0x244>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f003 020c 	and.w	r2, r3, #12
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	429a      	cmp	r2, r3
 8007218:	d1eb      	bne.n	80071f2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800721a:	4b0c      	ldr	r3, [pc, #48]	@ (800724c <HAL_RCC_ClockConfig+0x240>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d215      	bcs.n	8007254 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007228:	4b08      	ldr	r3, [pc, #32]	@ (800724c <HAL_RCC_ClockConfig+0x240>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f023 0207 	bic.w	r2, r3, #7
 8007230:	4906      	ldr	r1, [pc, #24]	@ (800724c <HAL_RCC_ClockConfig+0x240>)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	4313      	orrs	r3, r2
 8007236:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007238:	4b04      	ldr	r3, [pc, #16]	@ (800724c <HAL_RCC_ClockConfig+0x240>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d006      	beq.n	8007254 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e041      	b.n	80072ce <HAL_RCC_ClockConfig+0x2c2>
 800724a:	bf00      	nop
 800724c:	40022000 	.word	0x40022000
 8007250:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d008      	beq.n	8007272 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007260:	4b1d      	ldr	r3, [pc, #116]	@ (80072d8 <HAL_RCC_ClockConfig+0x2cc>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	491a      	ldr	r1, [pc, #104]	@ (80072d8 <HAL_RCC_ClockConfig+0x2cc>)
 800726e:	4313      	orrs	r3, r2
 8007270:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d009      	beq.n	8007292 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800727e:	4b16      	ldr	r3, [pc, #88]	@ (80072d8 <HAL_RCC_ClockConfig+0x2cc>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4912      	ldr	r1, [pc, #72]	@ (80072d8 <HAL_RCC_ClockConfig+0x2cc>)
 800728e:	4313      	orrs	r3, r2
 8007290:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007292:	f000 f829 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8007296:	4601      	mov	r1, r0
 8007298:	4b0f      	ldr	r3, [pc, #60]	@ (80072d8 <HAL_RCC_ClockConfig+0x2cc>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072a0:	22f0      	movs	r2, #240	@ 0xf0
 80072a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	fa92 f2a2 	rbit	r2, r2
 80072aa:	60fa      	str	r2, [r7, #12]
  return result;
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	fab2 f282 	clz	r2, r2
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	40d3      	lsrs	r3, r2
 80072b6:	4a09      	ldr	r2, [pc, #36]	@ (80072dc <HAL_RCC_ClockConfig+0x2d0>)
 80072b8:	5cd3      	ldrb	r3, [r2, r3]
 80072ba:	fa21 f303 	lsr.w	r3, r1, r3
 80072be:	4a08      	ldr	r2, [pc, #32]	@ (80072e0 <HAL_RCC_ClockConfig+0x2d4>)
 80072c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80072c2:	4b08      	ldr	r3, [pc, #32]	@ (80072e4 <HAL_RCC_ClockConfig+0x2d8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fd fc6a 	bl	8004ba0 <HAL_InitTick>
  
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3778      	adds	r7, #120	@ 0x78
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	40021000 	.word	0x40021000
 80072dc:	0800ff18 	.word	0x0800ff18
 80072e0:	200024a0 	.word	0x200024a0
 80072e4:	200024a4 	.word	0x200024a4

080072e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	2300      	movs	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007302:	4b1f      	ldr	r3, [pc, #124]	@ (8007380 <HAL_RCC_GetSysClockFreq+0x98>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 030c 	and.w	r3, r3, #12
 800730e:	2b04      	cmp	r3, #4
 8007310:	d002      	beq.n	8007318 <HAL_RCC_GetSysClockFreq+0x30>
 8007312:	2b08      	cmp	r3, #8
 8007314:	d003      	beq.n	800731e <HAL_RCC_GetSysClockFreq+0x36>
 8007316:	e029      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007318:	4b1a      	ldr	r3, [pc, #104]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x9c>)
 800731a:	613b      	str	r3, [r7, #16]
      break;
 800731c:	e029      	b.n	8007372 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	0c9b      	lsrs	r3, r3, #18
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	4a18      	ldr	r2, [pc, #96]	@ (8007388 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007328:	5cd3      	ldrb	r3, [r2, r3]
 800732a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800732c:	4b14      	ldr	r3, [pc, #80]	@ (8007380 <HAL_RCC_GetSysClockFreq+0x98>)
 800732e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	4a15      	ldr	r2, [pc, #84]	@ (800738c <HAL_RCC_GetSysClockFreq+0xa4>)
 8007336:	5cd3      	ldrb	r3, [r2, r3]
 8007338:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007344:	4a0f      	ldr	r2, [pc, #60]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	fbb2 f2f3 	udiv	r2, r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	e007      	b.n	8007366 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007356:	4a0b      	ldr	r2, [pc, #44]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	fbb2 f2f3 	udiv	r2, r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	fb02 f303 	mul.w	r3, r2, r3
 8007364:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	613b      	str	r3, [r7, #16]
      break;
 800736a:	e002      	b.n	8007372 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x9c>)
 800736e:	613b      	str	r3, [r7, #16]
      break;
 8007370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007372:	693b      	ldr	r3, [r7, #16]
}
 8007374:	4618      	mov	r0, r3
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	40021000 	.word	0x40021000
 8007384:	007a1200 	.word	0x007a1200
 8007388:	0800ff30 	.word	0x0800ff30
 800738c:	0800ff40 	.word	0x0800ff40

08007390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007394:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007396:	681b      	ldr	r3, [r3, #0]
}
 8007398:	4618      	mov	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	200024a0 	.word	0x200024a0

080073a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80073ae:	f7ff ffef 	bl	8007390 <HAL_RCC_GetHCLKFreq>
 80073b2:	4601      	mov	r1, r0
 80073b4:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073bc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80073c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	fa92 f2a2 	rbit	r2, r2
 80073c8:	603a      	str	r2, [r7, #0]
  return result;
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	fab2 f282 	clz	r2, r2
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	40d3      	lsrs	r3, r2
 80073d4:	4a04      	ldr	r2, [pc, #16]	@ (80073e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80073d6:	5cd3      	ldrb	r3, [r2, r3]
 80073d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40021000 	.word	0x40021000
 80073e8:	0800ff28 	.word	0x0800ff28

080073ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80073f2:	f7ff ffcd 	bl	8007390 <HAL_RCC_GetHCLKFreq>
 80073f6:	4601      	mov	r1, r0
 80073f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007428 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007400:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007404:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	fa92 f2a2 	rbit	r2, r2
 800740c:	603a      	str	r2, [r7, #0]
  return result;
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	fab2 f282 	clz	r2, r2
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	40d3      	lsrs	r3, r2
 8007418:	4a04      	ldr	r2, [pc, #16]	@ (800742c <HAL_RCC_GetPCLK2Freq+0x40>)
 800741a:	5cd3      	ldrb	r3, [r2, r3]
 800741c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40021000 	.word	0x40021000
 800742c:	0800ff28 	.word	0x0800ff28

08007430 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b092      	sub	sp, #72	@ 0x48
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80d2 	beq.w	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007454:	4b4d      	ldr	r3, [pc, #308]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10e      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007460:	4b4a      	ldr	r3, [pc, #296]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	4a49      	ldr	r2, [pc, #292]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800746a:	61d3      	str	r3, [r2, #28]
 800746c:	4b47      	ldr	r3, [pc, #284]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007474:	60bb      	str	r3, [r7, #8]
 8007476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800747e:	4b44      	ldr	r3, [pc, #272]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d118      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800748a:	4b41      	ldr	r3, [pc, #260]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a40      	ldr	r2, [pc, #256]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007494:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007496:	f7fd fbc7 	bl	8004c28 <HAL_GetTick>
 800749a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800749c:	e008      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749e:	f7fd fbc3 	bl	8004c28 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b64      	cmp	r3, #100	@ 0x64
 80074aa:	d901      	bls.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e1d4      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074b0:	4b37      	ldr	r3, [pc, #220]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0f0      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074bc:	4b33      	ldr	r3, [pc, #204]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8082 	beq.w	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80074d8:	429a      	cmp	r2, r3
 80074da:	d07a      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074dc:	4b2b      	ldr	r3, [pc, #172]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80074ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	fa93 f3a3 	rbit	r3, r3
 80074f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074f6:	fab3 f383 	clz	r3, r3
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	4b25      	ldr	r3, [pc, #148]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	461a      	mov	r2, r3
 8007506:	2301      	movs	r3, #1
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800750e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	fa93 f3a3 	rbit	r3, r3
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800751a:	fab3 f383 	clz	r3, r3
 800751e:	b2db      	uxtb	r3, r3
 8007520:	461a      	mov	r2, r3
 8007522:	4b1c      	ldr	r3, [pc, #112]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007524:	4413      	add	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	461a      	mov	r2, r3
 800752a:	2300      	movs	r3, #0
 800752c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800752e:	4a17      	ldr	r2, [pc, #92]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007532:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d049      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800753e:	f7fd fb73 	bl	8004c28 <HAL_GetTick>
 8007542:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007544:	e00a      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007546:	f7fd fb6f 	bl	8004c28 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007554:	4293      	cmp	r3, r2
 8007556:	d901      	bls.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e17e      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800755c:	2302      	movs	r3, #2
 800755e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	fa93 f3a3 	rbit	r3, r3
 8007566:	627b      	str	r3, [r7, #36]	@ 0x24
 8007568:	2302      	movs	r3, #2
 800756a:	623b      	str	r3, [r7, #32]
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	fa93 f3a3 	rbit	r3, r3
 8007572:	61fb      	str	r3, [r7, #28]
  return result;
 8007574:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007576:	fab3 f383 	clz	r3, r3
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d108      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007586:	4b01      	ldr	r3, [pc, #4]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	e00d      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800758c:	40021000 	.word	0x40021000
 8007590:	40007000 	.word	0x40007000
 8007594:	10908100 	.word	0x10908100
 8007598:	2302      	movs	r3, #2
 800759a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	fa93 f3a3 	rbit	r3, r3
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	4b9a      	ldr	r3, [pc, #616]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a8:	2202      	movs	r2, #2
 80075aa:	613a      	str	r2, [r7, #16]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	fa92 f2a2 	rbit	r2, r2
 80075b2:	60fa      	str	r2, [r7, #12]
  return result;
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	fab2 f282 	clz	r2, r2
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	f002 021f 	and.w	r2, r2, #31
 80075c6:	2101      	movs	r1, #1
 80075c8:	fa01 f202 	lsl.w	r2, r1, r2
 80075cc:	4013      	ands	r3, r2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0b9      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80075d2:	4b8f      	ldr	r3, [pc, #572]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	498c      	ldr	r1, [pc, #560]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80075e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d105      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ec:	4b88      	ldr	r3, [pc, #544]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	4a87      	ldr	r2, [pc, #540]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d008      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007604:	4b82      	ldr	r3, [pc, #520]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	f023 0203 	bic.w	r2, r3, #3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	497f      	ldr	r1, [pc, #508]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007612:	4313      	orrs	r3, r2
 8007614:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007622:	4b7b      	ldr	r3, [pc, #492]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	4978      	ldr	r1, [pc, #480]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007630:	4313      	orrs	r3, r2
 8007632:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d008      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007640:	4b73      	ldr	r3, [pc, #460]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007644:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	4970      	ldr	r1, [pc, #448]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800764e:	4313      	orrs	r3, r2
 8007650:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d008      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800765e:	4b6c      	ldr	r3, [pc, #432]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007662:	f023 0210 	bic.w	r2, r3, #16
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	4969      	ldr	r1, [pc, #420]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800766c:	4313      	orrs	r3, r2
 800766e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d008      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800767c:	4b64      	ldr	r3, [pc, #400]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007688:	4961      	ldr	r1, [pc, #388]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800768a:	4313      	orrs	r3, r2
 800768c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d008      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800769a:	4b5d      	ldr	r3, [pc, #372]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	f023 0220 	bic.w	r2, r3, #32
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	495a      	ldr	r1, [pc, #360]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d008      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076b8:	4b55      	ldr	r3, [pc, #340]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076bc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	4952      	ldr	r1, [pc, #328]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0308 	and.w	r3, r3, #8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076d6:	4b4e      	ldr	r3, [pc, #312]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	494b      	ldr	r1, [pc, #300]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076f4:	4b46      	ldr	r3, [pc, #280]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	4943      	ldr	r1, [pc, #268]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007702:	4313      	orrs	r3, r2
 8007704:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800770e:	2b00      	cmp	r3, #0
 8007710:	d008      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007712:	4b3f      	ldr	r3, [pc, #252]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771e:	493c      	ldr	r1, [pc, #240]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007720:	4313      	orrs	r3, r2
 8007722:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007730:	4b37      	ldr	r3, [pc, #220]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007734:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773c:	4934      	ldr	r1, [pc, #208]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773e:	4313      	orrs	r3, r2
 8007740:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d008      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800774e:	4b30      	ldr	r3, [pc, #192]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007752:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775a:	492d      	ldr	r1, [pc, #180]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775c:	4313      	orrs	r3, r2
 800775e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d008      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800776c:	4b28      	ldr	r3, [pc, #160]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800776e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007770:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007778:	4925      	ldr	r1, [pc, #148]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777a:	4313      	orrs	r3, r2
 800777c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d008      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800778a:	4b21      	ldr	r3, [pc, #132]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007796:	491e      	ldr	r1, [pc, #120]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007798:	4313      	orrs	r3, r2
 800779a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80077a8:	4b19      	ldr	r3, [pc, #100]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b4:	4916      	ldr	r1, [pc, #88]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d008      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80077c6:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d2:	490f      	ldr	r1, [pc, #60]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80077e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f0:	4907      	ldr	r1, [pc, #28]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00c      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007802:	4b03      	ldr	r3, [pc, #12]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007806:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800780e:	bf00      	nop
 8007810:	40021000 	.word	0x40021000
 8007814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007816:	4913      	ldr	r1, [pc, #76]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007818:	4313      	orrs	r3, r2
 800781a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007828:	4b0e      	ldr	r3, [pc, #56]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800782a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007834:	490b      	ldr	r1, [pc, #44]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007836:	4313      	orrs	r3, r2
 8007838:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d008      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007846:	4b07      	ldr	r3, [pc, #28]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007852:	4904      	ldr	r1, [pc, #16]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007854:	4313      	orrs	r3, r2
 8007856:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3748      	adds	r7, #72	@ 0x48
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40021000 	.word	0x40021000

08007868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e09d      	b.n	80079b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	2b00      	cmp	r3, #0
 8007880:	d108      	bne.n	8007894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800788a:	d009      	beq.n	80078a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	61da      	str	r2, [r3, #28]
 8007892:	e005      	b.n	80078a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fc fe18 	bl	80044f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078e0:	d902      	bls.n	80078e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	e002      	b.n	80078ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80078f6:	d007      	beq.n	8007908 <HAL_SPI_Init+0xa0>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007900:	d002      	beq.n	8007908 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800794a:	ea42 0103 	orr.w	r1, r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007952:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	0c1b      	lsrs	r3, r3, #16
 8007964:	f003 0204 	and.w	r2, r3, #4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796c:	f003 0310 	and.w	r3, r3, #16
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007984:	ea42 0103 	orr.w	r1, r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_SPI_Transmit_IT+0x1e>
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d102      	bne.n	80079e4 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079e2:	e06d      	b.n	8007ac0 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d002      	beq.n	80079f6 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
 80079f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079f4:	e064      	b.n	8007ac0 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_SPI_Transmit_IT+0x44>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e05e      	b.n	8007ac2 <HAL_SPI_Transmit_IT+0x102>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a50:	d903      	bls.n	8007a5a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad0 <HAL_SPI_Transmit_IT+0x110>)
 8007a56:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a58:	e002      	b.n	8007a60 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad4 <HAL_SPI_Transmit_IT+0x114>)
 8007a5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a68:	d10f      	bne.n	8007a8a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a94:	2b40      	cmp	r3, #64	@ 0x40
 8007a96:	d007      	beq.n	8007aa8 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aa6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8007abe:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	080082db 	.word	0x080082db
 8007ad4:	08008295 	.word	0x08008295

08007ad8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d002      	beq.n	8007afc <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
 8007af8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007afa:	e092      	b.n	8007c22 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d110      	bne.n	8007b26 <HAL_SPI_Receive_IT+0x4e>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b0c:	d10b      	bne.n	8007b26 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2204      	movs	r2, #4
 8007b12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f889 	bl	8007c34 <HAL_SPI_TransmitReceive_IT>
 8007b22:	4603      	mov	r3, r0
 8007b24:	e07e      	b.n	8007c24 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_SPI_Receive_IT+0x5a>
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b36:	e074      	b.n	8007c22 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_SPI_Receive_IT+0x6e>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e06e      	b.n	8007c24 <HAL_SPI_Receive_IT+0x14c>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2204      	movs	r2, #4
 8007b52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	88fa      	ldrh	r2, [r7, #6]
 8007b66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b92:	d90b      	bls.n	8007bac <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ba2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a21      	ldr	r2, [pc, #132]	@ (8007c2c <HAL_SPI_Receive_IT+0x154>)
 8007ba8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007baa:	e00a      	b.n	8007bc2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007bba:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8007c30 <HAL_SPI_Receive_IT+0x158>)
 8007bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bca:	d10f      	bne.n	8007bec <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007bea:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf6:	2b40      	cmp	r3, #64	@ 0x40
 8007bf8:	d007      	beq.n	8007c0a <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c08:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007c20:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	08008249 	.word	0x08008249
 8007c30:	080081f9 	.word	0x080081f9

08007c34 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c4c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c54:	7dbb      	ldrb	r3, [r7, #22]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d00d      	beq.n	8007c76 <HAL_SPI_TransmitReceive_IT+0x42>
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c60:	d106      	bne.n	8007c70 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d102      	bne.n	8007c70 <HAL_SPI_TransmitReceive_IT+0x3c>
 8007c6a:	7dbb      	ldrb	r3, [r7, #22]
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d002      	beq.n	8007c76 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8007c70:	2302      	movs	r3, #2
 8007c72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c74:	e07d      	b.n	8007d72 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <HAL_SPI_TransmitReceive_IT+0x54>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <HAL_SPI_TransmitReceive_IT+0x54>
 8007c82:	887b      	ldrh	r3, [r7, #2]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d102      	bne.n	8007c8e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c8c:	e071      	b.n	8007d72 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_SPI_TransmitReceive_IT+0x68>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e06b      	b.n	8007d74 <HAL_SPI_TransmitReceive_IT+0x140>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d003      	beq.n	8007cb8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2205      	movs	r2, #5
 8007cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	887a      	ldrh	r2, [r7, #2]
 8007cc8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	887a      	ldrh	r2, [r7, #2]
 8007cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	887a      	ldrh	r2, [r7, #2]
 8007cda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	887a      	ldrh	r2, [r7, #2]
 8007ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007cee:	d906      	bls.n	8007cfe <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a23      	ldr	r2, [pc, #140]	@ (8007d80 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8007cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4a22      	ldr	r2, [pc, #136]	@ (8007d84 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007cfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cfc:	e005      	b.n	8007d0a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4a21      	ldr	r2, [pc, #132]	@ (8007d88 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007d02:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4a21      	ldr	r2, [pc, #132]	@ (8007d8c <HAL_SPI_TransmitReceive_IT+0x158>)
 8007d08:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d12:	d802      	bhi.n	8007d1a <HAL_SPI_TransmitReceive_IT+0xe6>
 8007d14:	887b      	ldrh	r3, [r7, #2]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d908      	bls.n	8007d2c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d28:	605a      	str	r2, [r3, #4]
 8007d2a:	e007      	b.n	8007d3c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d3a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d46:	2b40      	cmp	r3, #64	@ 0x40
 8007d48:	d007      	beq.n	8007d5a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d58:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8007d70:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	08008133 	.word	0x08008133
 8007d84:	08008199 	.word	0x08008199
 8007d88:	08007fe3 	.word	0x08007fe3
 8007d8c:	080080a1 	.word	0x080080a1

08007d90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	099b      	lsrs	r3, r3, #6
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10f      	bne.n	8007dd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	099b      	lsrs	r3, r3, #6
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d004      	beq.n	8007dd4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
    return;
 8007dd2:	e0d7      	b.n	8007f84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <HAL_SPI_IRQHandler+0x66>
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	09db      	lsrs	r3, r3, #7
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d004      	beq.n	8007df6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4798      	blx	r3
    return;
 8007df4:	e0c6      	b.n	8007f84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10c      	bne.n	8007e1c <HAL_SPI_IRQHandler+0x8c>
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	099b      	lsrs	r3, r3, #6
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 80b4 	beq.w	8007f84 <HAL_SPI_IRQHandler+0x1f4>
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 80ad 	beq.w	8007f84 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	099b      	lsrs	r3, r3, #6
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d023      	beq.n	8007e7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d011      	beq.n	8007e66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e46:	f043 0204 	orr.w	r2, r3, #4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	e00b      	b.n	8007e7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	613b      	str	r3, [r7, #16]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	613b      	str	r3, [r7, #16]
 8007e7a:	693b      	ldr	r3, [r7, #16]
        return;
 8007e7c:	e082      	b.n	8007f84 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	095b      	lsrs	r3, r3, #5
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d014      	beq.n	8007eb4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e8e:	f043 0201 	orr.w	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00c      	beq.n	8007eda <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ec4:	f043 0208 	orr.w	r2, r3, #8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	60bb      	str	r3, [r7, #8]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d04f      	beq.n	8007f82 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ef0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_SPI_IRQHandler+0x17e>
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d034      	beq.n	8007f78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0203 	bic.w	r2, r2, #3
 8007f1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d011      	beq.n	8007f4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2a:	4a18      	ldr	r2, [pc, #96]	@ (8007f8c <HAL_SPI_IRQHandler+0x1fc>)
 8007f2c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fd f89d 	bl	8005072 <HAL_DMA_Abort_IT>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d016      	beq.n	8007f80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	4a0d      	ldr	r2, [pc, #52]	@ (8007f8c <HAL_SPI_IRQHandler+0x1fc>)
 8007f58:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd f887 	bl	8005072 <HAL_DMA_Abort_IT>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007f76:	e003      	b.n	8007f80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f813 	bl	8007fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f7e:	e000      	b.n	8007f82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007f80:	bf00      	nop
    return;
 8007f82:	bf00      	nop
  }
}
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	08007fb9 	.word	0x08007fb9

08007f90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f7ff ffe5 	bl	8007fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d923      	bls.n	800803e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	b292      	uxth	r2, r2
 8008002:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008008:	1c9a      	adds	r2, r3, #2
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b02      	subs	r3, #2
 8008018:	b29a      	uxth	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008026:	b29b      	uxth	r3, r3
 8008028:	2b01      	cmp	r3, #1
 800802a:	d11f      	bne.n	800806c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800803a:	605a      	str	r2, [r3, #4]
 800803c:	e016      	b.n	800806c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f103 020c 	add.w	r2, r3, #12
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804a:	7812      	ldrb	r2, [r2, #0]
 800804c:	b2d2      	uxtb	r2, r2
 800804e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10f      	bne.n	8008098 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008086:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d102      	bne.n	8008098 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fb00 	bl	8008698 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d912      	bls.n	80080d8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b6:	881a      	ldrh	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c2:	1c9a      	adds	r2, r3, #2
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	3b02      	subs	r3, #2
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080d6:	e012      	b.n	80080fe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	330c      	adds	r3, #12
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008102:	b29b      	uxth	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d110      	bne.n	800812a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008116:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fab7 	bl	8008698 <SPI_CloseRxTx_ISR>
    }
  }
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008144:	b292      	uxth	r2, r2
 8008146:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814c:	1c9a      	adds	r2, r3, #2
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	b29a      	uxth	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10f      	bne.n	8008190 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800817e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d102      	bne.n	8008190 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fa84 	bl	8008698 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a4:	881a      	ldrh	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b0:	1c9a      	adds	r2, r3, #2
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d110      	bne.n	80081f0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081dc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa54 	bl	8008698 <SPI_CloseRxTx_ISR>
    }
  }
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f103 020c 	add.w	r2, r3, #12
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820c:	7812      	ldrb	r2, [r2, #0]
 800820e:	b2d2      	uxtb	r2, r2
 8008210:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa6e 	bl	800871c <SPI_CloseRx_ISR>
  }
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825a:	b292      	uxth	r2, r2
 800825c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008262:	1c9a      	adds	r2, r3, #2
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800826e:	b29b      	uxth	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d102      	bne.n	800828c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa48 	bl	800871c <SPI_CloseRx_ISR>
  }
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	7812      	ldrb	r2, [r2, #0]
 80082a8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fa55 	bl	800877c <SPI_CloseTx_ISR>
  }
}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e6:	881a      	ldrh	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f2:	1c9a      	adds	r2, r3, #2
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d102      	bne.n	8008316 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fa33 	bl	800877c <SPI_CloseTx_ISR>
  }
}
 8008316:	bf00      	nop
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008330:	f7fc fc7a 	bl	8004c28 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008338:	1a9b      	subs	r3, r3, r2
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	4413      	add	r3, r2
 800833e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008340:	f7fc fc72 	bl	8004c28 <HAL_GetTick>
 8008344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008346:	4b39      	ldr	r3, [pc, #228]	@ (800842c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	015b      	lsls	r3, r3, #5
 800834c:	0d1b      	lsrs	r3, r3, #20
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	fb02 f303 	mul.w	r3, r2, r3
 8008354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008356:	e054      	b.n	8008402 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835e:	d050      	beq.n	8008402 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008360:	f7fc fc62 	bl	8004c28 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	69fa      	ldr	r2, [r7, #28]
 800836c:	429a      	cmp	r2, r3
 800836e:	d902      	bls.n	8008376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d13d      	bne.n	80083f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800838e:	d111      	bne.n	80083b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008398:	d004      	beq.n	80083a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083a2:	d107      	bne.n	80083b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083bc:	d10f      	bne.n	80083de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e017      	b.n	8008422 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	3b01      	subs	r3, #1
 8008400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4013      	ands	r3, r2
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	429a      	cmp	r2, r3
 8008410:	bf0c      	ite	eq
 8008412:	2301      	moveq	r3, #1
 8008414:	2300      	movne	r3, #0
 8008416:	b2db      	uxtb	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	429a      	cmp	r2, r3
 800841e:	d19b      	bne.n	8008358 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200024a0 	.word	0x200024a0

08008430 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08a      	sub	sp, #40	@ 0x28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008442:	f7fc fbf1 	bl	8004c28 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	1a9b      	subs	r3, r3, r2
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	4413      	add	r3, r2
 8008450:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008452:	f7fc fbe9 	bl	8004c28 <HAL_GetTick>
 8008456:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	330c      	adds	r3, #12
 800845e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008460:	4b3d      	ldr	r3, [pc, #244]	@ (8008558 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	00da      	lsls	r2, r3, #3
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	0d1b      	lsrs	r3, r3, #20
 8008470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008478:	e060      	b.n	800853c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008480:	d107      	bne.n	8008492 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d104      	bne.n	8008492 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008490:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008498:	d050      	beq.n	800853c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800849a:	f7fc fbc5 	bl	8004c28 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d902      	bls.n	80084b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d13d      	bne.n	800852c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084c8:	d111      	bne.n	80084ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084d2:	d004      	beq.n	80084de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084dc:	d107      	bne.n	80084ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084f6:	d10f      	bne.n	8008518 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008516:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e010      	b.n	800854e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	3b01      	subs	r3, #1
 800853a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	4013      	ands	r3, r2
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	429a      	cmp	r2, r3
 800854a:	d196      	bne.n	800847a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3728      	adds	r7, #40	@ 0x28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	200024a0 	.word	0x200024a0

0800855c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008570:	d111      	bne.n	8008596 <SPI_EndRxTransaction+0x3a>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800857a:	d004      	beq.n	8008586 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008584:	d107      	bne.n	8008596 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008594:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2200      	movs	r2, #0
 800859e:	2180      	movs	r1, #128	@ 0x80
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff febd 	bl	8008320 <SPI_WaitFlagStateUntilTimeout>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085b0:	f043 0220 	orr.w	r2, r3, #32
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e023      	b.n	8008604 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085c4:	d11d      	bne.n	8008602 <SPI_EndRxTransaction+0xa6>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ce:	d004      	beq.n	80085da <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d8:	d113      	bne.n	8008602 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f7ff ff22 	bl	8008430 <SPI_WaitFifoStateUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085f6:	f043 0220 	orr.w	r2, r3, #32
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e000      	b.n	8008604 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af02      	add	r7, sp, #8
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2200      	movs	r2, #0
 8008620:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff ff03 	bl	8008430 <SPI_WaitFifoStateUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008634:	f043 0220 	orr.w	r2, r3, #32
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e027      	b.n	8008690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2200      	movs	r2, #0
 8008648:	2180      	movs	r1, #128	@ 0x80
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff fe68 	bl	8008320 <SPI_WaitFlagStateUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800865a:	f043 0220 	orr.w	r2, r3, #32
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e014      	b.n	8008690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2200      	movs	r2, #0
 800866e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f7ff fedc 	bl	8008430 <SPI_WaitFifoStateUntilTimeout>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d007      	beq.n	800868e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008682:	f043 0220 	orr.w	r2, r3, #32
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e000      	b.n	8008690 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086a0:	f7fc fac2 	bl	8004c28 <HAL_GetTick>
 80086a4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 0220 	bic.w	r2, r2, #32
 80086b4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	2164      	movs	r1, #100	@ 0x64
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff ffa6 	bl	800860c <SPI_EndRxTxTransaction>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086ca:	f043 0220 	orr.w	r2, r3, #32
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d115      	bne.n	8008706 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d107      	bne.n	80086f6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7f8 fbc8 	bl	8000e84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80086f4:	e00e      	b.n	8008714 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fc46 	bl	8007f90 <HAL_SPI_TxRxCpltCallback>
}
 8008704:	e006      	b.n	8008714 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff fc48 	bl	8007fa4 <HAL_SPI_ErrorCallback>
}
 8008714:	bf00      	nop
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008732:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008734:	f7fc fa78 	bl	8004c28 <HAL_GetTick>
 8008738:	4603      	mov	r3, r0
 800873a:	461a      	mov	r2, r3
 800873c:	2164      	movs	r1, #100	@ 0x64
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff ff0c 	bl	800855c <SPI_EndRxTransaction>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800874e:	f043 0220 	orr.w	r2, r3, #32
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7f8 fb8c 	bl	8000e84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800876c:	e002      	b.n	8008774 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fc18 	bl	8007fa4 <HAL_SPI_ErrorCallback>
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008784:	f7fc fa50 	bl	8004c28 <HAL_GetTick>
 8008788:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008798:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	2164      	movs	r1, #100	@ 0x64
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff ff34 	bl	800860c <SPI_EndRxTxTransaction>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ae:	f043 0220 	orr.w	r2, r3, #32
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087be:	2300      	movs	r3, #0
 80087c0:	60bb      	str	r3, [r7, #8]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	60bb      	str	r3, [r7, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	60bb      	str	r3, [r7, #8]
 80087d2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff fbdd 	bl	8007fa4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80087ea:	e002      	b.n	80087f2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7f8 fb2b 	bl	8000e48 <HAL_SPI_TxCpltCallback>
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e049      	b.n	80088a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fb feb1 	bl	8004588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f000 fc1d 	bl	8009078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e049      	b.n	800894e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f841 	bl	8008956 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f000 fbc6 	bl	8009078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
	...

0800896c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d109      	bne.n	8008990 <HAL_TIM_PWM_Start+0x24>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	e03c      	b.n	8008a0a <HAL_TIM_PWM_Start+0x9e>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b04      	cmp	r3, #4
 8008994:	d109      	bne.n	80089aa <HAL_TIM_PWM_Start+0x3e>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b01      	cmp	r3, #1
 80089a0:	bf14      	ite	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	2300      	moveq	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	e02f      	b.n	8008a0a <HAL_TIM_PWM_Start+0x9e>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d109      	bne.n	80089c4 <HAL_TIM_PWM_Start+0x58>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	bf14      	ite	ne
 80089bc:	2301      	movne	r3, #1
 80089be:	2300      	moveq	r3, #0
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	e022      	b.n	8008a0a <HAL_TIM_PWM_Start+0x9e>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b0c      	cmp	r3, #12
 80089c8:	d109      	bne.n	80089de <HAL_TIM_PWM_Start+0x72>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	bf14      	ite	ne
 80089d6:	2301      	movne	r3, #1
 80089d8:	2300      	moveq	r3, #0
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	e015      	b.n	8008a0a <HAL_TIM_PWM_Start+0x9e>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d109      	bne.n	80089f8 <HAL_TIM_PWM_Start+0x8c>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	bf14      	ite	ne
 80089f0:	2301      	movne	r3, #1
 80089f2:	2300      	moveq	r3, #0
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	e008      	b.n	8008a0a <HAL_TIM_PWM_Start+0x9e>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e0a1      	b.n	8008b56 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <HAL_TIM_PWM_Start+0xb6>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a20:	e023      	b.n	8008a6a <HAL_TIM_PWM_Start+0xfe>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d104      	bne.n	8008a32 <HAL_TIM_PWM_Start+0xc6>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a30:	e01b      	b.n	8008a6a <HAL_TIM_PWM_Start+0xfe>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	d104      	bne.n	8008a42 <HAL_TIM_PWM_Start+0xd6>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a40:	e013      	b.n	8008a6a <HAL_TIM_PWM_Start+0xfe>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b0c      	cmp	r3, #12
 8008a46:	d104      	bne.n	8008a52 <HAL_TIM_PWM_Start+0xe6>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a50:	e00b      	b.n	8008a6a <HAL_TIM_PWM_Start+0xfe>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b10      	cmp	r3, #16
 8008a56:	d104      	bne.n	8008a62 <HAL_TIM_PWM_Start+0xf6>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a60:	e003      	b.n	8008a6a <HAL_TIM_PWM_Start+0xfe>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2202      	movs	r2, #2
 8008a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 ff4a 	bl	800990c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a38      	ldr	r2, [pc, #224]	@ (8008b60 <HAL_TIM_PWM_Start+0x1f4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d018      	beq.n	8008ab4 <HAL_TIM_PWM_Start+0x148>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a37      	ldr	r2, [pc, #220]	@ (8008b64 <HAL_TIM_PWM_Start+0x1f8>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d013      	beq.n	8008ab4 <HAL_TIM_PWM_Start+0x148>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a35      	ldr	r2, [pc, #212]	@ (8008b68 <HAL_TIM_PWM_Start+0x1fc>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00e      	beq.n	8008ab4 <HAL_TIM_PWM_Start+0x148>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a34      	ldr	r2, [pc, #208]	@ (8008b6c <HAL_TIM_PWM_Start+0x200>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d009      	beq.n	8008ab4 <HAL_TIM_PWM_Start+0x148>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a32      	ldr	r2, [pc, #200]	@ (8008b70 <HAL_TIM_PWM_Start+0x204>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d004      	beq.n	8008ab4 <HAL_TIM_PWM_Start+0x148>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a31      	ldr	r2, [pc, #196]	@ (8008b74 <HAL_TIM_PWM_Start+0x208>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d101      	bne.n	8008ab8 <HAL_TIM_PWM_Start+0x14c>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e000      	b.n	8008aba <HAL_TIM_PWM_Start+0x14e>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008acc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a23      	ldr	r2, [pc, #140]	@ (8008b60 <HAL_TIM_PWM_Start+0x1f4>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d01d      	beq.n	8008b14 <HAL_TIM_PWM_Start+0x1a8>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae0:	d018      	beq.n	8008b14 <HAL_TIM_PWM_Start+0x1a8>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a24      	ldr	r2, [pc, #144]	@ (8008b78 <HAL_TIM_PWM_Start+0x20c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d013      	beq.n	8008b14 <HAL_TIM_PWM_Start+0x1a8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a22      	ldr	r2, [pc, #136]	@ (8008b7c <HAL_TIM_PWM_Start+0x210>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00e      	beq.n	8008b14 <HAL_TIM_PWM_Start+0x1a8>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1a      	ldr	r2, [pc, #104]	@ (8008b64 <HAL_TIM_PWM_Start+0x1f8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d009      	beq.n	8008b14 <HAL_TIM_PWM_Start+0x1a8>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a18      	ldr	r2, [pc, #96]	@ (8008b68 <HAL_TIM_PWM_Start+0x1fc>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d004      	beq.n	8008b14 <HAL_TIM_PWM_Start+0x1a8>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a19      	ldr	r2, [pc, #100]	@ (8008b74 <HAL_TIM_PWM_Start+0x208>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d115      	bne.n	8008b40 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	4b19      	ldr	r3, [pc, #100]	@ (8008b80 <HAL_TIM_PWM_Start+0x214>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b06      	cmp	r3, #6
 8008b24:	d015      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x1e6>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b2c:	d011      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f042 0201 	orr.w	r2, r2, #1
 8008b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b3e:	e008      	b.n	8008b52 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0201 	orr.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	e000      	b.n	8008b54 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	40012c00 	.word	0x40012c00
 8008b64:	40013400 	.word	0x40013400
 8008b68:	40014000 	.word	0x40014000
 8008b6c:	40014400 	.word	0x40014400
 8008b70:	40014800 	.word	0x40014800
 8008b74:	40015000 	.word	0x40015000
 8008b78:	40000400 	.word	0x40000400
 8008b7c:	40000800 	.word	0x40000800
 8008b80:	00010007 	.word	0x00010007

08008b84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2200      	movs	r2, #0
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 feb8 	bl	800990c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a40      	ldr	r2, [pc, #256]	@ (8008ca4 <HAL_TIM_PWM_Stop+0x120>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d018      	beq.n	8008bd8 <HAL_TIM_PWM_Stop+0x54>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a3f      	ldr	r2, [pc, #252]	@ (8008ca8 <HAL_TIM_PWM_Stop+0x124>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d013      	beq.n	8008bd8 <HAL_TIM_PWM_Stop+0x54>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a3d      	ldr	r2, [pc, #244]	@ (8008cac <HAL_TIM_PWM_Stop+0x128>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00e      	beq.n	8008bd8 <HAL_TIM_PWM_Stop+0x54>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8008cb0 <HAL_TIM_PWM_Stop+0x12c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d009      	beq.n	8008bd8 <HAL_TIM_PWM_Stop+0x54>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8008cb4 <HAL_TIM_PWM_Stop+0x130>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d004      	beq.n	8008bd8 <HAL_TIM_PWM_Stop+0x54>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a39      	ldr	r2, [pc, #228]	@ (8008cb8 <HAL_TIM_PWM_Stop+0x134>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d101      	bne.n	8008bdc <HAL_TIM_PWM_Stop+0x58>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <HAL_TIM_PWM_Stop+0x5a>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d017      	beq.n	8008c12 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008bec:	4013      	ands	r3, r2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10f      	bne.n	8008c12 <HAL_TIM_PWM_Stop+0x8e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6a1a      	ldr	r2, [r3, #32]
 8008bf8:	f240 4344 	movw	r3, #1092	@ 0x444
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d107      	bne.n	8008c12 <HAL_TIM_PWM_Stop+0x8e>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10f      	bne.n	8008c42 <HAL_TIM_PWM_Stop+0xbe>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6a1a      	ldr	r2, [r3, #32]
 8008c28:	f240 4344 	movw	r3, #1092	@ 0x444
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d107      	bne.n	8008c42 <HAL_TIM_PWM_Stop+0xbe>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0201 	bic.w	r2, r2, #1
 8008c40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d104      	bne.n	8008c52 <HAL_TIM_PWM_Stop+0xce>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c50:	e023      	b.n	8008c9a <HAL_TIM_PWM_Stop+0x116>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d104      	bne.n	8008c62 <HAL_TIM_PWM_Stop+0xde>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c60:	e01b      	b.n	8008c9a <HAL_TIM_PWM_Stop+0x116>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d104      	bne.n	8008c72 <HAL_TIM_PWM_Stop+0xee>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c70:	e013      	b.n	8008c9a <HAL_TIM_PWM_Stop+0x116>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b0c      	cmp	r3, #12
 8008c76:	d104      	bne.n	8008c82 <HAL_TIM_PWM_Stop+0xfe>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c80:	e00b      	b.n	8008c9a <HAL_TIM_PWM_Stop+0x116>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b10      	cmp	r3, #16
 8008c86:	d104      	bne.n	8008c92 <HAL_TIM_PWM_Stop+0x10e>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c90:	e003      	b.n	8008c9a <HAL_TIM_PWM_Stop+0x116>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	40012c00 	.word	0x40012c00
 8008ca8:	40013400 	.word	0x40013400
 8008cac:	40014000 	.word	0x40014000
 8008cb0:	40014400 	.word	0x40014400
 8008cb4:	40014800 	.word	0x40014800
 8008cb8:	40015000 	.word	0x40015000

08008cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e0ff      	b.n	8008eda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b14      	cmp	r3, #20
 8008ce6:	f200 80f0 	bhi.w	8008eca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008cea:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf0:	08008d45 	.word	0x08008d45
 8008cf4:	08008ecb 	.word	0x08008ecb
 8008cf8:	08008ecb 	.word	0x08008ecb
 8008cfc:	08008ecb 	.word	0x08008ecb
 8008d00:	08008d85 	.word	0x08008d85
 8008d04:	08008ecb 	.word	0x08008ecb
 8008d08:	08008ecb 	.word	0x08008ecb
 8008d0c:	08008ecb 	.word	0x08008ecb
 8008d10:	08008dc7 	.word	0x08008dc7
 8008d14:	08008ecb 	.word	0x08008ecb
 8008d18:	08008ecb 	.word	0x08008ecb
 8008d1c:	08008ecb 	.word	0x08008ecb
 8008d20:	08008e07 	.word	0x08008e07
 8008d24:	08008ecb 	.word	0x08008ecb
 8008d28:	08008ecb 	.word	0x08008ecb
 8008d2c:	08008ecb 	.word	0x08008ecb
 8008d30:	08008e49 	.word	0x08008e49
 8008d34:	08008ecb 	.word	0x08008ecb
 8008d38:	08008ecb 	.word	0x08008ecb
 8008d3c:	08008ecb 	.word	0x08008ecb
 8008d40:	08008e89 	.word	0x08008e89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fa3e 	bl	80091cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0208 	orr.w	r2, r2, #8
 8008d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	699a      	ldr	r2, [r3, #24]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0204 	bic.w	r2, r2, #4
 8008d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6999      	ldr	r1, [r3, #24]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	619a      	str	r2, [r3, #24]
      break;
 8008d82:	e0a5      	b.n	8008ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68b9      	ldr	r1, [r7, #8]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 fab8 	bl	8009300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	699a      	ldr	r2, [r3, #24]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699a      	ldr	r2, [r3, #24]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6999      	ldr	r1, [r3, #24]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	021a      	lsls	r2, r3, #8
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	619a      	str	r2, [r3, #24]
      break;
 8008dc4:	e084      	b.n	8008ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fb2b 	bl	8009428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69da      	ldr	r2, [r3, #28]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f042 0208 	orr.w	r2, r2, #8
 8008de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69da      	ldr	r2, [r3, #28]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0204 	bic.w	r2, r2, #4
 8008df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69d9      	ldr	r1, [r3, #28]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	691a      	ldr	r2, [r3, #16]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	61da      	str	r2, [r3, #28]
      break;
 8008e04:	e064      	b.n	8008ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68b9      	ldr	r1, [r7, #8]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 fb9d 	bl	800954c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69da      	ldr	r2, [r3, #28]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69da      	ldr	r2, [r3, #28]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69d9      	ldr	r1, [r3, #28]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	021a      	lsls	r2, r3, #8
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	61da      	str	r2, [r3, #28]
      break;
 8008e46:	e043      	b.n	8008ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fbec 	bl	800962c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0208 	orr.w	r2, r2, #8
 8008e62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0204 	bic.w	r2, r2, #4
 8008e72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008e86:	e023      	b.n	8008ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fc36 	bl	8009700 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ea2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	021a      	lsls	r2, r3, #8
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008ec8:	e002      	b.n	8008ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop

08008ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_TIM_ConfigClockSource+0x1c>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e0b6      	b.n	800906e <HAL_TIM_ConfigClockSource+0x18a>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f3c:	d03e      	beq.n	8008fbc <HAL_TIM_ConfigClockSource+0xd8>
 8008f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f42:	f200 8087 	bhi.w	8009054 <HAL_TIM_ConfigClockSource+0x170>
 8008f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f4a:	f000 8086 	beq.w	800905a <HAL_TIM_ConfigClockSource+0x176>
 8008f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f52:	d87f      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x170>
 8008f54:	2b70      	cmp	r3, #112	@ 0x70
 8008f56:	d01a      	beq.n	8008f8e <HAL_TIM_ConfigClockSource+0xaa>
 8008f58:	2b70      	cmp	r3, #112	@ 0x70
 8008f5a:	d87b      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x170>
 8008f5c:	2b60      	cmp	r3, #96	@ 0x60
 8008f5e:	d050      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x11e>
 8008f60:	2b60      	cmp	r3, #96	@ 0x60
 8008f62:	d877      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x170>
 8008f64:	2b50      	cmp	r3, #80	@ 0x50
 8008f66:	d03c      	beq.n	8008fe2 <HAL_TIM_ConfigClockSource+0xfe>
 8008f68:	2b50      	cmp	r3, #80	@ 0x50
 8008f6a:	d873      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x170>
 8008f6c:	2b40      	cmp	r3, #64	@ 0x40
 8008f6e:	d058      	beq.n	8009022 <HAL_TIM_ConfigClockSource+0x13e>
 8008f70:	2b40      	cmp	r3, #64	@ 0x40
 8008f72:	d86f      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x170>
 8008f74:	2b30      	cmp	r3, #48	@ 0x30
 8008f76:	d064      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x15e>
 8008f78:	2b30      	cmp	r3, #48	@ 0x30
 8008f7a:	d86b      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x170>
 8008f7c:	2b20      	cmp	r3, #32
 8008f7e:	d060      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x15e>
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	d867      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x170>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d05c      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x15e>
 8008f88:	2b10      	cmp	r3, #16
 8008f8a:	d05a      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x15e>
 8008f8c:	e062      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f9e:	f000 fc95 	bl	80098cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	609a      	str	r2, [r3, #8]
      break;
 8008fba:	e04f      	b.n	800905c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fcc:	f000 fc7e 	bl	80098cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008fde:	609a      	str	r2, [r3, #8]
      break;
 8008fe0:	e03c      	b.n	800905c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f000 fbf2 	bl	80097d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2150      	movs	r1, #80	@ 0x50
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fc4b 	bl	8009896 <TIM_ITRx_SetConfig>
      break;
 8009000:	e02c      	b.n	800905c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800900e:	461a      	mov	r2, r3
 8009010:	f000 fc11 	bl	8009836 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2160      	movs	r1, #96	@ 0x60
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fc3b 	bl	8009896 <TIM_ITRx_SetConfig>
      break;
 8009020:	e01c      	b.n	800905c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800902e:	461a      	mov	r2, r3
 8009030:	f000 fbd2 	bl	80097d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2140      	movs	r1, #64	@ 0x40
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fc2b 	bl	8009896 <TIM_ITRx_SetConfig>
      break;
 8009040:	e00c      	b.n	800905c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4619      	mov	r1, r3
 800904c:	4610      	mov	r0, r2
 800904e:	f000 fc22 	bl	8009896 <TIM_ITRx_SetConfig>
      break;
 8009052:	e003      	b.n	800905c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	73fb      	strb	r3, [r7, #15]
      break;
 8009058:	e000      	b.n	800905c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800905a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a48      	ldr	r2, [pc, #288]	@ (80091ac <TIM_Base_SetConfig+0x134>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d013      	beq.n	80090b8 <TIM_Base_SetConfig+0x40>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009096:	d00f      	beq.n	80090b8 <TIM_Base_SetConfig+0x40>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a45      	ldr	r2, [pc, #276]	@ (80091b0 <TIM_Base_SetConfig+0x138>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00b      	beq.n	80090b8 <TIM_Base_SetConfig+0x40>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a44      	ldr	r2, [pc, #272]	@ (80091b4 <TIM_Base_SetConfig+0x13c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d007      	beq.n	80090b8 <TIM_Base_SetConfig+0x40>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a43      	ldr	r2, [pc, #268]	@ (80091b8 <TIM_Base_SetConfig+0x140>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d003      	beq.n	80090b8 <TIM_Base_SetConfig+0x40>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a42      	ldr	r2, [pc, #264]	@ (80091bc <TIM_Base_SetConfig+0x144>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d108      	bne.n	80090ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a37      	ldr	r2, [pc, #220]	@ (80091ac <TIM_Base_SetConfig+0x134>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d01f      	beq.n	8009112 <TIM_Base_SetConfig+0x9a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090d8:	d01b      	beq.n	8009112 <TIM_Base_SetConfig+0x9a>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a34      	ldr	r2, [pc, #208]	@ (80091b0 <TIM_Base_SetConfig+0x138>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d017      	beq.n	8009112 <TIM_Base_SetConfig+0x9a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a33      	ldr	r2, [pc, #204]	@ (80091b4 <TIM_Base_SetConfig+0x13c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d013      	beq.n	8009112 <TIM_Base_SetConfig+0x9a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a32      	ldr	r2, [pc, #200]	@ (80091b8 <TIM_Base_SetConfig+0x140>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00f      	beq.n	8009112 <TIM_Base_SetConfig+0x9a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a32      	ldr	r2, [pc, #200]	@ (80091c0 <TIM_Base_SetConfig+0x148>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00b      	beq.n	8009112 <TIM_Base_SetConfig+0x9a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a31      	ldr	r2, [pc, #196]	@ (80091c4 <TIM_Base_SetConfig+0x14c>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d007      	beq.n	8009112 <TIM_Base_SetConfig+0x9a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a30      	ldr	r2, [pc, #192]	@ (80091c8 <TIM_Base_SetConfig+0x150>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d003      	beq.n	8009112 <TIM_Base_SetConfig+0x9a>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a2b      	ldr	r2, [pc, #172]	@ (80091bc <TIM_Base_SetConfig+0x144>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d108      	bne.n	8009124 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a18      	ldr	r2, [pc, #96]	@ (80091ac <TIM_Base_SetConfig+0x134>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d013      	beq.n	8009178 <TIM_Base_SetConfig+0x100>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a19      	ldr	r2, [pc, #100]	@ (80091b8 <TIM_Base_SetConfig+0x140>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00f      	beq.n	8009178 <TIM_Base_SetConfig+0x100>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a19      	ldr	r2, [pc, #100]	@ (80091c0 <TIM_Base_SetConfig+0x148>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00b      	beq.n	8009178 <TIM_Base_SetConfig+0x100>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a18      	ldr	r2, [pc, #96]	@ (80091c4 <TIM_Base_SetConfig+0x14c>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d007      	beq.n	8009178 <TIM_Base_SetConfig+0x100>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a17      	ldr	r2, [pc, #92]	@ (80091c8 <TIM_Base_SetConfig+0x150>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d003      	beq.n	8009178 <TIM_Base_SetConfig+0x100>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a12      	ldr	r2, [pc, #72]	@ (80091bc <TIM_Base_SetConfig+0x144>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d103      	bne.n	8009180 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b01      	cmp	r3, #1
 8009190:	d105      	bne.n	800919e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	f023 0201 	bic.w	r2, r3, #1
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	611a      	str	r2, [r3, #16]
  }
}
 800919e:	bf00      	nop
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	40012c00 	.word	0x40012c00
 80091b0:	40000400 	.word	0x40000400
 80091b4:	40000800 	.word	0x40000800
 80091b8:	40013400 	.word	0x40013400
 80091bc:	40015000 	.word	0x40015000
 80091c0:	40014000 	.word	0x40014000
 80091c4:	40014400 	.word	0x40014400
 80091c8:	40014800 	.word	0x40014800

080091cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	f023 0201 	bic.w	r2, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f023 0302 	bic.w	r3, r3, #2
 8009218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a30      	ldr	r2, [pc, #192]	@ (80092e8 <TIM_OC1_SetConfig+0x11c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d013      	beq.n	8009254 <TIM_OC1_SetConfig+0x88>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a2f      	ldr	r2, [pc, #188]	@ (80092ec <TIM_OC1_SetConfig+0x120>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d00f      	beq.n	8009254 <TIM_OC1_SetConfig+0x88>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a2e      	ldr	r2, [pc, #184]	@ (80092f0 <TIM_OC1_SetConfig+0x124>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00b      	beq.n	8009254 <TIM_OC1_SetConfig+0x88>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a2d      	ldr	r2, [pc, #180]	@ (80092f4 <TIM_OC1_SetConfig+0x128>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_OC1_SetConfig+0x88>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a2c      	ldr	r2, [pc, #176]	@ (80092f8 <TIM_OC1_SetConfig+0x12c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC1_SetConfig+0x88>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a2b      	ldr	r2, [pc, #172]	@ (80092fc <TIM_OC1_SetConfig+0x130>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d10c      	bne.n	800926e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f023 0308 	bic.w	r3, r3, #8
 800925a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f023 0304 	bic.w	r3, r3, #4
 800926c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a1d      	ldr	r2, [pc, #116]	@ (80092e8 <TIM_OC1_SetConfig+0x11c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d013      	beq.n	800929e <TIM_OC1_SetConfig+0xd2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a1c      	ldr	r2, [pc, #112]	@ (80092ec <TIM_OC1_SetConfig+0x120>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00f      	beq.n	800929e <TIM_OC1_SetConfig+0xd2>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a1b      	ldr	r2, [pc, #108]	@ (80092f0 <TIM_OC1_SetConfig+0x124>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d00b      	beq.n	800929e <TIM_OC1_SetConfig+0xd2>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a1a      	ldr	r2, [pc, #104]	@ (80092f4 <TIM_OC1_SetConfig+0x128>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d007      	beq.n	800929e <TIM_OC1_SetConfig+0xd2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a19      	ldr	r2, [pc, #100]	@ (80092f8 <TIM_OC1_SetConfig+0x12c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d003      	beq.n	800929e <TIM_OC1_SetConfig+0xd2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a18      	ldr	r2, [pc, #96]	@ (80092fc <TIM_OC1_SetConfig+0x130>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d111      	bne.n	80092c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	4313      	orrs	r3, r2
 80092c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	621a      	str	r2, [r3, #32]
}
 80092dc:	bf00      	nop
 80092de:	371c      	adds	r7, #28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	40012c00 	.word	0x40012c00
 80092ec:	40013400 	.word	0x40013400
 80092f0:	40014000 	.word	0x40014000
 80092f4:	40014400 	.word	0x40014400
 80092f8:	40014800 	.word	0x40014800
 80092fc:	40015000 	.word	0x40015000

08009300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	f023 0210 	bic.w	r2, r3, #16
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800932e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800933a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f023 0320 	bic.w	r3, r3, #32
 800934e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	4313      	orrs	r3, r2
 800935a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a2c      	ldr	r2, [pc, #176]	@ (8009410 <TIM_OC2_SetConfig+0x110>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d007      	beq.n	8009374 <TIM_OC2_SetConfig+0x74>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a2b      	ldr	r2, [pc, #172]	@ (8009414 <TIM_OC2_SetConfig+0x114>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_OC2_SetConfig+0x74>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a2a      	ldr	r2, [pc, #168]	@ (8009418 <TIM_OC2_SetConfig+0x118>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d10d      	bne.n	8009390 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800937a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	011b      	lsls	r3, r3, #4
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	4313      	orrs	r3, r2
 8009386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800938e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a1f      	ldr	r2, [pc, #124]	@ (8009410 <TIM_OC2_SetConfig+0x110>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d013      	beq.n	80093c0 <TIM_OC2_SetConfig+0xc0>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a1e      	ldr	r2, [pc, #120]	@ (8009414 <TIM_OC2_SetConfig+0x114>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d00f      	beq.n	80093c0 <TIM_OC2_SetConfig+0xc0>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a1e      	ldr	r2, [pc, #120]	@ (800941c <TIM_OC2_SetConfig+0x11c>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00b      	beq.n	80093c0 <TIM_OC2_SetConfig+0xc0>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009420 <TIM_OC2_SetConfig+0x120>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d007      	beq.n	80093c0 <TIM_OC2_SetConfig+0xc0>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009424 <TIM_OC2_SetConfig+0x124>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_OC2_SetConfig+0xc0>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a17      	ldr	r2, [pc, #92]	@ (8009418 <TIM_OC2_SetConfig+0x118>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d113      	bne.n	80093e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093c6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093ce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	4313      	orrs	r3, r2
 80093da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	621a      	str	r2, [r3, #32]
}
 8009402:	bf00      	nop
 8009404:	371c      	adds	r7, #28
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40012c00 	.word	0x40012c00
 8009414:	40013400 	.word	0x40013400
 8009418:	40015000 	.word	0x40015000
 800941c:	40014000 	.word	0x40014000
 8009420:	40014400 	.word	0x40014400
 8009424:	40014800 	.word	0x40014800

08009428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800945a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0303 	bic.w	r3, r3, #3
 8009462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a2b      	ldr	r2, [pc, #172]	@ (8009534 <TIM_OC3_SetConfig+0x10c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d007      	beq.n	800949a <TIM_OC3_SetConfig+0x72>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a2a      	ldr	r2, [pc, #168]	@ (8009538 <TIM_OC3_SetConfig+0x110>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_OC3_SetConfig+0x72>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a29      	ldr	r2, [pc, #164]	@ (800953c <TIM_OC3_SetConfig+0x114>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d10d      	bne.n	80094b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	021b      	lsls	r3, r3, #8
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009534 <TIM_OC3_SetConfig+0x10c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d013      	beq.n	80094e6 <TIM_OC3_SetConfig+0xbe>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009538 <TIM_OC3_SetConfig+0x110>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d00f      	beq.n	80094e6 <TIM_OC3_SetConfig+0xbe>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009540 <TIM_OC3_SetConfig+0x118>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00b      	beq.n	80094e6 <TIM_OC3_SetConfig+0xbe>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009544 <TIM_OC3_SetConfig+0x11c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d007      	beq.n	80094e6 <TIM_OC3_SetConfig+0xbe>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009548 <TIM_OC3_SetConfig+0x120>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d003      	beq.n	80094e6 <TIM_OC3_SetConfig+0xbe>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a16      	ldr	r2, [pc, #88]	@ (800953c <TIM_OC3_SetConfig+0x114>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d113      	bne.n	800950e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	011b      	lsls	r3, r3, #4
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	4313      	orrs	r3, r2
 800950c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	621a      	str	r2, [r3, #32]
}
 8009528:	bf00      	nop
 800952a:	371c      	adds	r7, #28
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	40012c00 	.word	0x40012c00
 8009538:	40013400 	.word	0x40013400
 800953c:	40015000 	.word	0x40015000
 8009540:	40014000 	.word	0x40014000
 8009544:	40014400 	.word	0x40014400
 8009548:	40014800 	.word	0x40014800

0800954c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800954c:	b480      	push	{r7}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800957a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800957e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	4313      	orrs	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800959a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	031b      	lsls	r3, r3, #12
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1a      	ldr	r2, [pc, #104]	@ (8009614 <TIM_OC4_SetConfig+0xc8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d013      	beq.n	80095d8 <TIM_OC4_SetConfig+0x8c>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a19      	ldr	r2, [pc, #100]	@ (8009618 <TIM_OC4_SetConfig+0xcc>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d00f      	beq.n	80095d8 <TIM_OC4_SetConfig+0x8c>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a18      	ldr	r2, [pc, #96]	@ (800961c <TIM_OC4_SetConfig+0xd0>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00b      	beq.n	80095d8 <TIM_OC4_SetConfig+0x8c>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a17      	ldr	r2, [pc, #92]	@ (8009620 <TIM_OC4_SetConfig+0xd4>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d007      	beq.n	80095d8 <TIM_OC4_SetConfig+0x8c>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a16      	ldr	r2, [pc, #88]	@ (8009624 <TIM_OC4_SetConfig+0xd8>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_OC4_SetConfig+0x8c>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a15      	ldr	r2, [pc, #84]	@ (8009628 <TIM_OC4_SetConfig+0xdc>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d109      	bne.n	80095ec <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	019b      	lsls	r3, r3, #6
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	621a      	str	r2, [r3, #32]
}
 8009606:	bf00      	nop
 8009608:	371c      	adds	r7, #28
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40012c00 	.word	0x40012c00
 8009618:	40013400 	.word	0x40013400
 800961c:	40014000 	.word	0x40014000
 8009620:	40014400 	.word	0x40014400
 8009624:	40014800 	.word	0x40014800
 8009628:	40015000 	.word	0x40015000

0800962c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800965a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800965e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009670:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	041b      	lsls	r3, r3, #16
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a19      	ldr	r2, [pc, #100]	@ (80096e8 <TIM_OC5_SetConfig+0xbc>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d013      	beq.n	80096ae <TIM_OC5_SetConfig+0x82>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a18      	ldr	r2, [pc, #96]	@ (80096ec <TIM_OC5_SetConfig+0xc0>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d00f      	beq.n	80096ae <TIM_OC5_SetConfig+0x82>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a17      	ldr	r2, [pc, #92]	@ (80096f0 <TIM_OC5_SetConfig+0xc4>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d00b      	beq.n	80096ae <TIM_OC5_SetConfig+0x82>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a16      	ldr	r2, [pc, #88]	@ (80096f4 <TIM_OC5_SetConfig+0xc8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d007      	beq.n	80096ae <TIM_OC5_SetConfig+0x82>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a15      	ldr	r2, [pc, #84]	@ (80096f8 <TIM_OC5_SetConfig+0xcc>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d003      	beq.n	80096ae <TIM_OC5_SetConfig+0x82>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a14      	ldr	r2, [pc, #80]	@ (80096fc <TIM_OC5_SetConfig+0xd0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d109      	bne.n	80096c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	021b      	lsls	r3, r3, #8
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	4313      	orrs	r3, r2
 80096c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	621a      	str	r2, [r3, #32]
}
 80096dc:	bf00      	nop
 80096de:	371c      	adds	r7, #28
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	40012c00 	.word	0x40012c00
 80096ec:	40013400 	.word	0x40013400
 80096f0:	40014000 	.word	0x40014000
 80096f4:	40014400 	.word	0x40014400
 80096f8:	40014800 	.word	0x40014800
 80096fc:	40015000 	.word	0x40015000

08009700 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800972e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	021b      	lsls	r3, r3, #8
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	051b      	lsls	r3, r3, #20
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	4313      	orrs	r3, r2
 8009752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a1a      	ldr	r2, [pc, #104]	@ (80097c0 <TIM_OC6_SetConfig+0xc0>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d013      	beq.n	8009784 <TIM_OC6_SetConfig+0x84>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a19      	ldr	r2, [pc, #100]	@ (80097c4 <TIM_OC6_SetConfig+0xc4>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00f      	beq.n	8009784 <TIM_OC6_SetConfig+0x84>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a18      	ldr	r2, [pc, #96]	@ (80097c8 <TIM_OC6_SetConfig+0xc8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d00b      	beq.n	8009784 <TIM_OC6_SetConfig+0x84>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a17      	ldr	r2, [pc, #92]	@ (80097cc <TIM_OC6_SetConfig+0xcc>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d007      	beq.n	8009784 <TIM_OC6_SetConfig+0x84>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a16      	ldr	r2, [pc, #88]	@ (80097d0 <TIM_OC6_SetConfig+0xd0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d003      	beq.n	8009784 <TIM_OC6_SetConfig+0x84>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a15      	ldr	r2, [pc, #84]	@ (80097d4 <TIM_OC6_SetConfig+0xd4>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d109      	bne.n	8009798 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800978a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	695b      	ldr	r3, [r3, #20]
 8009790:	029b      	lsls	r3, r3, #10
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	4313      	orrs	r3, r2
 8009796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	621a      	str	r2, [r3, #32]
}
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	40012c00 	.word	0x40012c00
 80097c4:	40013400 	.word	0x40013400
 80097c8:	40014000 	.word	0x40014000
 80097cc:	40014400 	.word	0x40014400
 80097d0:	40014800 	.word	0x40014800
 80097d4:	40015000 	.word	0x40015000

080097d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097d8:	b480      	push	{r7}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	f023 0201 	bic.w	r2, r3, #1
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	011b      	lsls	r3, r3, #4
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	4313      	orrs	r3, r2
 800980c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f023 030a 	bic.w	r3, r3, #10
 8009814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	4313      	orrs	r3, r2
 800981c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	621a      	str	r2, [r3, #32]
}
 800982a:	bf00      	nop
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009836:	b480      	push	{r7}
 8009838:	b087      	sub	sp, #28
 800983a:	af00      	add	r7, sp, #0
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	f023 0210 	bic.w	r2, r3, #16
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	031b      	lsls	r3, r3, #12
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	4313      	orrs	r3, r2
 800986a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009872:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	011b      	lsls	r3, r3, #4
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	4313      	orrs	r3, r2
 800987c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	f043 0307 	orr.w	r3, r3, #7
 80098b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	609a      	str	r2, [r3, #8]
}
 80098c0:	bf00      	nop
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	021a      	lsls	r2, r3, #8
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	431a      	orrs	r2, r3
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	609a      	str	r2, [r3, #8]
}
 8009900:	bf00      	nop
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f003 031f 	and.w	r3, r3, #31
 800991e:	2201      	movs	r2, #1
 8009920:	fa02 f303 	lsl.w	r3, r2, r3
 8009924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a1a      	ldr	r2, [r3, #32]
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	43db      	mvns	r3, r3
 800992e:	401a      	ands	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6a1a      	ldr	r2, [r3, #32]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f003 031f 	and.w	r3, r3, #31
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	fa01 f303 	lsl.w	r3, r1, r3
 8009944:	431a      	orrs	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	621a      	str	r2, [r3, #32]
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
	...

08009958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009968:	2b01      	cmp	r3, #1
 800996a:	d101      	bne.n	8009970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800996c:	2302      	movs	r3, #2
 800996e:	e06d      	b.n	8009a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a30      	ldr	r2, [pc, #192]	@ (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d009      	beq.n	80099ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a2f      	ldr	r2, [pc, #188]	@ (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d004      	beq.n	80099ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a2d      	ldr	r2, [pc, #180]	@ (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d108      	bne.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a1e      	ldr	r2, [pc, #120]	@ (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d01d      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ec:	d018      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009a64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d013      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00e      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a15      	ldr	r2, [pc, #84]	@ (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d009      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a16      	ldr	r2, [pc, #88]	@ (8009a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a11      	ldr	r2, [pc, #68]	@ (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10c      	bne.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	40012c00 	.word	0x40012c00
 8009a5c:	40013400 	.word	0x40013400
 8009a60:	40015000 	.word	0x40015000
 8009a64:	40000400 	.word	0x40000400
 8009a68:	40000800 	.word	0x40000800
 8009a6c:	40014000 	.word	0x40014000

08009a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e040      	b.n	8009b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7fa fdd0 	bl	8004638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2224      	movs	r2, #36	@ 0x24
 8009a9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 0201 	bic.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 ff32 	bl	800a920 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fd5b 	bl	800a578 <UART_SetConfig>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d101      	bne.n	8009acc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e01b      	b.n	8009b04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689a      	ldr	r2, [r3, #8]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 ffb1 	bl	800aa64 <UART_CheckIdleState>
 8009b02:	4603      	mov	r3, r0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08a      	sub	sp, #40	@ 0x28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	4613      	mov	r3, r2
 8009b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	d165      	bne.n	8009bee <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d002      	beq.n	8009b2e <HAL_UART_Transmit_DMA+0x22>
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e05e      	b.n	8009bf0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	88fa      	ldrh	r2, [r7, #6]
 8009b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	88fa      	ldrh	r2, [r7, #6]
 8009b44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2221      	movs	r2, #33	@ 0x21
 8009b54:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d027      	beq.n	8009bae <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b62:	4a25      	ldr	r2, [pc, #148]	@ (8009bf8 <HAL_UART_Transmit_DMA+0xec>)
 8009b64:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b6a:	4a24      	ldr	r2, [pc, #144]	@ (8009bfc <HAL_UART_Transmit_DMA+0xf0>)
 8009b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b72:	4a23      	ldr	r2, [pc, #140]	@ (8009c00 <HAL_UART_Transmit_DMA+0xf4>)
 8009b74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b86:	4619      	mov	r1, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3328      	adds	r3, #40	@ 0x28
 8009b8e:	461a      	mov	r2, r3
 8009b90:	88fb      	ldrh	r3, [r7, #6]
 8009b92:	f7fb f9d1 	bl	8004f38 <HAL_DMA_Start_IT>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d008      	beq.n	8009bae <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2210      	movs	r2, #16
 8009ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e020      	b.n	8009bf0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2240      	movs	r2, #64	@ 0x40
 8009bb4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3308      	adds	r3, #8
 8009bbc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bd6:	623a      	str	r2, [r7, #32]
 8009bd8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	69f9      	ldr	r1, [r7, #28]
 8009bdc:	6a3a      	ldr	r2, [r7, #32]
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e5      	bne.n	8009bb6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	e000      	b.n	8009bf0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009bee:	2302      	movs	r3, #2
  }
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3728      	adds	r7, #40	@ 0x28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	0800aee5 	.word	0x0800aee5
 8009bfc:	0800af79 	.word	0x0800af79
 8009c00:	0800b0f9 	.word	0x0800b0f9

08009c04 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b0a0      	sub	sp, #128	@ 0x80
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c1c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8009c20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c2c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009c30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009c38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e6      	bne.n	8009c0c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3308      	adds	r3, #8
 8009c44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c48:	e853 3f00 	ldrex	r3, [r3]
 8009c4c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c50:	f023 0301 	bic.w	r3, r3, #1
 8009c54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009c5e:	657a      	str	r2, [r7, #84]	@ 0x54
 8009c60:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c66:	e841 2300 	strex	r3, r2, [r1]
 8009c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1e5      	bne.n	8009c3e <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d118      	bne.n	8009cac <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8a:	f023 0310 	bic.w	r3, r3, #16
 8009c8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e6      	bne.n	8009c7a <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb6:	2b80      	cmp	r3, #128	@ 0x80
 8009cb8:	d137      	bne.n	8009d2a <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	6a3b      	ldr	r3, [r7, #32]
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e5      	bne.n	8009cba <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d019      	beq.n	8009d2a <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fb f977 	bl	8004ff6 <HAL_DMA_Abort>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00d      	beq.n	8009d2a <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fb fa8e 	bl	8005234 <HAL_DMA_GetError>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	d105      	bne.n	8009d2a <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2210      	movs	r2, #16
 8009d22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e061      	b.n	8009dee <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d34:	2b40      	cmp	r3, #64	@ 0x40
 8009d36:	d137      	bne.n	8009da8 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	e853 3f00 	ldrex	r3, [r3]
 8009d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3308      	adds	r3, #8
 8009d56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d58:	61ba      	str	r2, [r7, #24]
 8009d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6979      	ldr	r1, [r7, #20]
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	613b      	str	r3, [r7, #16]
   return(result);
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e5      	bne.n	8009d38 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d019      	beq.n	8009da8 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d78:	2200      	movs	r2, #0
 8009d7a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fb f938 	bl	8004ff6 <HAL_DMA_Abort>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00d      	beq.n	8009da8 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fb fa4f 	bl	8005234 <HAL_DMA_GetError>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	d105      	bne.n	8009da8 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2210      	movs	r2, #16
 8009da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e022      	b.n	8009dee <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	220f      	movs	r2, #15
 8009dbe:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0208 	orr.w	r2, r2, #8
 8009dce:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2220      	movs	r2, #32
 8009dd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3780      	adds	r7, #128	@ 0x80
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b09a      	sub	sp, #104	@ 0x68
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e06:	e853 3f00 	ldrex	r3, [r3]
 8009e0a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e12:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e1e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e24:	e841 2300 	strex	r3, r2, [r1]
 8009e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1e6      	bne.n	8009dfe <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3308      	adds	r3, #8
 8009e36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e42:	f023 0301 	bic.w	r3, r3, #1
 8009e46:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e50:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e5      	bne.n	8009e30 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d118      	bne.n	8009e9e <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	f023 0310 	bic.w	r3, r3, #16
 8009e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e92:	e841 2300 	strex	r3, r2, [r1]
 8009e96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e6      	bne.n	8009e6c <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea8:	2b40      	cmp	r3, #64	@ 0x40
 8009eaa:	d137      	bne.n	8009f1c <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3308      	adds	r3, #8
 8009eca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ecc:	61ba      	str	r2, [r7, #24]
 8009ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6979      	ldr	r1, [r7, #20]
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e5      	bne.n	8009eac <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d019      	beq.n	8009f1c <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eec:	2200      	movs	r2, #0
 8009eee:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fb f87e 	bl	8004ff6 <HAL_DMA_Abort>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00d      	beq.n	8009f1c <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fb f995 	bl	8005234 <HAL_DMA_GetError>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	d105      	bne.n	8009f1c <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2210      	movs	r2, #16
 8009f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e017      	b.n	8009f4c <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	220f      	movs	r2, #15
 8009f2a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	699a      	ldr	r2, [r3, #24]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f042 0208 	orr.w	r2, r2, #8
 8009f3a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3768      	adds	r7, #104	@ 0x68
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b0ba      	sub	sp, #232	@ 0xe8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009f7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009f82:	4013      	ands	r3, r2
 8009f84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d115      	bne.n	8009fbc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f94:	f003 0320 	and.w	r3, r3, #32
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00f      	beq.n	8009fbc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fa0:	f003 0320 	and.w	r3, r3, #32
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d009      	beq.n	8009fbc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 82ab 	beq.w	800a508 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	4798      	blx	r3
      }
      return;
 8009fba:	e2a5      	b.n	800a508 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 8117 	beq.w	800a1f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009fd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009fd6:	4b85      	ldr	r3, [pc, #532]	@ (800a1ec <HAL_UART_IRQHandler+0x298>)
 8009fd8:	4013      	ands	r3, r2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 810a 	beq.w	800a1f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d011      	beq.n	800a010 <HAL_UART_IRQHandler+0xbc>
 8009fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a006:	f043 0201 	orr.w	r2, r3, #1
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d011      	beq.n	800a040 <HAL_UART_IRQHandler+0xec>
 800a01c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00b      	beq.n	800a040 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2202      	movs	r2, #2
 800a02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a036:	f043 0204 	orr.w	r2, r3, #4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d011      	beq.n	800a070 <HAL_UART_IRQHandler+0x11c>
 800a04c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00b      	beq.n	800a070 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2204      	movs	r2, #4
 800a05e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a066:	f043 0202 	orr.w	r2, r3, #2
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d017      	beq.n	800a0ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b00      	cmp	r3, #0
 800a086:	d105      	bne.n	800a094 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a08c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00b      	beq.n	800a0ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2208      	movs	r2, #8
 800a09a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0a2:	f043 0208 	orr.w	r2, r3, #8
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d012      	beq.n	800a0de <HAL_UART_IRQHandler+0x18a>
 800a0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00c      	beq.n	800a0de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0d4:	f043 0220 	orr.w	r2, r3, #32
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 8211 	beq.w	800a50c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ee:	f003 0320 	and.w	r3, r3, #32
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00d      	beq.n	800a112 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a0f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0fa:	f003 0320 	and.w	r3, r3, #32
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d007      	beq.n	800a112 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a106:	2b00      	cmp	r3, #0
 800a108:	d003      	beq.n	800a112 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a126:	2b40      	cmp	r3, #64	@ 0x40
 800a128:	d005      	beq.n	800a136 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a12a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a12e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a132:	2b00      	cmp	r3, #0
 800a134:	d04f      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fe70 	bl	800ae1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a146:	2b40      	cmp	r3, #64	@ 0x40
 800a148:	d141      	bne.n	800a1ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3308      	adds	r3, #8
 800a150:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3308      	adds	r3, #8
 800a172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a176:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a17a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a18e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1d9      	bne.n	800a14a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d013      	beq.n	800a1c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1a2:	4a13      	ldr	r2, [pc, #76]	@ (800a1f0 <HAL_UART_IRQHandler+0x29c>)
 800a1a4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fa ff61 	bl	8005072 <HAL_DMA_Abort_IT>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d017      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c4:	e00f      	b.n	800a1e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7f6 fdb0 	bl	8000d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1cc:	e00b      	b.n	800a1e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7f6 fdac 	bl	8000d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1d4:	e007      	b.n	800a1e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7f6 fda8 	bl	8000d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a1e4:	e192      	b.n	800a50c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1e6:	bf00      	nop
    return;
 800a1e8:	e190      	b.n	800a50c <HAL_UART_IRQHandler+0x5b8>
 800a1ea:	bf00      	nop
 800a1ec:	04000120 	.word	0x04000120
 800a1f0:	0800b177 	.word	0x0800b177

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	f040 814b 	bne.w	800a494 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a202:	f003 0310 	and.w	r3, r3, #16
 800a206:	2b00      	cmp	r3, #0
 800a208:	f000 8144 	beq.w	800a494 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a210:	f003 0310 	and.w	r3, r3, #16
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 813d 	beq.w	800a494 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2210      	movs	r2, #16
 800a220:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a22c:	2b40      	cmp	r3, #64	@ 0x40
 800a22e:	f040 80b5 	bne.w	800a39c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a23e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 8164 	beq.w	800a510 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a24e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a252:	429a      	cmp	r2, r3
 800a254:	f080 815c 	bcs.w	800a510 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a25e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	2b20      	cmp	r3, #32
 800a26a:	f000 8086 	beq.w	800a37a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a276:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a27a:	e853 3f00 	ldrex	r3, [r3]
 800a27e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a282:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a286:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a28a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a298:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a29c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a2a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a2a8:	e841 2300 	strex	r3, r2, [r1]
 800a2ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a2b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1da      	bne.n	800a26e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3308      	adds	r3, #8
 800a2be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2c2:	e853 3f00 	ldrex	r3, [r3]
 800a2c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a2c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a2ca:	f023 0301 	bic.w	r3, r3, #1
 800a2ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a2dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a2e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a2e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a2ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e1      	bne.n	800a2b8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2fe:	e853 3f00 	ldrex	r3, [r3]
 800a302:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a30a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3308      	adds	r3, #8
 800a314:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a318:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a31a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a31e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a320:	e841 2300 	strex	r3, r2, [r1]
 800a324:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1e3      	bne.n	800a2f4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2220      	movs	r2, #32
 800a330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a342:	e853 3f00 	ldrex	r3, [r3]
 800a346:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a34a:	f023 0310 	bic.w	r3, r3, #16
 800a34e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	461a      	mov	r2, r3
 800a358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a35c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a35e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a362:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a36a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e4      	bne.n	800a33a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a374:	4618      	mov	r0, r3
 800a376:	f7fa fe3e 	bl	8004ff6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2202      	movs	r2, #2
 800a37e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	b29b      	uxth	r3, r3
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7f6 fd21 	bl	8000ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a39a:	e0b9      	b.n	800a510 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 80ab 	beq.w	800a514 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800a3be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 80a6 	beq.w	800a514 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a3ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a3f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e4      	bne.n	800a3c8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3308      	adds	r3, #8
 800a404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	623b      	str	r3, [r7, #32]
   return(result);
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	f023 0301 	bic.w	r3, r3, #1
 800a414:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3308      	adds	r3, #8
 800a41e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a422:	633a      	str	r2, [r7, #48]	@ 0x30
 800a424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a42a:	e841 2300 	strex	r3, r2, [r1]
 800a42e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1e3      	bne.n	800a3fe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2220      	movs	r2, #32
 800a43a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	e853 3f00 	ldrex	r3, [r3]
 800a456:	60fb      	str	r3, [r7, #12]
   return(result);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 0310 	bic.w	r3, r3, #16
 800a45e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a46c:	61fb      	str	r3, [r7, #28]
 800a46e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	69b9      	ldr	r1, [r7, #24]
 800a472:	69fa      	ldr	r2, [r7, #28]
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	617b      	str	r3, [r7, #20]
   return(result);
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e4      	bne.n	800a44a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2202      	movs	r2, #2
 800a484:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7f6 fca5 	bl	8000ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a492:	e03f      	b.n	800a514 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00e      	beq.n	800a4be <HAL_UART_IRQHandler+0x56a>
 800a4a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d008      	beq.n	800a4be <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a4b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fe9d 	bl	800b1f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4bc:	e02d      	b.n	800a51a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a4be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00e      	beq.n	800a4e8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a4ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d01c      	beq.n	800a518 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	4798      	blx	r3
    }
    return;
 800a4e6:	e017      	b.n	800a518 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d012      	beq.n	800a51a <HAL_UART_IRQHandler+0x5c6>
 800a4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00c      	beq.n	800a51a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fe4e 	bl	800b1a2 <UART_EndTransmit_IT>
    return;
 800a506:	e008      	b.n	800a51a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a508:	bf00      	nop
 800a50a:	e006      	b.n	800a51a <HAL_UART_IRQHandler+0x5c6>
    return;
 800a50c:	bf00      	nop
 800a50e:	e004      	b.n	800a51a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a510:	bf00      	nop
 800a512:	e002      	b.n	800a51a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a514:	bf00      	nop
 800a516:	e000      	b.n	800a51a <HAL_UART_IRQHandler+0x5c6>
    return;
 800a518:	bf00      	nop
  }

}
 800a51a:	37e8      	adds	r7, #232	@ 0xe8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
	...

0800a578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	431a      	orrs	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	431a      	orrs	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	4313      	orrs	r3, r2
 800a59a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	4b92      	ldr	r3, [pc, #584]	@ (800a7ec <UART_SetConfig+0x274>)
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	6812      	ldr	r2, [r2, #0]
 800a5aa:	6979      	ldr	r1, [r7, #20]
 800a5ac:	430b      	orrs	r3, r1
 800a5ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a80      	ldr	r2, [pc, #512]	@ (800a7f0 <UART_SetConfig+0x278>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d120      	bne.n	800a636 <UART_SetConfig+0xbe>
 800a5f4:	4b7f      	ldr	r3, [pc, #508]	@ (800a7f4 <UART_SetConfig+0x27c>)
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d817      	bhi.n	800a630 <UART_SetConfig+0xb8>
 800a600:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <UART_SetConfig+0x90>)
 800a602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a606:	bf00      	nop
 800a608:	0800a619 	.word	0x0800a619
 800a60c:	0800a625 	.word	0x0800a625
 800a610:	0800a62b 	.word	0x0800a62b
 800a614:	0800a61f 	.word	0x0800a61f
 800a618:	2301      	movs	r3, #1
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	e0b5      	b.n	800a78a <UART_SetConfig+0x212>
 800a61e:	2302      	movs	r3, #2
 800a620:	77fb      	strb	r3, [r7, #31]
 800a622:	e0b2      	b.n	800a78a <UART_SetConfig+0x212>
 800a624:	2304      	movs	r3, #4
 800a626:	77fb      	strb	r3, [r7, #31]
 800a628:	e0af      	b.n	800a78a <UART_SetConfig+0x212>
 800a62a:	2308      	movs	r3, #8
 800a62c:	77fb      	strb	r3, [r7, #31]
 800a62e:	e0ac      	b.n	800a78a <UART_SetConfig+0x212>
 800a630:	2310      	movs	r3, #16
 800a632:	77fb      	strb	r3, [r7, #31]
 800a634:	e0a9      	b.n	800a78a <UART_SetConfig+0x212>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a6f      	ldr	r2, [pc, #444]	@ (800a7f8 <UART_SetConfig+0x280>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d124      	bne.n	800a68a <UART_SetConfig+0x112>
 800a640:	4b6c      	ldr	r3, [pc, #432]	@ (800a7f4 <UART_SetConfig+0x27c>)
 800a642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a648:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a64c:	d011      	beq.n	800a672 <UART_SetConfig+0xfa>
 800a64e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a652:	d817      	bhi.n	800a684 <UART_SetConfig+0x10c>
 800a654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a658:	d011      	beq.n	800a67e <UART_SetConfig+0x106>
 800a65a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a65e:	d811      	bhi.n	800a684 <UART_SetConfig+0x10c>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d003      	beq.n	800a66c <UART_SetConfig+0xf4>
 800a664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a668:	d006      	beq.n	800a678 <UART_SetConfig+0x100>
 800a66a:	e00b      	b.n	800a684 <UART_SetConfig+0x10c>
 800a66c:	2300      	movs	r3, #0
 800a66e:	77fb      	strb	r3, [r7, #31]
 800a670:	e08b      	b.n	800a78a <UART_SetConfig+0x212>
 800a672:	2302      	movs	r3, #2
 800a674:	77fb      	strb	r3, [r7, #31]
 800a676:	e088      	b.n	800a78a <UART_SetConfig+0x212>
 800a678:	2304      	movs	r3, #4
 800a67a:	77fb      	strb	r3, [r7, #31]
 800a67c:	e085      	b.n	800a78a <UART_SetConfig+0x212>
 800a67e:	2308      	movs	r3, #8
 800a680:	77fb      	strb	r3, [r7, #31]
 800a682:	e082      	b.n	800a78a <UART_SetConfig+0x212>
 800a684:	2310      	movs	r3, #16
 800a686:	77fb      	strb	r3, [r7, #31]
 800a688:	e07f      	b.n	800a78a <UART_SetConfig+0x212>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a5b      	ldr	r2, [pc, #364]	@ (800a7fc <UART_SetConfig+0x284>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d124      	bne.n	800a6de <UART_SetConfig+0x166>
 800a694:	4b57      	ldr	r3, [pc, #348]	@ (800a7f4 <UART_SetConfig+0x27c>)
 800a696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a698:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a69c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a6a0:	d011      	beq.n	800a6c6 <UART_SetConfig+0x14e>
 800a6a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a6a6:	d817      	bhi.n	800a6d8 <UART_SetConfig+0x160>
 800a6a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a6ac:	d011      	beq.n	800a6d2 <UART_SetConfig+0x15a>
 800a6ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a6b2:	d811      	bhi.n	800a6d8 <UART_SetConfig+0x160>
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <UART_SetConfig+0x148>
 800a6b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6bc:	d006      	beq.n	800a6cc <UART_SetConfig+0x154>
 800a6be:	e00b      	b.n	800a6d8 <UART_SetConfig+0x160>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	77fb      	strb	r3, [r7, #31]
 800a6c4:	e061      	b.n	800a78a <UART_SetConfig+0x212>
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	77fb      	strb	r3, [r7, #31]
 800a6ca:	e05e      	b.n	800a78a <UART_SetConfig+0x212>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	77fb      	strb	r3, [r7, #31]
 800a6d0:	e05b      	b.n	800a78a <UART_SetConfig+0x212>
 800a6d2:	2308      	movs	r3, #8
 800a6d4:	77fb      	strb	r3, [r7, #31]
 800a6d6:	e058      	b.n	800a78a <UART_SetConfig+0x212>
 800a6d8:	2310      	movs	r3, #16
 800a6da:	77fb      	strb	r3, [r7, #31]
 800a6dc:	e055      	b.n	800a78a <UART_SetConfig+0x212>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a47      	ldr	r2, [pc, #284]	@ (800a800 <UART_SetConfig+0x288>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d124      	bne.n	800a732 <UART_SetConfig+0x1ba>
 800a6e8:	4b42      	ldr	r3, [pc, #264]	@ (800a7f4 <UART_SetConfig+0x27c>)
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a6f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6f4:	d011      	beq.n	800a71a <UART_SetConfig+0x1a2>
 800a6f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6fa:	d817      	bhi.n	800a72c <UART_SetConfig+0x1b4>
 800a6fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a700:	d011      	beq.n	800a726 <UART_SetConfig+0x1ae>
 800a702:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a706:	d811      	bhi.n	800a72c <UART_SetConfig+0x1b4>
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d003      	beq.n	800a714 <UART_SetConfig+0x19c>
 800a70c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a710:	d006      	beq.n	800a720 <UART_SetConfig+0x1a8>
 800a712:	e00b      	b.n	800a72c <UART_SetConfig+0x1b4>
 800a714:	2300      	movs	r3, #0
 800a716:	77fb      	strb	r3, [r7, #31]
 800a718:	e037      	b.n	800a78a <UART_SetConfig+0x212>
 800a71a:	2302      	movs	r3, #2
 800a71c:	77fb      	strb	r3, [r7, #31]
 800a71e:	e034      	b.n	800a78a <UART_SetConfig+0x212>
 800a720:	2304      	movs	r3, #4
 800a722:	77fb      	strb	r3, [r7, #31]
 800a724:	e031      	b.n	800a78a <UART_SetConfig+0x212>
 800a726:	2308      	movs	r3, #8
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e02e      	b.n	800a78a <UART_SetConfig+0x212>
 800a72c:	2310      	movs	r3, #16
 800a72e:	77fb      	strb	r3, [r7, #31]
 800a730:	e02b      	b.n	800a78a <UART_SetConfig+0x212>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a33      	ldr	r2, [pc, #204]	@ (800a804 <UART_SetConfig+0x28c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d124      	bne.n	800a786 <UART_SetConfig+0x20e>
 800a73c:	4b2d      	ldr	r3, [pc, #180]	@ (800a7f4 <UART_SetConfig+0x27c>)
 800a73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a740:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a744:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a748:	d011      	beq.n	800a76e <UART_SetConfig+0x1f6>
 800a74a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a74e:	d817      	bhi.n	800a780 <UART_SetConfig+0x208>
 800a750:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a754:	d011      	beq.n	800a77a <UART_SetConfig+0x202>
 800a756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a75a:	d811      	bhi.n	800a780 <UART_SetConfig+0x208>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d003      	beq.n	800a768 <UART_SetConfig+0x1f0>
 800a760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a764:	d006      	beq.n	800a774 <UART_SetConfig+0x1fc>
 800a766:	e00b      	b.n	800a780 <UART_SetConfig+0x208>
 800a768:	2300      	movs	r3, #0
 800a76a:	77fb      	strb	r3, [r7, #31]
 800a76c:	e00d      	b.n	800a78a <UART_SetConfig+0x212>
 800a76e:	2302      	movs	r3, #2
 800a770:	77fb      	strb	r3, [r7, #31]
 800a772:	e00a      	b.n	800a78a <UART_SetConfig+0x212>
 800a774:	2304      	movs	r3, #4
 800a776:	77fb      	strb	r3, [r7, #31]
 800a778:	e007      	b.n	800a78a <UART_SetConfig+0x212>
 800a77a:	2308      	movs	r3, #8
 800a77c:	77fb      	strb	r3, [r7, #31]
 800a77e:	e004      	b.n	800a78a <UART_SetConfig+0x212>
 800a780:	2310      	movs	r3, #16
 800a782:	77fb      	strb	r3, [r7, #31]
 800a784:	e001      	b.n	800a78a <UART_SetConfig+0x212>
 800a786:	2310      	movs	r3, #16
 800a788:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	69db      	ldr	r3, [r3, #28]
 800a78e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a792:	d16b      	bne.n	800a86c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800a794:	7ffb      	ldrb	r3, [r7, #31]
 800a796:	2b08      	cmp	r3, #8
 800a798:	d838      	bhi.n	800a80c <UART_SetConfig+0x294>
 800a79a:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a0 <UART_SetConfig+0x228>)
 800a79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a0:	0800a7c5 	.word	0x0800a7c5
 800a7a4:	0800a7cd 	.word	0x0800a7cd
 800a7a8:	0800a7d5 	.word	0x0800a7d5
 800a7ac:	0800a80d 	.word	0x0800a80d
 800a7b0:	0800a7db 	.word	0x0800a7db
 800a7b4:	0800a80d 	.word	0x0800a80d
 800a7b8:	0800a80d 	.word	0x0800a80d
 800a7bc:	0800a80d 	.word	0x0800a80d
 800a7c0:	0800a7e3 	.word	0x0800a7e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7c4:	f7fc fdf0 	bl	80073a8 <HAL_RCC_GetPCLK1Freq>
 800a7c8:	61b8      	str	r0, [r7, #24]
        break;
 800a7ca:	e024      	b.n	800a816 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7cc:	f7fc fe0e 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 800a7d0:	61b8      	str	r0, [r7, #24]
        break;
 800a7d2:	e020      	b.n	800a816 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a808 <UART_SetConfig+0x290>)
 800a7d6:	61bb      	str	r3, [r7, #24]
        break;
 800a7d8:	e01d      	b.n	800a816 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7da:	f7fc fd85 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 800a7de:	61b8      	str	r0, [r7, #24]
        break;
 800a7e0:	e019      	b.n	800a816 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7e6:	61bb      	str	r3, [r7, #24]
        break;
 800a7e8:	e015      	b.n	800a816 <UART_SetConfig+0x29e>
 800a7ea:	bf00      	nop
 800a7ec:	efff69f3 	.word	0xefff69f3
 800a7f0:	40013800 	.word	0x40013800
 800a7f4:	40021000 	.word	0x40021000
 800a7f8:	40004400 	.word	0x40004400
 800a7fc:	40004800 	.word	0x40004800
 800a800:	40004c00 	.word	0x40004c00
 800a804:	40005000 	.word	0x40005000
 800a808:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	77bb      	strb	r3, [r7, #30]
        break;
 800a814:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d073      	beq.n	800a904 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	005a      	lsls	r2, r3, #1
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	085b      	lsrs	r3, r3, #1
 800a826:	441a      	add	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a830:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2b0f      	cmp	r3, #15
 800a836:	d916      	bls.n	800a866 <UART_SetConfig+0x2ee>
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a83e:	d212      	bcs.n	800a866 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	b29b      	uxth	r3, r3
 800a844:	f023 030f 	bic.w	r3, r3, #15
 800a848:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	085b      	lsrs	r3, r3, #1
 800a84e:	b29b      	uxth	r3, r3
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	b29a      	uxth	r2, r3
 800a856:	89fb      	ldrh	r3, [r7, #14]
 800a858:	4313      	orrs	r3, r2
 800a85a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	89fa      	ldrh	r2, [r7, #14]
 800a862:	60da      	str	r2, [r3, #12]
 800a864:	e04e      	b.n	800a904 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	77bb      	strb	r3, [r7, #30]
 800a86a:	e04b      	b.n	800a904 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a86c:	7ffb      	ldrb	r3, [r7, #31]
 800a86e:	2b08      	cmp	r3, #8
 800a870:	d827      	bhi.n	800a8c2 <UART_SetConfig+0x34a>
 800a872:	a201      	add	r2, pc, #4	@ (adr r2, 800a878 <UART_SetConfig+0x300>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a89d 	.word	0x0800a89d
 800a87c:	0800a8a5 	.word	0x0800a8a5
 800a880:	0800a8ad 	.word	0x0800a8ad
 800a884:	0800a8c3 	.word	0x0800a8c3
 800a888:	0800a8b3 	.word	0x0800a8b3
 800a88c:	0800a8c3 	.word	0x0800a8c3
 800a890:	0800a8c3 	.word	0x0800a8c3
 800a894:	0800a8c3 	.word	0x0800a8c3
 800a898:	0800a8bb 	.word	0x0800a8bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a89c:	f7fc fd84 	bl	80073a8 <HAL_RCC_GetPCLK1Freq>
 800a8a0:	61b8      	str	r0, [r7, #24]
        break;
 800a8a2:	e013      	b.n	800a8cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8a4:	f7fc fda2 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 800a8a8:	61b8      	str	r0, [r7, #24]
        break;
 800a8aa:	e00f      	b.n	800a8cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a91c <UART_SetConfig+0x3a4>)
 800a8ae:	61bb      	str	r3, [r7, #24]
        break;
 800a8b0:	e00c      	b.n	800a8cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8b2:	f7fc fd19 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 800a8b6:	61b8      	str	r0, [r7, #24]
        break;
 800a8b8:	e008      	b.n	800a8cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8be:	61bb      	str	r3, [r7, #24]
        break;
 800a8c0:	e004      	b.n	800a8cc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	77bb      	strb	r3, [r7, #30]
        break;
 800a8ca:	bf00      	nop
    }

    if (pclk != 0U)
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d018      	beq.n	800a904 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	085a      	lsrs	r2, r3, #1
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	441a      	add	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	2b0f      	cmp	r3, #15
 800a8ea:	d909      	bls.n	800a900 <UART_SetConfig+0x388>
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f2:	d205      	bcs.n	800a900 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	60da      	str	r2, [r3, #12]
 800a8fe:	e001      	b.n	800a904 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a910:	7fbb      	ldrb	r3, [r7, #30]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3720      	adds	r7, #32
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	007a1200 	.word	0x007a1200

0800a920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92c:	f003 0308 	and.w	r3, r3, #8
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00a      	beq.n	800a94a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	430a      	orrs	r2, r1
 800a948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00a      	beq.n	800a96c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	430a      	orrs	r2, r1
 800a96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00a      	beq.n	800a98e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a992:	f003 0304 	and.w	r3, r3, #4
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b4:	f003 0310 	and.w	r3, r3, #16
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00a      	beq.n	800a9d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d6:	f003 0320 	and.w	r3, r3, #32
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00a      	beq.n	800a9f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01a      	beq.n	800aa36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa1e:	d10a      	bne.n	800aa36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	430a      	orrs	r2, r1
 800aa34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	605a      	str	r2, [r3, #4]
  }
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b098      	sub	sp, #96	@ 0x60
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa74:	f7fa f8d8 	bl	8004c28 <HAL_GetTick>
 800aa78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0308 	and.w	r3, r3, #8
 800aa84:	2b08      	cmp	r3, #8
 800aa86:	d12e      	bne.n	800aae6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa90:	2200      	movs	r2, #0
 800aa92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f88c 	bl	800abb4 <UART_WaitOnFlagUntilTimeout>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d021      	beq.n	800aae6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aab6:	653b      	str	r3, [r7, #80]	@ 0x50
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	461a      	mov	r2, r3
 800aabe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aac0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aac2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aac8:	e841 2300 	strex	r3, r2, [r1]
 800aacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1e6      	bne.n	800aaa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2220      	movs	r2, #32
 800aad8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e062      	b.n	800abac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0304 	and.w	r3, r3, #4
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d149      	bne.n	800ab88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aafc:	2200      	movs	r2, #0
 800aafe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f856 	bl	800abb4 <UART_WaitOnFlagUntilTimeout>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d03c      	beq.n	800ab88 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e6      	bne.n	800ab0e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3308      	adds	r3, #8
 800ab46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	e853 3f00 	ldrex	r3, [r3]
 800ab4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 0301 	bic.w	r3, r3, #1
 800ab56:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3308      	adds	r3, #8
 800ab5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab60:	61fa      	str	r2, [r7, #28]
 800ab62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab64:	69b9      	ldr	r1, [r7, #24]
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	e841 2300 	strex	r3, r2, [r1]
 800ab6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1e5      	bne.n	800ab40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2220      	movs	r2, #32
 800ab78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e011      	b.n	800abac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2220      	movs	r2, #32
 800ab92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3758      	adds	r7, #88	@ 0x58
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	4613      	mov	r3, r2
 800abc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc4:	e04f      	b.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abcc:	d04b      	beq.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abce:	f7fa f82b 	bl	8004c28 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d302      	bcc.n	800abe4 <UART_WaitOnFlagUntilTimeout+0x30>
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800abe4:	2303      	movs	r3, #3
 800abe6:	e04e      	b.n	800ac86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0304 	and.w	r3, r3, #4
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d037      	beq.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b80      	cmp	r3, #128	@ 0x80
 800abfa:	d034      	beq.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b40      	cmp	r3, #64	@ 0x40
 800ac00:	d031      	beq.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	69db      	ldr	r3, [r3, #28]
 800ac08:	f003 0308 	and.w	r3, r3, #8
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d110      	bne.n	800ac32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2208      	movs	r2, #8
 800ac16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f8ff 	bl	800ae1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2208      	movs	r2, #8
 800ac22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e029      	b.n	800ac86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac40:	d111      	bne.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f8e5 	bl	800ae1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2220      	movs	r2, #32
 800ac56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e00f      	b.n	800ac86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	69da      	ldr	r2, [r3, #28]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	bf0c      	ite	eq
 800ac76:	2301      	moveq	r3, #1
 800ac78:	2300      	movne	r3, #0
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d0a0      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b096      	sub	sp, #88	@ 0x58
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	88fa      	ldrh	r2, [r7, #6]
 800aca8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2222      	movs	r2, #34	@ 0x22
 800acb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d028      	beq.n	800ad16 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acc8:	4a3e      	ldr	r2, [pc, #248]	@ (800adc4 <UART_Start_Receive_DMA+0x134>)
 800acca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acd0:	4a3d      	ldr	r2, [pc, #244]	@ (800adc8 <UART_Start_Receive_DMA+0x138>)
 800acd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acd8:	4a3c      	ldr	r2, [pc, #240]	@ (800adcc <UART_Start_Receive_DMA+0x13c>)
 800acda:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ace0:	2200      	movs	r2, #0
 800ace2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3324      	adds	r3, #36	@ 0x24
 800acee:	4619      	mov	r1, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf4:	461a      	mov	r2, r3
 800acf6:	88fb      	ldrh	r3, [r7, #6]
 800acf8:	f7fa f91e 	bl	8004f38 <HAL_DMA_Start_IT>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2210      	movs	r2, #16
 800ad06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e051      	b.n	800adba <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d018      	beq.n	800ad50 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad32:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad3e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ad4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e6      	bne.n	800ad1e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3308      	adds	r3, #8
 800ad56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad70:	637a      	str	r2, [r7, #52]	@ 0x34
 800ad72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ad7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e5      	bne.n	800ad50 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3308      	adds	r3, #8
 800ad8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	613b      	str	r3, [r7, #16]
   return(result);
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3308      	adds	r3, #8
 800ada2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ada4:	623a      	str	r2, [r7, #32]
 800ada6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	69f9      	ldr	r1, [r7, #28]
 800adaa:	6a3a      	ldr	r2, [r7, #32]
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e5      	bne.n	800ad84 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3758      	adds	r7, #88	@ 0x58
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	0800af95 	.word	0x0800af95
 800adc8:	0800b0bb 	.word	0x0800b0bb
 800adcc:	0800b0f9 	.word	0x0800b0f9

0800add0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800add0:	b480      	push	{r7}
 800add2:	b089      	sub	sp, #36	@ 0x24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800adec:	61fb      	str	r3, [r7, #28]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	61bb      	str	r3, [r7, #24]
 800adf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6979      	ldr	r1, [r7, #20]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	613b      	str	r3, [r7, #16]
   return(result);
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e6      	bne.n	800add8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800ae10:	bf00      	nop
 800ae12:	3724      	adds	r7, #36	@ 0x24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b095      	sub	sp, #84	@ 0x54
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae42:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1e6      	bne.n	800ae24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	f023 0301 	bic.w	r3, r3, #1
 800ae6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3308      	adds	r3, #8
 800ae74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e5      	bne.n	800ae56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d118      	bne.n	800aec4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	e853 3f00 	ldrex	r3, [r3]
 800ae9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	f023 0310 	bic.w	r3, r3, #16
 800aea6:	647b      	str	r3, [r7, #68]	@ 0x44
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	461a      	mov	r2, r3
 800aeae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeb0:	61bb      	str	r3, [r7, #24]
 800aeb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb4:	6979      	ldr	r1, [r7, #20]
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	e841 2300 	strex	r3, r2, [r1]
 800aebc:	613b      	str	r3, [r7, #16]
   return(result);
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e6      	bne.n	800ae92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2220      	movs	r2, #32
 800aec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800aed8:	bf00      	nop
 800aeda:	3754      	adds	r7, #84	@ 0x54
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b090      	sub	sp, #64	@ 0x40
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	d037      	beq.n	800af6a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800aefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aefc:	2200      	movs	r2, #0
 800aefe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3308      	adds	r3, #8
 800af08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	623b      	str	r3, [r7, #32]
   return(result);
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3308      	adds	r3, #8
 800af20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af22:	633a      	str	r2, [r7, #48]	@ 0x30
 800af24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af2a:	e841 2300 	strex	r3, r2, [r1]
 800af2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1e5      	bne.n	800af02 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	e853 3f00 	ldrex	r3, [r3]
 800af42:	60fb      	str	r3, [r7, #12]
   return(result);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	461a      	mov	r2, r3
 800af52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af54:	61fb      	str	r3, [r7, #28]
 800af56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af58:	69b9      	ldr	r1, [r7, #24]
 800af5a:	69fa      	ldr	r2, [r7, #28]
 800af5c:	e841 2300 	strex	r3, r2, [r1]
 800af60:	617b      	str	r3, [r7, #20]
   return(result);
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1e6      	bne.n	800af36 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af68:	e002      	b.n	800af70 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800af6a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800af6c:	f7f5 ff06 	bl	8000d7c <HAL_UART_TxCpltCallback>
}
 800af70:	bf00      	nop
 800af72:	3740      	adds	r7, #64	@ 0x40
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7ff faca 	bl	800a520 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af8c:	bf00      	nop
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b09c      	sub	sp, #112	@ 0x70
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d071      	beq.n	800b08e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800afaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afac:	2200      	movs	r2, #0
 800afae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afba:	e853 3f00 	ldrex	r3, [r3]
 800afbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800afc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	461a      	mov	r2, r3
 800afce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afd2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800afd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afd8:	e841 2300 	strex	r3, r2, [r1]
 800afdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800afde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1e6      	bne.n	800afb2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3308      	adds	r3, #8
 800afea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afee:	e853 3f00 	ldrex	r3, [r3]
 800aff2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aff6:	f023 0301 	bic.w	r3, r3, #1
 800affa:	667b      	str	r3, [r7, #100]	@ 0x64
 800affc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3308      	adds	r3, #8
 800b002:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b004:	647a      	str	r2, [r7, #68]	@ 0x44
 800b006:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b008:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b00a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b00c:	e841 2300 	strex	r3, r2, [r1]
 800b010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1e5      	bne.n	800afe4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3308      	adds	r3, #8
 800b01e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	623b      	str	r3, [r7, #32]
   return(result);
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b02e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3308      	adds	r3, #8
 800b036:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b038:	633a      	str	r2, [r7, #48]	@ 0x30
 800b03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b03e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e5      	bne.n	800b018 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b04c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b04e:	2220      	movs	r2, #32
 800b050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d118      	bne.n	800b08e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	e853 3f00 	ldrex	r3, [r3]
 800b068:	60fb      	str	r3, [r7, #12]
   return(result);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f023 0310 	bic.w	r3, r3, #16
 800b070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b07a:	61fb      	str	r3, [r7, #28]
 800b07c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07e:	69b9      	ldr	r1, [r7, #24]
 800b080:	69fa      	ldr	r2, [r7, #28]
 800b082:	e841 2300 	strex	r3, r2, [r1]
 800b086:	617b      	str	r3, [r7, #20]
   return(result);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1e6      	bne.n	800b05c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b08e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b090:	2200      	movs	r2, #0
 800b092:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d107      	bne.n	800b0ac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b09c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b09e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b0a6:	f7f5 fe99 	bl	8000ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0aa:	e002      	b.n	800b0b2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b0ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b0ae:	f7ff fa41 	bl	800a534 <HAL_UART_RxCpltCallback>
}
 800b0b2:	bf00      	nop
 800b0b4:	3770      	adds	r7, #112	@ 0x70
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d109      	bne.n	800b0ea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b0dc:	085b      	lsrs	r3, r3, #1
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f7f5 fe7a 	bl	8000ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0e8:	e002      	b.n	800b0f0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f7ff fa2c 	bl	800a548 <HAL_UART_RxHalfCpltCallback>
}
 800b0f0:	bf00      	nop
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b104:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b10a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b112:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b11e:	2b80      	cmp	r3, #128	@ 0x80
 800b120:	d109      	bne.n	800b136 <UART_DMAError+0x3e>
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2b21      	cmp	r3, #33	@ 0x21
 800b126:	d106      	bne.n	800b136 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b130:	6978      	ldr	r0, [r7, #20]
 800b132:	f7ff fe4d 	bl	800add0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b140:	2b40      	cmp	r3, #64	@ 0x40
 800b142:	d109      	bne.n	800b158 <UART_DMAError+0x60>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b22      	cmp	r3, #34	@ 0x22
 800b148:	d106      	bne.n	800b158 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b152:	6978      	ldr	r0, [r7, #20]
 800b154:	f7ff fe62 	bl	800ae1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b15e:	f043 0210 	orr.w	r2, r3, #16
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b168:	6978      	ldr	r0, [r7, #20]
 800b16a:	f7f5 fddf 	bl	8000d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b16e:	bf00      	nop
 800b170:	3718      	adds	r7, #24
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f7f5 fdc9 	bl	8000d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b088      	sub	sp, #32
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	e853 3f00 	ldrex	r3, [r3]
 800b1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1be:	61fb      	str	r3, [r7, #28]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	61bb      	str	r3, [r7, #24]
 800b1ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1cc:	6979      	ldr	r1, [r7, #20]
 800b1ce:	69ba      	ldr	r2, [r7, #24]
 800b1d0:	e841 2300 	strex	r3, r2, [r1]
 800b1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1e6      	bne.n	800b1aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7f5 fdc7 	bl	8000d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1ee:	bf00      	nop
 800b1f0:	3720      	adds	r7, #32
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b083      	sub	sp, #12
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1fe:	bf00      	nop
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b08c      	sub	sp, #48	@ 0x30
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	60b9      	str	r1, [r7, #8]
 800b214:	4613      	mov	r3, r2
 800b216:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b21e:	2b20      	cmp	r3, #32
 800b220:	d142      	bne.n	800b2a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b228:	88fb      	ldrh	r3, [r7, #6]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e03b      	b.n	800b2aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2201      	movs	r2, #1
 800b236:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b23e:	88fb      	ldrh	r3, [r7, #6]
 800b240:	461a      	mov	r2, r3
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff fd23 	bl	800ac90 <UART_Start_Receive_DMA>
 800b24a:	4603      	mov	r3, r0
 800b24c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b254:	2b00      	cmp	r3, #0
 800b256:	d124      	bne.n	800b2a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d11d      	bne.n	800b29c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2210      	movs	r2, #16
 800b266:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	617b      	str	r3, [r7, #20]
   return(result);
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f043 0310 	orr.w	r3, r3, #16
 800b27c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b286:	627b      	str	r3, [r7, #36]	@ 0x24
 800b288:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28a:	6a39      	ldr	r1, [r7, #32]
 800b28c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b28e:	e841 2300 	strex	r3, r2, [r1]
 800b292:	61fb      	str	r3, [r7, #28]
   return(result);
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1e6      	bne.n	800b268 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b29a:	e002      	b.n	800b2a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2a6:	e000      	b.n	800b2aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b2a8:	2302      	movs	r3, #2
  }
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3730      	adds	r7, #48	@ 0x30
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <__cvt>:
 800b2b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b6:	ec57 6b10 	vmov	r6, r7, d0
 800b2ba:	2f00      	cmp	r7, #0
 800b2bc:	460c      	mov	r4, r1
 800b2be:	4619      	mov	r1, r3
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	bfbb      	ittet	lt
 800b2c4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b2c8:	461f      	movlt	r7, r3
 800b2ca:	2300      	movge	r3, #0
 800b2cc:	232d      	movlt	r3, #45	@ 0x2d
 800b2ce:	700b      	strb	r3, [r1, #0]
 800b2d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2d2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b2d6:	4691      	mov	r9, r2
 800b2d8:	f023 0820 	bic.w	r8, r3, #32
 800b2dc:	bfbc      	itt	lt
 800b2de:	4632      	movlt	r2, r6
 800b2e0:	4616      	movlt	r6, r2
 800b2e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2e6:	d005      	beq.n	800b2f4 <__cvt+0x42>
 800b2e8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b2ec:	d100      	bne.n	800b2f0 <__cvt+0x3e>
 800b2ee:	3401      	adds	r4, #1
 800b2f0:	2102      	movs	r1, #2
 800b2f2:	e000      	b.n	800b2f6 <__cvt+0x44>
 800b2f4:	2103      	movs	r1, #3
 800b2f6:	ab03      	add	r3, sp, #12
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	ab02      	add	r3, sp, #8
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	ec47 6b10 	vmov	d0, r6, r7
 800b302:	4653      	mov	r3, sl
 800b304:	4622      	mov	r2, r4
 800b306:	f001 f81f 	bl	800c348 <_dtoa_r>
 800b30a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b30e:	4605      	mov	r5, r0
 800b310:	d119      	bne.n	800b346 <__cvt+0x94>
 800b312:	f019 0f01 	tst.w	r9, #1
 800b316:	d00e      	beq.n	800b336 <__cvt+0x84>
 800b318:	eb00 0904 	add.w	r9, r0, r4
 800b31c:	2200      	movs	r2, #0
 800b31e:	2300      	movs	r3, #0
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f5 fbd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b328:	b108      	cbz	r0, 800b32e <__cvt+0x7c>
 800b32a:	f8cd 900c 	str.w	r9, [sp, #12]
 800b32e:	2230      	movs	r2, #48	@ 0x30
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	454b      	cmp	r3, r9
 800b334:	d31e      	bcc.n	800b374 <__cvt+0xc2>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b33a:	1b5b      	subs	r3, r3, r5
 800b33c:	4628      	mov	r0, r5
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	b004      	add	sp, #16
 800b342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b346:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b34a:	eb00 0904 	add.w	r9, r0, r4
 800b34e:	d1e5      	bne.n	800b31c <__cvt+0x6a>
 800b350:	7803      	ldrb	r3, [r0, #0]
 800b352:	2b30      	cmp	r3, #48	@ 0x30
 800b354:	d10a      	bne.n	800b36c <__cvt+0xba>
 800b356:	2200      	movs	r2, #0
 800b358:	2300      	movs	r3, #0
 800b35a:	4630      	mov	r0, r6
 800b35c:	4639      	mov	r1, r7
 800b35e:	f7f5 fbbb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b362:	b918      	cbnz	r0, 800b36c <__cvt+0xba>
 800b364:	f1c4 0401 	rsb	r4, r4, #1
 800b368:	f8ca 4000 	str.w	r4, [sl]
 800b36c:	f8da 3000 	ldr.w	r3, [sl]
 800b370:	4499      	add	r9, r3
 800b372:	e7d3      	b.n	800b31c <__cvt+0x6a>
 800b374:	1c59      	adds	r1, r3, #1
 800b376:	9103      	str	r1, [sp, #12]
 800b378:	701a      	strb	r2, [r3, #0]
 800b37a:	e7d9      	b.n	800b330 <__cvt+0x7e>

0800b37c <__exponent>:
 800b37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b37e:	2900      	cmp	r1, #0
 800b380:	bfba      	itte	lt
 800b382:	4249      	neglt	r1, r1
 800b384:	232d      	movlt	r3, #45	@ 0x2d
 800b386:	232b      	movge	r3, #43	@ 0x2b
 800b388:	2909      	cmp	r1, #9
 800b38a:	7002      	strb	r2, [r0, #0]
 800b38c:	7043      	strb	r3, [r0, #1]
 800b38e:	dd29      	ble.n	800b3e4 <__exponent+0x68>
 800b390:	f10d 0307 	add.w	r3, sp, #7
 800b394:	461d      	mov	r5, r3
 800b396:	270a      	movs	r7, #10
 800b398:	461a      	mov	r2, r3
 800b39a:	fbb1 f6f7 	udiv	r6, r1, r7
 800b39e:	fb07 1416 	mls	r4, r7, r6, r1
 800b3a2:	3430      	adds	r4, #48	@ 0x30
 800b3a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	2c63      	cmp	r4, #99	@ 0x63
 800b3ac:	f103 33ff 	add.w	r3, r3, #4294967295
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	dcf1      	bgt.n	800b398 <__exponent+0x1c>
 800b3b4:	3130      	adds	r1, #48	@ 0x30
 800b3b6:	1e94      	subs	r4, r2, #2
 800b3b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b3bc:	1c41      	adds	r1, r0, #1
 800b3be:	4623      	mov	r3, r4
 800b3c0:	42ab      	cmp	r3, r5
 800b3c2:	d30a      	bcc.n	800b3da <__exponent+0x5e>
 800b3c4:	f10d 0309 	add.w	r3, sp, #9
 800b3c8:	1a9b      	subs	r3, r3, r2
 800b3ca:	42ac      	cmp	r4, r5
 800b3cc:	bf88      	it	hi
 800b3ce:	2300      	movhi	r3, #0
 800b3d0:	3302      	adds	r3, #2
 800b3d2:	4403      	add	r3, r0
 800b3d4:	1a18      	subs	r0, r3, r0
 800b3d6:	b003      	add	sp, #12
 800b3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3da:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b3de:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b3e2:	e7ed      	b.n	800b3c0 <__exponent+0x44>
 800b3e4:	2330      	movs	r3, #48	@ 0x30
 800b3e6:	3130      	adds	r1, #48	@ 0x30
 800b3e8:	7083      	strb	r3, [r0, #2]
 800b3ea:	70c1      	strb	r1, [r0, #3]
 800b3ec:	1d03      	adds	r3, r0, #4
 800b3ee:	e7f1      	b.n	800b3d4 <__exponent+0x58>

0800b3f0 <_printf_float>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	b08d      	sub	sp, #52	@ 0x34
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	461f      	mov	r7, r3
 800b400:	4605      	mov	r5, r0
 800b402:	f000 fe89 	bl	800c118 <_localeconv_r>
 800b406:	6803      	ldr	r3, [r0, #0]
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7f4 ff38 	bl	8000280 <strlen>
 800b410:	2300      	movs	r3, #0
 800b412:	930a      	str	r3, [sp, #40]	@ 0x28
 800b414:	f8d8 3000 	ldr.w	r3, [r8]
 800b418:	9005      	str	r0, [sp, #20]
 800b41a:	3307      	adds	r3, #7
 800b41c:	f023 0307 	bic.w	r3, r3, #7
 800b420:	f103 0208 	add.w	r2, r3, #8
 800b424:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b428:	f8d4 b000 	ldr.w	fp, [r4]
 800b42c:	f8c8 2000 	str.w	r2, [r8]
 800b430:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b434:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b438:	9307      	str	r3, [sp, #28]
 800b43a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b43e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b446:	4b9c      	ldr	r3, [pc, #624]	@ (800b6b8 <_printf_float+0x2c8>)
 800b448:	f04f 32ff 	mov.w	r2, #4294967295
 800b44c:	f7f5 fb76 	bl	8000b3c <__aeabi_dcmpun>
 800b450:	bb70      	cbnz	r0, 800b4b0 <_printf_float+0xc0>
 800b452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b456:	4b98      	ldr	r3, [pc, #608]	@ (800b6b8 <_printf_float+0x2c8>)
 800b458:	f04f 32ff 	mov.w	r2, #4294967295
 800b45c:	f7f5 fb50 	bl	8000b00 <__aeabi_dcmple>
 800b460:	bb30      	cbnz	r0, 800b4b0 <_printf_float+0xc0>
 800b462:	2200      	movs	r2, #0
 800b464:	2300      	movs	r3, #0
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f7f5 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800b46e:	b110      	cbz	r0, 800b476 <_printf_float+0x86>
 800b470:	232d      	movs	r3, #45	@ 0x2d
 800b472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b476:	4a91      	ldr	r2, [pc, #580]	@ (800b6bc <_printf_float+0x2cc>)
 800b478:	4b91      	ldr	r3, [pc, #580]	@ (800b6c0 <_printf_float+0x2d0>)
 800b47a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b47e:	bf8c      	ite	hi
 800b480:	4690      	movhi	r8, r2
 800b482:	4698      	movls	r8, r3
 800b484:	2303      	movs	r3, #3
 800b486:	6123      	str	r3, [r4, #16]
 800b488:	f02b 0304 	bic.w	r3, fp, #4
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	f04f 0900 	mov.w	r9, #0
 800b492:	9700      	str	r7, [sp, #0]
 800b494:	4633      	mov	r3, r6
 800b496:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b498:	4621      	mov	r1, r4
 800b49a:	4628      	mov	r0, r5
 800b49c:	f000 f9d2 	bl	800b844 <_printf_common>
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	f040 808d 	bne.w	800b5c0 <_printf_float+0x1d0>
 800b4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4aa:	b00d      	add	sp, #52	@ 0x34
 800b4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b0:	4642      	mov	r2, r8
 800b4b2:	464b      	mov	r3, r9
 800b4b4:	4640      	mov	r0, r8
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	f7f5 fb40 	bl	8000b3c <__aeabi_dcmpun>
 800b4bc:	b140      	cbz	r0, 800b4d0 <_printf_float+0xe0>
 800b4be:	464b      	mov	r3, r9
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bfbc      	itt	lt
 800b4c4:	232d      	movlt	r3, #45	@ 0x2d
 800b4c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b4ca:	4a7e      	ldr	r2, [pc, #504]	@ (800b6c4 <_printf_float+0x2d4>)
 800b4cc:	4b7e      	ldr	r3, [pc, #504]	@ (800b6c8 <_printf_float+0x2d8>)
 800b4ce:	e7d4      	b.n	800b47a <_printf_float+0x8a>
 800b4d0:	6863      	ldr	r3, [r4, #4]
 800b4d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b4d6:	9206      	str	r2, [sp, #24]
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	d13b      	bne.n	800b554 <_printf_float+0x164>
 800b4dc:	2306      	movs	r3, #6
 800b4de:	6063      	str	r3, [r4, #4]
 800b4e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	6022      	str	r2, [r4, #0]
 800b4e8:	9303      	str	r3, [sp, #12]
 800b4ea:	ab0a      	add	r3, sp, #40	@ 0x28
 800b4ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b4f0:	ab09      	add	r3, sp, #36	@ 0x24
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	6861      	ldr	r1, [r4, #4]
 800b4f6:	ec49 8b10 	vmov	d0, r8, r9
 800b4fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b4fe:	4628      	mov	r0, r5
 800b500:	f7ff fed7 	bl	800b2b2 <__cvt>
 800b504:	9b06      	ldr	r3, [sp, #24]
 800b506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b508:	2b47      	cmp	r3, #71	@ 0x47
 800b50a:	4680      	mov	r8, r0
 800b50c:	d129      	bne.n	800b562 <_printf_float+0x172>
 800b50e:	1cc8      	adds	r0, r1, #3
 800b510:	db02      	blt.n	800b518 <_printf_float+0x128>
 800b512:	6863      	ldr	r3, [r4, #4]
 800b514:	4299      	cmp	r1, r3
 800b516:	dd41      	ble.n	800b59c <_printf_float+0x1ac>
 800b518:	f1aa 0a02 	sub.w	sl, sl, #2
 800b51c:	fa5f fa8a 	uxtb.w	sl, sl
 800b520:	3901      	subs	r1, #1
 800b522:	4652      	mov	r2, sl
 800b524:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b528:	9109      	str	r1, [sp, #36]	@ 0x24
 800b52a:	f7ff ff27 	bl	800b37c <__exponent>
 800b52e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b530:	1813      	adds	r3, r2, r0
 800b532:	2a01      	cmp	r2, #1
 800b534:	4681      	mov	r9, r0
 800b536:	6123      	str	r3, [r4, #16]
 800b538:	dc02      	bgt.n	800b540 <_printf_float+0x150>
 800b53a:	6822      	ldr	r2, [r4, #0]
 800b53c:	07d2      	lsls	r2, r2, #31
 800b53e:	d501      	bpl.n	800b544 <_printf_float+0x154>
 800b540:	3301      	adds	r3, #1
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d0a2      	beq.n	800b492 <_printf_float+0xa2>
 800b54c:	232d      	movs	r3, #45	@ 0x2d
 800b54e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b552:	e79e      	b.n	800b492 <_printf_float+0xa2>
 800b554:	9a06      	ldr	r2, [sp, #24]
 800b556:	2a47      	cmp	r2, #71	@ 0x47
 800b558:	d1c2      	bne.n	800b4e0 <_printf_float+0xf0>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1c0      	bne.n	800b4e0 <_printf_float+0xf0>
 800b55e:	2301      	movs	r3, #1
 800b560:	e7bd      	b.n	800b4de <_printf_float+0xee>
 800b562:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b566:	d9db      	bls.n	800b520 <_printf_float+0x130>
 800b568:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b56c:	d118      	bne.n	800b5a0 <_printf_float+0x1b0>
 800b56e:	2900      	cmp	r1, #0
 800b570:	6863      	ldr	r3, [r4, #4]
 800b572:	dd0b      	ble.n	800b58c <_printf_float+0x19c>
 800b574:	6121      	str	r1, [r4, #16]
 800b576:	b913      	cbnz	r3, 800b57e <_printf_float+0x18e>
 800b578:	6822      	ldr	r2, [r4, #0]
 800b57a:	07d0      	lsls	r0, r2, #31
 800b57c:	d502      	bpl.n	800b584 <_printf_float+0x194>
 800b57e:	3301      	adds	r3, #1
 800b580:	440b      	add	r3, r1
 800b582:	6123      	str	r3, [r4, #16]
 800b584:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b586:	f04f 0900 	mov.w	r9, #0
 800b58a:	e7db      	b.n	800b544 <_printf_float+0x154>
 800b58c:	b913      	cbnz	r3, 800b594 <_printf_float+0x1a4>
 800b58e:	6822      	ldr	r2, [r4, #0]
 800b590:	07d2      	lsls	r2, r2, #31
 800b592:	d501      	bpl.n	800b598 <_printf_float+0x1a8>
 800b594:	3302      	adds	r3, #2
 800b596:	e7f4      	b.n	800b582 <_printf_float+0x192>
 800b598:	2301      	movs	r3, #1
 800b59a:	e7f2      	b.n	800b582 <_printf_float+0x192>
 800b59c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5a2:	4299      	cmp	r1, r3
 800b5a4:	db05      	blt.n	800b5b2 <_printf_float+0x1c2>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	6121      	str	r1, [r4, #16]
 800b5aa:	07d8      	lsls	r0, r3, #31
 800b5ac:	d5ea      	bpl.n	800b584 <_printf_float+0x194>
 800b5ae:	1c4b      	adds	r3, r1, #1
 800b5b0:	e7e7      	b.n	800b582 <_printf_float+0x192>
 800b5b2:	2900      	cmp	r1, #0
 800b5b4:	bfd4      	ite	le
 800b5b6:	f1c1 0202 	rsble	r2, r1, #2
 800b5ba:	2201      	movgt	r2, #1
 800b5bc:	4413      	add	r3, r2
 800b5be:	e7e0      	b.n	800b582 <_printf_float+0x192>
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	055a      	lsls	r2, r3, #21
 800b5c4:	d407      	bmi.n	800b5d6 <_printf_float+0x1e6>
 800b5c6:	6923      	ldr	r3, [r4, #16]
 800b5c8:	4642      	mov	r2, r8
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	d12b      	bne.n	800b62c <_printf_float+0x23c>
 800b5d4:	e767      	b.n	800b4a6 <_printf_float+0xb6>
 800b5d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b5da:	f240 80dd 	bls.w	800b798 <_printf_float+0x3a8>
 800b5de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f7f5 fa77 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d033      	beq.n	800b656 <_printf_float+0x266>
 800b5ee:	4a37      	ldr	r2, [pc, #220]	@ (800b6cc <_printf_float+0x2dc>)
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	4631      	mov	r1, r6
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	47b8      	blx	r7
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	f43f af54 	beq.w	800b4a6 <_printf_float+0xb6>
 800b5fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b602:	4543      	cmp	r3, r8
 800b604:	db02      	blt.n	800b60c <_printf_float+0x21c>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	07d8      	lsls	r0, r3, #31
 800b60a:	d50f      	bpl.n	800b62c <_printf_float+0x23c>
 800b60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b610:	4631      	mov	r1, r6
 800b612:	4628      	mov	r0, r5
 800b614:	47b8      	blx	r7
 800b616:	3001      	adds	r0, #1
 800b618:	f43f af45 	beq.w	800b4a6 <_printf_float+0xb6>
 800b61c:	f04f 0900 	mov.w	r9, #0
 800b620:	f108 38ff 	add.w	r8, r8, #4294967295
 800b624:	f104 0a1a 	add.w	sl, r4, #26
 800b628:	45c8      	cmp	r8, r9
 800b62a:	dc09      	bgt.n	800b640 <_printf_float+0x250>
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	079b      	lsls	r3, r3, #30
 800b630:	f100 8103 	bmi.w	800b83a <_printf_float+0x44a>
 800b634:	68e0      	ldr	r0, [r4, #12]
 800b636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b638:	4298      	cmp	r0, r3
 800b63a:	bfb8      	it	lt
 800b63c:	4618      	movlt	r0, r3
 800b63e:	e734      	b.n	800b4aa <_printf_float+0xba>
 800b640:	2301      	movs	r3, #1
 800b642:	4652      	mov	r2, sl
 800b644:	4631      	mov	r1, r6
 800b646:	4628      	mov	r0, r5
 800b648:	47b8      	blx	r7
 800b64a:	3001      	adds	r0, #1
 800b64c:	f43f af2b 	beq.w	800b4a6 <_printf_float+0xb6>
 800b650:	f109 0901 	add.w	r9, r9, #1
 800b654:	e7e8      	b.n	800b628 <_printf_float+0x238>
 800b656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dc39      	bgt.n	800b6d0 <_printf_float+0x2e0>
 800b65c:	4a1b      	ldr	r2, [pc, #108]	@ (800b6cc <_printf_float+0x2dc>)
 800b65e:	2301      	movs	r3, #1
 800b660:	4631      	mov	r1, r6
 800b662:	4628      	mov	r0, r5
 800b664:	47b8      	blx	r7
 800b666:	3001      	adds	r0, #1
 800b668:	f43f af1d 	beq.w	800b4a6 <_printf_float+0xb6>
 800b66c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b670:	ea59 0303 	orrs.w	r3, r9, r3
 800b674:	d102      	bne.n	800b67c <_printf_float+0x28c>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	07d9      	lsls	r1, r3, #31
 800b67a:	d5d7      	bpl.n	800b62c <_printf_float+0x23c>
 800b67c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b680:	4631      	mov	r1, r6
 800b682:	4628      	mov	r0, r5
 800b684:	47b8      	blx	r7
 800b686:	3001      	adds	r0, #1
 800b688:	f43f af0d 	beq.w	800b4a6 <_printf_float+0xb6>
 800b68c:	f04f 0a00 	mov.w	sl, #0
 800b690:	f104 0b1a 	add.w	fp, r4, #26
 800b694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b696:	425b      	negs	r3, r3
 800b698:	4553      	cmp	r3, sl
 800b69a:	dc01      	bgt.n	800b6a0 <_printf_float+0x2b0>
 800b69c:	464b      	mov	r3, r9
 800b69e:	e793      	b.n	800b5c8 <_printf_float+0x1d8>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	465a      	mov	r2, fp
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	47b8      	blx	r7
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	f43f aefb 	beq.w	800b4a6 <_printf_float+0xb6>
 800b6b0:	f10a 0a01 	add.w	sl, sl, #1
 800b6b4:	e7ee      	b.n	800b694 <_printf_float+0x2a4>
 800b6b6:	bf00      	nop
 800b6b8:	7fefffff 	.word	0x7fefffff
 800b6bc:	0800ff54 	.word	0x0800ff54
 800b6c0:	0800ff50 	.word	0x0800ff50
 800b6c4:	0800ff5c 	.word	0x0800ff5c
 800b6c8:	0800ff58 	.word	0x0800ff58
 800b6cc:	0801008f 	.word	0x0801008f
 800b6d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6d6:	4553      	cmp	r3, sl
 800b6d8:	bfa8      	it	ge
 800b6da:	4653      	movge	r3, sl
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	4699      	mov	r9, r3
 800b6e0:	dc36      	bgt.n	800b750 <_printf_float+0x360>
 800b6e2:	f04f 0b00 	mov.w	fp, #0
 800b6e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6ea:	f104 021a 	add.w	r2, r4, #26
 800b6ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6f0:	9306      	str	r3, [sp, #24]
 800b6f2:	eba3 0309 	sub.w	r3, r3, r9
 800b6f6:	455b      	cmp	r3, fp
 800b6f8:	dc31      	bgt.n	800b75e <_printf_float+0x36e>
 800b6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6fc:	459a      	cmp	sl, r3
 800b6fe:	dc3a      	bgt.n	800b776 <_printf_float+0x386>
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	07da      	lsls	r2, r3, #31
 800b704:	d437      	bmi.n	800b776 <_printf_float+0x386>
 800b706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b708:	ebaa 0903 	sub.w	r9, sl, r3
 800b70c:	9b06      	ldr	r3, [sp, #24]
 800b70e:	ebaa 0303 	sub.w	r3, sl, r3
 800b712:	4599      	cmp	r9, r3
 800b714:	bfa8      	it	ge
 800b716:	4699      	movge	r9, r3
 800b718:	f1b9 0f00 	cmp.w	r9, #0
 800b71c:	dc33      	bgt.n	800b786 <_printf_float+0x396>
 800b71e:	f04f 0800 	mov.w	r8, #0
 800b722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b726:	f104 0b1a 	add.w	fp, r4, #26
 800b72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b72c:	ebaa 0303 	sub.w	r3, sl, r3
 800b730:	eba3 0309 	sub.w	r3, r3, r9
 800b734:	4543      	cmp	r3, r8
 800b736:	f77f af79 	ble.w	800b62c <_printf_float+0x23c>
 800b73a:	2301      	movs	r3, #1
 800b73c:	465a      	mov	r2, fp
 800b73e:	4631      	mov	r1, r6
 800b740:	4628      	mov	r0, r5
 800b742:	47b8      	blx	r7
 800b744:	3001      	adds	r0, #1
 800b746:	f43f aeae 	beq.w	800b4a6 <_printf_float+0xb6>
 800b74a:	f108 0801 	add.w	r8, r8, #1
 800b74e:	e7ec      	b.n	800b72a <_printf_float+0x33a>
 800b750:	4642      	mov	r2, r8
 800b752:	4631      	mov	r1, r6
 800b754:	4628      	mov	r0, r5
 800b756:	47b8      	blx	r7
 800b758:	3001      	adds	r0, #1
 800b75a:	d1c2      	bne.n	800b6e2 <_printf_float+0x2f2>
 800b75c:	e6a3      	b.n	800b4a6 <_printf_float+0xb6>
 800b75e:	2301      	movs	r3, #1
 800b760:	4631      	mov	r1, r6
 800b762:	4628      	mov	r0, r5
 800b764:	9206      	str	r2, [sp, #24]
 800b766:	47b8      	blx	r7
 800b768:	3001      	adds	r0, #1
 800b76a:	f43f ae9c 	beq.w	800b4a6 <_printf_float+0xb6>
 800b76e:	9a06      	ldr	r2, [sp, #24]
 800b770:	f10b 0b01 	add.w	fp, fp, #1
 800b774:	e7bb      	b.n	800b6ee <_printf_float+0x2fe>
 800b776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b77a:	4631      	mov	r1, r6
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b8      	blx	r7
 800b780:	3001      	adds	r0, #1
 800b782:	d1c0      	bne.n	800b706 <_printf_float+0x316>
 800b784:	e68f      	b.n	800b4a6 <_printf_float+0xb6>
 800b786:	9a06      	ldr	r2, [sp, #24]
 800b788:	464b      	mov	r3, r9
 800b78a:	4442      	add	r2, r8
 800b78c:	4631      	mov	r1, r6
 800b78e:	4628      	mov	r0, r5
 800b790:	47b8      	blx	r7
 800b792:	3001      	adds	r0, #1
 800b794:	d1c3      	bne.n	800b71e <_printf_float+0x32e>
 800b796:	e686      	b.n	800b4a6 <_printf_float+0xb6>
 800b798:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b79c:	f1ba 0f01 	cmp.w	sl, #1
 800b7a0:	dc01      	bgt.n	800b7a6 <_printf_float+0x3b6>
 800b7a2:	07db      	lsls	r3, r3, #31
 800b7a4:	d536      	bpl.n	800b814 <_printf_float+0x424>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	4642      	mov	r2, r8
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	47b8      	blx	r7
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	f43f ae78 	beq.w	800b4a6 <_printf_float+0xb6>
 800b7b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b8      	blx	r7
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	f43f ae70 	beq.w	800b4a6 <_printf_float+0xb6>
 800b7c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7d2:	f7f5 f981 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7d6:	b9c0      	cbnz	r0, 800b80a <_printf_float+0x41a>
 800b7d8:	4653      	mov	r3, sl
 800b7da:	f108 0201 	add.w	r2, r8, #1
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	47b8      	blx	r7
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d10c      	bne.n	800b802 <_printf_float+0x412>
 800b7e8:	e65d      	b.n	800b4a6 <_printf_float+0xb6>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	465a      	mov	r2, fp
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	47b8      	blx	r7
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	f43f ae56 	beq.w	800b4a6 <_printf_float+0xb6>
 800b7fa:	f108 0801 	add.w	r8, r8, #1
 800b7fe:	45d0      	cmp	r8, sl
 800b800:	dbf3      	blt.n	800b7ea <_printf_float+0x3fa>
 800b802:	464b      	mov	r3, r9
 800b804:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b808:	e6df      	b.n	800b5ca <_printf_float+0x1da>
 800b80a:	f04f 0800 	mov.w	r8, #0
 800b80e:	f104 0b1a 	add.w	fp, r4, #26
 800b812:	e7f4      	b.n	800b7fe <_printf_float+0x40e>
 800b814:	2301      	movs	r3, #1
 800b816:	4642      	mov	r2, r8
 800b818:	e7e1      	b.n	800b7de <_printf_float+0x3ee>
 800b81a:	2301      	movs	r3, #1
 800b81c:	464a      	mov	r2, r9
 800b81e:	4631      	mov	r1, r6
 800b820:	4628      	mov	r0, r5
 800b822:	47b8      	blx	r7
 800b824:	3001      	adds	r0, #1
 800b826:	f43f ae3e 	beq.w	800b4a6 <_printf_float+0xb6>
 800b82a:	f108 0801 	add.w	r8, r8, #1
 800b82e:	68e3      	ldr	r3, [r4, #12]
 800b830:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b832:	1a5b      	subs	r3, r3, r1
 800b834:	4543      	cmp	r3, r8
 800b836:	dcf0      	bgt.n	800b81a <_printf_float+0x42a>
 800b838:	e6fc      	b.n	800b634 <_printf_float+0x244>
 800b83a:	f04f 0800 	mov.w	r8, #0
 800b83e:	f104 0919 	add.w	r9, r4, #25
 800b842:	e7f4      	b.n	800b82e <_printf_float+0x43e>

0800b844 <_printf_common>:
 800b844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b848:	4616      	mov	r6, r2
 800b84a:	4698      	mov	r8, r3
 800b84c:	688a      	ldr	r2, [r1, #8]
 800b84e:	690b      	ldr	r3, [r1, #16]
 800b850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b854:	4293      	cmp	r3, r2
 800b856:	bfb8      	it	lt
 800b858:	4613      	movlt	r3, r2
 800b85a:	6033      	str	r3, [r6, #0]
 800b85c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b860:	4607      	mov	r7, r0
 800b862:	460c      	mov	r4, r1
 800b864:	b10a      	cbz	r2, 800b86a <_printf_common+0x26>
 800b866:	3301      	adds	r3, #1
 800b868:	6033      	str	r3, [r6, #0]
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	0699      	lsls	r1, r3, #26
 800b86e:	bf42      	ittt	mi
 800b870:	6833      	ldrmi	r3, [r6, #0]
 800b872:	3302      	addmi	r3, #2
 800b874:	6033      	strmi	r3, [r6, #0]
 800b876:	6825      	ldr	r5, [r4, #0]
 800b878:	f015 0506 	ands.w	r5, r5, #6
 800b87c:	d106      	bne.n	800b88c <_printf_common+0x48>
 800b87e:	f104 0a19 	add.w	sl, r4, #25
 800b882:	68e3      	ldr	r3, [r4, #12]
 800b884:	6832      	ldr	r2, [r6, #0]
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	42ab      	cmp	r3, r5
 800b88a:	dc26      	bgt.n	800b8da <_printf_common+0x96>
 800b88c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b890:	6822      	ldr	r2, [r4, #0]
 800b892:	3b00      	subs	r3, #0
 800b894:	bf18      	it	ne
 800b896:	2301      	movne	r3, #1
 800b898:	0692      	lsls	r2, r2, #26
 800b89a:	d42b      	bmi.n	800b8f4 <_printf_common+0xb0>
 800b89c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b8a0:	4641      	mov	r1, r8
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	47c8      	blx	r9
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	d01e      	beq.n	800b8e8 <_printf_common+0xa4>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	6922      	ldr	r2, [r4, #16]
 800b8ae:	f003 0306 	and.w	r3, r3, #6
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	bf02      	ittt	eq
 800b8b6:	68e5      	ldreq	r5, [r4, #12]
 800b8b8:	6833      	ldreq	r3, [r6, #0]
 800b8ba:	1aed      	subeq	r5, r5, r3
 800b8bc:	68a3      	ldr	r3, [r4, #8]
 800b8be:	bf0c      	ite	eq
 800b8c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8c4:	2500      	movne	r5, #0
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	bfc4      	itt	gt
 800b8ca:	1a9b      	subgt	r3, r3, r2
 800b8cc:	18ed      	addgt	r5, r5, r3
 800b8ce:	2600      	movs	r6, #0
 800b8d0:	341a      	adds	r4, #26
 800b8d2:	42b5      	cmp	r5, r6
 800b8d4:	d11a      	bne.n	800b90c <_printf_common+0xc8>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e008      	b.n	800b8ec <_printf_common+0xa8>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	4652      	mov	r2, sl
 800b8de:	4641      	mov	r1, r8
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	47c8      	blx	r9
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	d103      	bne.n	800b8f0 <_printf_common+0xac>
 800b8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f0:	3501      	adds	r5, #1
 800b8f2:	e7c6      	b.n	800b882 <_printf_common+0x3e>
 800b8f4:	18e1      	adds	r1, r4, r3
 800b8f6:	1c5a      	adds	r2, r3, #1
 800b8f8:	2030      	movs	r0, #48	@ 0x30
 800b8fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8fe:	4422      	add	r2, r4
 800b900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b904:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b908:	3302      	adds	r3, #2
 800b90a:	e7c7      	b.n	800b89c <_printf_common+0x58>
 800b90c:	2301      	movs	r3, #1
 800b90e:	4622      	mov	r2, r4
 800b910:	4641      	mov	r1, r8
 800b912:	4638      	mov	r0, r7
 800b914:	47c8      	blx	r9
 800b916:	3001      	adds	r0, #1
 800b918:	d0e6      	beq.n	800b8e8 <_printf_common+0xa4>
 800b91a:	3601      	adds	r6, #1
 800b91c:	e7d9      	b.n	800b8d2 <_printf_common+0x8e>
	...

0800b920 <_printf_i>:
 800b920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b924:	7e0f      	ldrb	r7, [r1, #24]
 800b926:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b928:	2f78      	cmp	r7, #120	@ 0x78
 800b92a:	4691      	mov	r9, r2
 800b92c:	4680      	mov	r8, r0
 800b92e:	460c      	mov	r4, r1
 800b930:	469a      	mov	sl, r3
 800b932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b936:	d807      	bhi.n	800b948 <_printf_i+0x28>
 800b938:	2f62      	cmp	r7, #98	@ 0x62
 800b93a:	d80a      	bhi.n	800b952 <_printf_i+0x32>
 800b93c:	2f00      	cmp	r7, #0
 800b93e:	f000 80d1 	beq.w	800bae4 <_printf_i+0x1c4>
 800b942:	2f58      	cmp	r7, #88	@ 0x58
 800b944:	f000 80b8 	beq.w	800bab8 <_printf_i+0x198>
 800b948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b94c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b950:	e03a      	b.n	800b9c8 <_printf_i+0xa8>
 800b952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b956:	2b15      	cmp	r3, #21
 800b958:	d8f6      	bhi.n	800b948 <_printf_i+0x28>
 800b95a:	a101      	add	r1, pc, #4	@ (adr r1, 800b960 <_printf_i+0x40>)
 800b95c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b960:	0800b9b9 	.word	0x0800b9b9
 800b964:	0800b9cd 	.word	0x0800b9cd
 800b968:	0800b949 	.word	0x0800b949
 800b96c:	0800b949 	.word	0x0800b949
 800b970:	0800b949 	.word	0x0800b949
 800b974:	0800b949 	.word	0x0800b949
 800b978:	0800b9cd 	.word	0x0800b9cd
 800b97c:	0800b949 	.word	0x0800b949
 800b980:	0800b949 	.word	0x0800b949
 800b984:	0800b949 	.word	0x0800b949
 800b988:	0800b949 	.word	0x0800b949
 800b98c:	0800bacb 	.word	0x0800bacb
 800b990:	0800b9f7 	.word	0x0800b9f7
 800b994:	0800ba85 	.word	0x0800ba85
 800b998:	0800b949 	.word	0x0800b949
 800b99c:	0800b949 	.word	0x0800b949
 800b9a0:	0800baed 	.word	0x0800baed
 800b9a4:	0800b949 	.word	0x0800b949
 800b9a8:	0800b9f7 	.word	0x0800b9f7
 800b9ac:	0800b949 	.word	0x0800b949
 800b9b0:	0800b949 	.word	0x0800b949
 800b9b4:	0800ba8d 	.word	0x0800ba8d
 800b9b8:	6833      	ldr	r3, [r6, #0]
 800b9ba:	1d1a      	adds	r2, r3, #4
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6032      	str	r2, [r6, #0]
 800b9c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e09c      	b.n	800bb06 <_printf_i+0x1e6>
 800b9cc:	6833      	ldr	r3, [r6, #0]
 800b9ce:	6820      	ldr	r0, [r4, #0]
 800b9d0:	1d19      	adds	r1, r3, #4
 800b9d2:	6031      	str	r1, [r6, #0]
 800b9d4:	0606      	lsls	r6, r0, #24
 800b9d6:	d501      	bpl.n	800b9dc <_printf_i+0xbc>
 800b9d8:	681d      	ldr	r5, [r3, #0]
 800b9da:	e003      	b.n	800b9e4 <_printf_i+0xc4>
 800b9dc:	0645      	lsls	r5, r0, #25
 800b9de:	d5fb      	bpl.n	800b9d8 <_printf_i+0xb8>
 800b9e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9e4:	2d00      	cmp	r5, #0
 800b9e6:	da03      	bge.n	800b9f0 <_printf_i+0xd0>
 800b9e8:	232d      	movs	r3, #45	@ 0x2d
 800b9ea:	426d      	negs	r5, r5
 800b9ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9f0:	4858      	ldr	r0, [pc, #352]	@ (800bb54 <_printf_i+0x234>)
 800b9f2:	230a      	movs	r3, #10
 800b9f4:	e011      	b.n	800ba1a <_printf_i+0xfa>
 800b9f6:	6821      	ldr	r1, [r4, #0]
 800b9f8:	6833      	ldr	r3, [r6, #0]
 800b9fa:	0608      	lsls	r0, r1, #24
 800b9fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba00:	d402      	bmi.n	800ba08 <_printf_i+0xe8>
 800ba02:	0649      	lsls	r1, r1, #25
 800ba04:	bf48      	it	mi
 800ba06:	b2ad      	uxthmi	r5, r5
 800ba08:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba0a:	4852      	ldr	r0, [pc, #328]	@ (800bb54 <_printf_i+0x234>)
 800ba0c:	6033      	str	r3, [r6, #0]
 800ba0e:	bf14      	ite	ne
 800ba10:	230a      	movne	r3, #10
 800ba12:	2308      	moveq	r3, #8
 800ba14:	2100      	movs	r1, #0
 800ba16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba1a:	6866      	ldr	r6, [r4, #4]
 800ba1c:	60a6      	str	r6, [r4, #8]
 800ba1e:	2e00      	cmp	r6, #0
 800ba20:	db05      	blt.n	800ba2e <_printf_i+0x10e>
 800ba22:	6821      	ldr	r1, [r4, #0]
 800ba24:	432e      	orrs	r6, r5
 800ba26:	f021 0104 	bic.w	r1, r1, #4
 800ba2a:	6021      	str	r1, [r4, #0]
 800ba2c:	d04b      	beq.n	800bac6 <_printf_i+0x1a6>
 800ba2e:	4616      	mov	r6, r2
 800ba30:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba34:	fb03 5711 	mls	r7, r3, r1, r5
 800ba38:	5dc7      	ldrb	r7, [r0, r7]
 800ba3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba3e:	462f      	mov	r7, r5
 800ba40:	42bb      	cmp	r3, r7
 800ba42:	460d      	mov	r5, r1
 800ba44:	d9f4      	bls.n	800ba30 <_printf_i+0x110>
 800ba46:	2b08      	cmp	r3, #8
 800ba48:	d10b      	bne.n	800ba62 <_printf_i+0x142>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	07df      	lsls	r7, r3, #31
 800ba4e:	d508      	bpl.n	800ba62 <_printf_i+0x142>
 800ba50:	6923      	ldr	r3, [r4, #16]
 800ba52:	6861      	ldr	r1, [r4, #4]
 800ba54:	4299      	cmp	r1, r3
 800ba56:	bfde      	ittt	le
 800ba58:	2330      	movle	r3, #48	@ 0x30
 800ba5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba62:	1b92      	subs	r2, r2, r6
 800ba64:	6122      	str	r2, [r4, #16]
 800ba66:	f8cd a000 	str.w	sl, [sp]
 800ba6a:	464b      	mov	r3, r9
 800ba6c:	aa03      	add	r2, sp, #12
 800ba6e:	4621      	mov	r1, r4
 800ba70:	4640      	mov	r0, r8
 800ba72:	f7ff fee7 	bl	800b844 <_printf_common>
 800ba76:	3001      	adds	r0, #1
 800ba78:	d14a      	bne.n	800bb10 <_printf_i+0x1f0>
 800ba7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7e:	b004      	add	sp, #16
 800ba80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	f043 0320 	orr.w	r3, r3, #32
 800ba8a:	6023      	str	r3, [r4, #0]
 800ba8c:	4832      	ldr	r0, [pc, #200]	@ (800bb58 <_printf_i+0x238>)
 800ba8e:	2778      	movs	r7, #120	@ 0x78
 800ba90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	6831      	ldr	r1, [r6, #0]
 800ba98:	061f      	lsls	r7, r3, #24
 800ba9a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba9e:	d402      	bmi.n	800baa6 <_printf_i+0x186>
 800baa0:	065f      	lsls	r7, r3, #25
 800baa2:	bf48      	it	mi
 800baa4:	b2ad      	uxthmi	r5, r5
 800baa6:	6031      	str	r1, [r6, #0]
 800baa8:	07d9      	lsls	r1, r3, #31
 800baaa:	bf44      	itt	mi
 800baac:	f043 0320 	orrmi.w	r3, r3, #32
 800bab0:	6023      	strmi	r3, [r4, #0]
 800bab2:	b11d      	cbz	r5, 800babc <_printf_i+0x19c>
 800bab4:	2310      	movs	r3, #16
 800bab6:	e7ad      	b.n	800ba14 <_printf_i+0xf4>
 800bab8:	4826      	ldr	r0, [pc, #152]	@ (800bb54 <_printf_i+0x234>)
 800baba:	e7e9      	b.n	800ba90 <_printf_i+0x170>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	f023 0320 	bic.w	r3, r3, #32
 800bac2:	6023      	str	r3, [r4, #0]
 800bac4:	e7f6      	b.n	800bab4 <_printf_i+0x194>
 800bac6:	4616      	mov	r6, r2
 800bac8:	e7bd      	b.n	800ba46 <_printf_i+0x126>
 800baca:	6833      	ldr	r3, [r6, #0]
 800bacc:	6825      	ldr	r5, [r4, #0]
 800bace:	6961      	ldr	r1, [r4, #20]
 800bad0:	1d18      	adds	r0, r3, #4
 800bad2:	6030      	str	r0, [r6, #0]
 800bad4:	062e      	lsls	r6, r5, #24
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	d501      	bpl.n	800bade <_printf_i+0x1be>
 800bada:	6019      	str	r1, [r3, #0]
 800badc:	e002      	b.n	800bae4 <_printf_i+0x1c4>
 800bade:	0668      	lsls	r0, r5, #25
 800bae0:	d5fb      	bpl.n	800bada <_printf_i+0x1ba>
 800bae2:	8019      	strh	r1, [r3, #0]
 800bae4:	2300      	movs	r3, #0
 800bae6:	6123      	str	r3, [r4, #16]
 800bae8:	4616      	mov	r6, r2
 800baea:	e7bc      	b.n	800ba66 <_printf_i+0x146>
 800baec:	6833      	ldr	r3, [r6, #0]
 800baee:	1d1a      	adds	r2, r3, #4
 800baf0:	6032      	str	r2, [r6, #0]
 800baf2:	681e      	ldr	r6, [r3, #0]
 800baf4:	6862      	ldr	r2, [r4, #4]
 800baf6:	2100      	movs	r1, #0
 800baf8:	4630      	mov	r0, r6
 800bafa:	f7f4 fb71 	bl	80001e0 <memchr>
 800bafe:	b108      	cbz	r0, 800bb04 <_printf_i+0x1e4>
 800bb00:	1b80      	subs	r0, r0, r6
 800bb02:	6060      	str	r0, [r4, #4]
 800bb04:	6863      	ldr	r3, [r4, #4]
 800bb06:	6123      	str	r3, [r4, #16]
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb0e:	e7aa      	b.n	800ba66 <_printf_i+0x146>
 800bb10:	6923      	ldr	r3, [r4, #16]
 800bb12:	4632      	mov	r2, r6
 800bb14:	4649      	mov	r1, r9
 800bb16:	4640      	mov	r0, r8
 800bb18:	47d0      	blx	sl
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d0ad      	beq.n	800ba7a <_printf_i+0x15a>
 800bb1e:	6823      	ldr	r3, [r4, #0]
 800bb20:	079b      	lsls	r3, r3, #30
 800bb22:	d413      	bmi.n	800bb4c <_printf_i+0x22c>
 800bb24:	68e0      	ldr	r0, [r4, #12]
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	4298      	cmp	r0, r3
 800bb2a:	bfb8      	it	lt
 800bb2c:	4618      	movlt	r0, r3
 800bb2e:	e7a6      	b.n	800ba7e <_printf_i+0x15e>
 800bb30:	2301      	movs	r3, #1
 800bb32:	4632      	mov	r2, r6
 800bb34:	4649      	mov	r1, r9
 800bb36:	4640      	mov	r0, r8
 800bb38:	47d0      	blx	sl
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	d09d      	beq.n	800ba7a <_printf_i+0x15a>
 800bb3e:	3501      	adds	r5, #1
 800bb40:	68e3      	ldr	r3, [r4, #12]
 800bb42:	9903      	ldr	r1, [sp, #12]
 800bb44:	1a5b      	subs	r3, r3, r1
 800bb46:	42ab      	cmp	r3, r5
 800bb48:	dcf2      	bgt.n	800bb30 <_printf_i+0x210>
 800bb4a:	e7eb      	b.n	800bb24 <_printf_i+0x204>
 800bb4c:	2500      	movs	r5, #0
 800bb4e:	f104 0619 	add.w	r6, r4, #25
 800bb52:	e7f5      	b.n	800bb40 <_printf_i+0x220>
 800bb54:	0800ff60 	.word	0x0800ff60
 800bb58:	0800ff71 	.word	0x0800ff71

0800bb5c <std>:
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	4604      	mov	r4, r0
 800bb62:	e9c0 3300 	strd	r3, r3, [r0]
 800bb66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb6a:	6083      	str	r3, [r0, #8]
 800bb6c:	8181      	strh	r1, [r0, #12]
 800bb6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb70:	81c2      	strh	r2, [r0, #14]
 800bb72:	6183      	str	r3, [r0, #24]
 800bb74:	4619      	mov	r1, r3
 800bb76:	2208      	movs	r2, #8
 800bb78:	305c      	adds	r0, #92	@ 0x5c
 800bb7a:	f000 fa7f 	bl	800c07c <memset>
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb4 <std+0x58>)
 800bb80:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb82:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb8 <std+0x5c>)
 800bb84:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb86:	4b0d      	ldr	r3, [pc, #52]	@ (800bbbc <std+0x60>)
 800bb88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc0 <std+0x64>)
 800bb8c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc4 <std+0x68>)
 800bb90:	6224      	str	r4, [r4, #32]
 800bb92:	429c      	cmp	r4, r3
 800bb94:	d006      	beq.n	800bba4 <std+0x48>
 800bb96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb9a:	4294      	cmp	r4, r2
 800bb9c:	d002      	beq.n	800bba4 <std+0x48>
 800bb9e:	33d0      	adds	r3, #208	@ 0xd0
 800bba0:	429c      	cmp	r4, r3
 800bba2:	d105      	bne.n	800bbb0 <std+0x54>
 800bba4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbac:	f000 bb28 	b.w	800c200 <__retarget_lock_init_recursive>
 800bbb0:	bd10      	pop	{r4, pc}
 800bbb2:	bf00      	nop
 800bbb4:	0800bec9 	.word	0x0800bec9
 800bbb8:	0800beef 	.word	0x0800beef
 800bbbc:	0800bf27 	.word	0x0800bf27
 800bbc0:	0800bf4b 	.word	0x0800bf4b
 800bbc4:	200029d0 	.word	0x200029d0

0800bbc8 <stdio_exit_handler>:
 800bbc8:	4a02      	ldr	r2, [pc, #8]	@ (800bbd4 <stdio_exit_handler+0xc>)
 800bbca:	4903      	ldr	r1, [pc, #12]	@ (800bbd8 <stdio_exit_handler+0x10>)
 800bbcc:	4803      	ldr	r0, [pc, #12]	@ (800bbdc <stdio_exit_handler+0x14>)
 800bbce:	f000 b869 	b.w	800bca4 <_fwalk_sglue>
 800bbd2:	bf00      	nop
 800bbd4:	200024ac 	.word	0x200024ac
 800bbd8:	0800e455 	.word	0x0800e455
 800bbdc:	200024bc 	.word	0x200024bc

0800bbe0 <cleanup_stdio>:
 800bbe0:	6841      	ldr	r1, [r0, #4]
 800bbe2:	4b0c      	ldr	r3, [pc, #48]	@ (800bc14 <cleanup_stdio+0x34>)
 800bbe4:	4299      	cmp	r1, r3
 800bbe6:	b510      	push	{r4, lr}
 800bbe8:	4604      	mov	r4, r0
 800bbea:	d001      	beq.n	800bbf0 <cleanup_stdio+0x10>
 800bbec:	f002 fc32 	bl	800e454 <_fflush_r>
 800bbf0:	68a1      	ldr	r1, [r4, #8]
 800bbf2:	4b09      	ldr	r3, [pc, #36]	@ (800bc18 <cleanup_stdio+0x38>)
 800bbf4:	4299      	cmp	r1, r3
 800bbf6:	d002      	beq.n	800bbfe <cleanup_stdio+0x1e>
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f002 fc2b 	bl	800e454 <_fflush_r>
 800bbfe:	68e1      	ldr	r1, [r4, #12]
 800bc00:	4b06      	ldr	r3, [pc, #24]	@ (800bc1c <cleanup_stdio+0x3c>)
 800bc02:	4299      	cmp	r1, r3
 800bc04:	d004      	beq.n	800bc10 <cleanup_stdio+0x30>
 800bc06:	4620      	mov	r0, r4
 800bc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc0c:	f002 bc22 	b.w	800e454 <_fflush_r>
 800bc10:	bd10      	pop	{r4, pc}
 800bc12:	bf00      	nop
 800bc14:	200029d0 	.word	0x200029d0
 800bc18:	20002a38 	.word	0x20002a38
 800bc1c:	20002aa0 	.word	0x20002aa0

0800bc20 <global_stdio_init.part.0>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	4b0b      	ldr	r3, [pc, #44]	@ (800bc50 <global_stdio_init.part.0+0x30>)
 800bc24:	4c0b      	ldr	r4, [pc, #44]	@ (800bc54 <global_stdio_init.part.0+0x34>)
 800bc26:	4a0c      	ldr	r2, [pc, #48]	@ (800bc58 <global_stdio_init.part.0+0x38>)
 800bc28:	601a      	str	r2, [r3, #0]
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2104      	movs	r1, #4
 800bc30:	f7ff ff94 	bl	800bb5c <std>
 800bc34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc38:	2201      	movs	r2, #1
 800bc3a:	2109      	movs	r1, #9
 800bc3c:	f7ff ff8e 	bl	800bb5c <std>
 800bc40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc44:	2202      	movs	r2, #2
 800bc46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc4a:	2112      	movs	r1, #18
 800bc4c:	f7ff bf86 	b.w	800bb5c <std>
 800bc50:	20002b08 	.word	0x20002b08
 800bc54:	200029d0 	.word	0x200029d0
 800bc58:	0800bbc9 	.word	0x0800bbc9

0800bc5c <__sfp_lock_acquire>:
 800bc5c:	4801      	ldr	r0, [pc, #4]	@ (800bc64 <__sfp_lock_acquire+0x8>)
 800bc5e:	f000 bad0 	b.w	800c202 <__retarget_lock_acquire_recursive>
 800bc62:	bf00      	nop
 800bc64:	20002b11 	.word	0x20002b11

0800bc68 <__sfp_lock_release>:
 800bc68:	4801      	ldr	r0, [pc, #4]	@ (800bc70 <__sfp_lock_release+0x8>)
 800bc6a:	f000 bacb 	b.w	800c204 <__retarget_lock_release_recursive>
 800bc6e:	bf00      	nop
 800bc70:	20002b11 	.word	0x20002b11

0800bc74 <__sinit>:
 800bc74:	b510      	push	{r4, lr}
 800bc76:	4604      	mov	r4, r0
 800bc78:	f7ff fff0 	bl	800bc5c <__sfp_lock_acquire>
 800bc7c:	6a23      	ldr	r3, [r4, #32]
 800bc7e:	b11b      	cbz	r3, 800bc88 <__sinit+0x14>
 800bc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc84:	f7ff bff0 	b.w	800bc68 <__sfp_lock_release>
 800bc88:	4b04      	ldr	r3, [pc, #16]	@ (800bc9c <__sinit+0x28>)
 800bc8a:	6223      	str	r3, [r4, #32]
 800bc8c:	4b04      	ldr	r3, [pc, #16]	@ (800bca0 <__sinit+0x2c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1f5      	bne.n	800bc80 <__sinit+0xc>
 800bc94:	f7ff ffc4 	bl	800bc20 <global_stdio_init.part.0>
 800bc98:	e7f2      	b.n	800bc80 <__sinit+0xc>
 800bc9a:	bf00      	nop
 800bc9c:	0800bbe1 	.word	0x0800bbe1
 800bca0:	20002b08 	.word	0x20002b08

0800bca4 <_fwalk_sglue>:
 800bca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca8:	4607      	mov	r7, r0
 800bcaa:	4688      	mov	r8, r1
 800bcac:	4614      	mov	r4, r2
 800bcae:	2600      	movs	r6, #0
 800bcb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcb4:	f1b9 0901 	subs.w	r9, r9, #1
 800bcb8:	d505      	bpl.n	800bcc6 <_fwalk_sglue+0x22>
 800bcba:	6824      	ldr	r4, [r4, #0]
 800bcbc:	2c00      	cmp	r4, #0
 800bcbe:	d1f7      	bne.n	800bcb0 <_fwalk_sglue+0xc>
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcc6:	89ab      	ldrh	r3, [r5, #12]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d907      	bls.n	800bcdc <_fwalk_sglue+0x38>
 800bccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	d003      	beq.n	800bcdc <_fwalk_sglue+0x38>
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	47c0      	blx	r8
 800bcda:	4306      	orrs	r6, r0
 800bcdc:	3568      	adds	r5, #104	@ 0x68
 800bcde:	e7e9      	b.n	800bcb4 <_fwalk_sglue+0x10>

0800bce0 <iprintf>:
 800bce0:	b40f      	push	{r0, r1, r2, r3}
 800bce2:	b507      	push	{r0, r1, r2, lr}
 800bce4:	4906      	ldr	r1, [pc, #24]	@ (800bd00 <iprintf+0x20>)
 800bce6:	ab04      	add	r3, sp, #16
 800bce8:	6808      	ldr	r0, [r1, #0]
 800bcea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcee:	6881      	ldr	r1, [r0, #8]
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	f002 f8c5 	bl	800de80 <_vfiprintf_r>
 800bcf6:	b003      	add	sp, #12
 800bcf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcfc:	b004      	add	sp, #16
 800bcfe:	4770      	bx	lr
 800bd00:	200024b8 	.word	0x200024b8

0800bd04 <_puts_r>:
 800bd04:	6a03      	ldr	r3, [r0, #32]
 800bd06:	b570      	push	{r4, r5, r6, lr}
 800bd08:	6884      	ldr	r4, [r0, #8]
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	460e      	mov	r6, r1
 800bd0e:	b90b      	cbnz	r3, 800bd14 <_puts_r+0x10>
 800bd10:	f7ff ffb0 	bl	800bc74 <__sinit>
 800bd14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd16:	07db      	lsls	r3, r3, #31
 800bd18:	d405      	bmi.n	800bd26 <_puts_r+0x22>
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	0598      	lsls	r0, r3, #22
 800bd1e:	d402      	bmi.n	800bd26 <_puts_r+0x22>
 800bd20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd22:	f000 fa6e 	bl	800c202 <__retarget_lock_acquire_recursive>
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	0719      	lsls	r1, r3, #28
 800bd2a:	d502      	bpl.n	800bd32 <_puts_r+0x2e>
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d135      	bne.n	800bd9e <_puts_r+0x9a>
 800bd32:	4621      	mov	r1, r4
 800bd34:	4628      	mov	r0, r5
 800bd36:	f000 f94b 	bl	800bfd0 <__swsetup_r>
 800bd3a:	b380      	cbz	r0, 800bd9e <_puts_r+0x9a>
 800bd3c:	f04f 35ff 	mov.w	r5, #4294967295
 800bd40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd42:	07da      	lsls	r2, r3, #31
 800bd44:	d405      	bmi.n	800bd52 <_puts_r+0x4e>
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	059b      	lsls	r3, r3, #22
 800bd4a:	d402      	bmi.n	800bd52 <_puts_r+0x4e>
 800bd4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd4e:	f000 fa59 	bl	800c204 <__retarget_lock_release_recursive>
 800bd52:	4628      	mov	r0, r5
 800bd54:	bd70      	pop	{r4, r5, r6, pc}
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	da04      	bge.n	800bd64 <_puts_r+0x60>
 800bd5a:	69a2      	ldr	r2, [r4, #24]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	dc17      	bgt.n	800bd90 <_puts_r+0x8c>
 800bd60:	290a      	cmp	r1, #10
 800bd62:	d015      	beq.n	800bd90 <_puts_r+0x8c>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	6022      	str	r2, [r4, #0]
 800bd6a:	7019      	strb	r1, [r3, #0]
 800bd6c:	68a3      	ldr	r3, [r4, #8]
 800bd6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd72:	3b01      	subs	r3, #1
 800bd74:	60a3      	str	r3, [r4, #8]
 800bd76:	2900      	cmp	r1, #0
 800bd78:	d1ed      	bne.n	800bd56 <_puts_r+0x52>
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	da11      	bge.n	800bda2 <_puts_r+0x9e>
 800bd7e:	4622      	mov	r2, r4
 800bd80:	210a      	movs	r1, #10
 800bd82:	4628      	mov	r0, r5
 800bd84:	f000 f8e5 	bl	800bf52 <__swbuf_r>
 800bd88:	3001      	adds	r0, #1
 800bd8a:	d0d7      	beq.n	800bd3c <_puts_r+0x38>
 800bd8c:	250a      	movs	r5, #10
 800bd8e:	e7d7      	b.n	800bd40 <_puts_r+0x3c>
 800bd90:	4622      	mov	r2, r4
 800bd92:	4628      	mov	r0, r5
 800bd94:	f000 f8dd 	bl	800bf52 <__swbuf_r>
 800bd98:	3001      	adds	r0, #1
 800bd9a:	d1e7      	bne.n	800bd6c <_puts_r+0x68>
 800bd9c:	e7ce      	b.n	800bd3c <_puts_r+0x38>
 800bd9e:	3e01      	subs	r6, #1
 800bda0:	e7e4      	b.n	800bd6c <_puts_r+0x68>
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	6022      	str	r2, [r4, #0]
 800bda8:	220a      	movs	r2, #10
 800bdaa:	701a      	strb	r2, [r3, #0]
 800bdac:	e7ee      	b.n	800bd8c <_puts_r+0x88>
	...

0800bdb0 <puts>:
 800bdb0:	4b02      	ldr	r3, [pc, #8]	@ (800bdbc <puts+0xc>)
 800bdb2:	4601      	mov	r1, r0
 800bdb4:	6818      	ldr	r0, [r3, #0]
 800bdb6:	f7ff bfa5 	b.w	800bd04 <_puts_r>
 800bdba:	bf00      	nop
 800bdbc:	200024b8 	.word	0x200024b8

0800bdc0 <sniprintf>:
 800bdc0:	b40c      	push	{r2, r3}
 800bdc2:	b530      	push	{r4, r5, lr}
 800bdc4:	4b18      	ldr	r3, [pc, #96]	@ (800be28 <sniprintf+0x68>)
 800bdc6:	1e0c      	subs	r4, r1, #0
 800bdc8:	681d      	ldr	r5, [r3, #0]
 800bdca:	b09d      	sub	sp, #116	@ 0x74
 800bdcc:	da08      	bge.n	800bde0 <sniprintf+0x20>
 800bdce:	238b      	movs	r3, #139	@ 0x8b
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd6:	b01d      	add	sp, #116	@ 0x74
 800bdd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bddc:	b002      	add	sp, #8
 800bdde:	4770      	bx	lr
 800bde0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bde4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bde8:	f04f 0300 	mov.w	r3, #0
 800bdec:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bdee:	bf14      	ite	ne
 800bdf0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bdf4:	4623      	moveq	r3, r4
 800bdf6:	9304      	str	r3, [sp, #16]
 800bdf8:	9307      	str	r3, [sp, #28]
 800bdfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bdfe:	9002      	str	r0, [sp, #8]
 800be00:	9006      	str	r0, [sp, #24]
 800be02:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be06:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800be08:	ab21      	add	r3, sp, #132	@ 0x84
 800be0a:	a902      	add	r1, sp, #8
 800be0c:	4628      	mov	r0, r5
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	f001 fd40 	bl	800d894 <_svfiprintf_r>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	bfbc      	itt	lt
 800be18:	238b      	movlt	r3, #139	@ 0x8b
 800be1a:	602b      	strlt	r3, [r5, #0]
 800be1c:	2c00      	cmp	r4, #0
 800be1e:	d0da      	beq.n	800bdd6 <sniprintf+0x16>
 800be20:	9b02      	ldr	r3, [sp, #8]
 800be22:	2200      	movs	r2, #0
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	e7d6      	b.n	800bdd6 <sniprintf+0x16>
 800be28:	200024b8 	.word	0x200024b8

0800be2c <siprintf>:
 800be2c:	b40e      	push	{r1, r2, r3}
 800be2e:	b510      	push	{r4, lr}
 800be30:	b09d      	sub	sp, #116	@ 0x74
 800be32:	ab1f      	add	r3, sp, #124	@ 0x7c
 800be34:	9002      	str	r0, [sp, #8]
 800be36:	9006      	str	r0, [sp, #24]
 800be38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be3c:	480a      	ldr	r0, [pc, #40]	@ (800be68 <siprintf+0x3c>)
 800be3e:	9107      	str	r1, [sp, #28]
 800be40:	9104      	str	r1, [sp, #16]
 800be42:	490a      	ldr	r1, [pc, #40]	@ (800be6c <siprintf+0x40>)
 800be44:	f853 2b04 	ldr.w	r2, [r3], #4
 800be48:	9105      	str	r1, [sp, #20]
 800be4a:	2400      	movs	r4, #0
 800be4c:	a902      	add	r1, sp, #8
 800be4e:	6800      	ldr	r0, [r0, #0]
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	941b      	str	r4, [sp, #108]	@ 0x6c
 800be54:	f001 fd1e 	bl	800d894 <_svfiprintf_r>
 800be58:	9b02      	ldr	r3, [sp, #8]
 800be5a:	701c      	strb	r4, [r3, #0]
 800be5c:	b01d      	add	sp, #116	@ 0x74
 800be5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be62:	b003      	add	sp, #12
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	200024b8 	.word	0x200024b8
 800be6c:	ffff0208 	.word	0xffff0208

0800be70 <siscanf>:
 800be70:	b40e      	push	{r1, r2, r3}
 800be72:	b570      	push	{r4, r5, r6, lr}
 800be74:	b09d      	sub	sp, #116	@ 0x74
 800be76:	ac21      	add	r4, sp, #132	@ 0x84
 800be78:	2500      	movs	r5, #0
 800be7a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800be7e:	f854 6b04 	ldr.w	r6, [r4], #4
 800be82:	f8ad 2014 	strh.w	r2, [sp, #20]
 800be86:	951b      	str	r5, [sp, #108]	@ 0x6c
 800be88:	9002      	str	r0, [sp, #8]
 800be8a:	9006      	str	r0, [sp, #24]
 800be8c:	f7f4 f9f8 	bl	8000280 <strlen>
 800be90:	4b0b      	ldr	r3, [pc, #44]	@ (800bec0 <siscanf+0x50>)
 800be92:	9003      	str	r0, [sp, #12]
 800be94:	9007      	str	r0, [sp, #28]
 800be96:	480b      	ldr	r0, [pc, #44]	@ (800bec4 <siscanf+0x54>)
 800be98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bea2:	4632      	mov	r2, r6
 800bea4:	4623      	mov	r3, r4
 800bea6:	a902      	add	r1, sp, #8
 800bea8:	6800      	ldr	r0, [r0, #0]
 800beaa:	950f      	str	r5, [sp, #60]	@ 0x3c
 800beac:	9514      	str	r5, [sp, #80]	@ 0x50
 800beae:	9401      	str	r4, [sp, #4]
 800beb0:	f001 fe46 	bl	800db40 <__ssvfiscanf_r>
 800beb4:	b01d      	add	sp, #116	@ 0x74
 800beb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800beba:	b003      	add	sp, #12
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	0800beeb 	.word	0x0800beeb
 800bec4:	200024b8 	.word	0x200024b8

0800bec8 <__sread>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	460c      	mov	r4, r1
 800becc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed0:	f000 f948 	bl	800c164 <_read_r>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	bfab      	itete	ge
 800bed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800beda:	89a3      	ldrhlt	r3, [r4, #12]
 800bedc:	181b      	addge	r3, r3, r0
 800bede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bee2:	bfac      	ite	ge
 800bee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bee6:	81a3      	strhlt	r3, [r4, #12]
 800bee8:	bd10      	pop	{r4, pc}

0800beea <__seofread>:
 800beea:	2000      	movs	r0, #0
 800beec:	4770      	bx	lr

0800beee <__swrite>:
 800beee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef2:	461f      	mov	r7, r3
 800bef4:	898b      	ldrh	r3, [r1, #12]
 800bef6:	05db      	lsls	r3, r3, #23
 800bef8:	4605      	mov	r5, r0
 800befa:	460c      	mov	r4, r1
 800befc:	4616      	mov	r6, r2
 800befe:	d505      	bpl.n	800bf0c <__swrite+0x1e>
 800bf00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf04:	2302      	movs	r3, #2
 800bf06:	2200      	movs	r2, #0
 800bf08:	f000 f91a 	bl	800c140 <_lseek_r>
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf16:	81a3      	strh	r3, [r4, #12]
 800bf18:	4632      	mov	r2, r6
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf22:	f000 b931 	b.w	800c188 <_write_r>

0800bf26 <__sseek>:
 800bf26:	b510      	push	{r4, lr}
 800bf28:	460c      	mov	r4, r1
 800bf2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf2e:	f000 f907 	bl	800c140 <_lseek_r>
 800bf32:	1c43      	adds	r3, r0, #1
 800bf34:	89a3      	ldrh	r3, [r4, #12]
 800bf36:	bf15      	itete	ne
 800bf38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf42:	81a3      	strheq	r3, [r4, #12]
 800bf44:	bf18      	it	ne
 800bf46:	81a3      	strhne	r3, [r4, #12]
 800bf48:	bd10      	pop	{r4, pc}

0800bf4a <__sclose>:
 800bf4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4e:	f000 b8e7 	b.w	800c120 <_close_r>

0800bf52 <__swbuf_r>:
 800bf52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf54:	460e      	mov	r6, r1
 800bf56:	4614      	mov	r4, r2
 800bf58:	4605      	mov	r5, r0
 800bf5a:	b118      	cbz	r0, 800bf64 <__swbuf_r+0x12>
 800bf5c:	6a03      	ldr	r3, [r0, #32]
 800bf5e:	b90b      	cbnz	r3, 800bf64 <__swbuf_r+0x12>
 800bf60:	f7ff fe88 	bl	800bc74 <__sinit>
 800bf64:	69a3      	ldr	r3, [r4, #24]
 800bf66:	60a3      	str	r3, [r4, #8]
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	071a      	lsls	r2, r3, #28
 800bf6c:	d501      	bpl.n	800bf72 <__swbuf_r+0x20>
 800bf6e:	6923      	ldr	r3, [r4, #16]
 800bf70:	b943      	cbnz	r3, 800bf84 <__swbuf_r+0x32>
 800bf72:	4621      	mov	r1, r4
 800bf74:	4628      	mov	r0, r5
 800bf76:	f000 f82b 	bl	800bfd0 <__swsetup_r>
 800bf7a:	b118      	cbz	r0, 800bf84 <__swbuf_r+0x32>
 800bf7c:	f04f 37ff 	mov.w	r7, #4294967295
 800bf80:	4638      	mov	r0, r7
 800bf82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	6922      	ldr	r2, [r4, #16]
 800bf88:	1a98      	subs	r0, r3, r2
 800bf8a:	6963      	ldr	r3, [r4, #20]
 800bf8c:	b2f6      	uxtb	r6, r6
 800bf8e:	4283      	cmp	r3, r0
 800bf90:	4637      	mov	r7, r6
 800bf92:	dc05      	bgt.n	800bfa0 <__swbuf_r+0x4e>
 800bf94:	4621      	mov	r1, r4
 800bf96:	4628      	mov	r0, r5
 800bf98:	f002 fa5c 	bl	800e454 <_fflush_r>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d1ed      	bne.n	800bf7c <__swbuf_r+0x2a>
 800bfa0:	68a3      	ldr	r3, [r4, #8]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	60a3      	str	r3, [r4, #8]
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	6022      	str	r2, [r4, #0]
 800bfac:	701e      	strb	r6, [r3, #0]
 800bfae:	6962      	ldr	r2, [r4, #20]
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d004      	beq.n	800bfc0 <__swbuf_r+0x6e>
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	07db      	lsls	r3, r3, #31
 800bfba:	d5e1      	bpl.n	800bf80 <__swbuf_r+0x2e>
 800bfbc:	2e0a      	cmp	r6, #10
 800bfbe:	d1df      	bne.n	800bf80 <__swbuf_r+0x2e>
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f002 fa46 	bl	800e454 <_fflush_r>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d0d9      	beq.n	800bf80 <__swbuf_r+0x2e>
 800bfcc:	e7d6      	b.n	800bf7c <__swbuf_r+0x2a>
	...

0800bfd0 <__swsetup_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4b29      	ldr	r3, [pc, #164]	@ (800c078 <__swsetup_r+0xa8>)
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	6818      	ldr	r0, [r3, #0]
 800bfd8:	460c      	mov	r4, r1
 800bfda:	b118      	cbz	r0, 800bfe4 <__swsetup_r+0x14>
 800bfdc:	6a03      	ldr	r3, [r0, #32]
 800bfde:	b90b      	cbnz	r3, 800bfe4 <__swsetup_r+0x14>
 800bfe0:	f7ff fe48 	bl	800bc74 <__sinit>
 800bfe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe8:	0719      	lsls	r1, r3, #28
 800bfea:	d422      	bmi.n	800c032 <__swsetup_r+0x62>
 800bfec:	06da      	lsls	r2, r3, #27
 800bfee:	d407      	bmi.n	800c000 <__swsetup_r+0x30>
 800bff0:	2209      	movs	r2, #9
 800bff2:	602a      	str	r2, [r5, #0]
 800bff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bff8:	81a3      	strh	r3, [r4, #12]
 800bffa:	f04f 30ff 	mov.w	r0, #4294967295
 800bffe:	e033      	b.n	800c068 <__swsetup_r+0x98>
 800c000:	0758      	lsls	r0, r3, #29
 800c002:	d512      	bpl.n	800c02a <__swsetup_r+0x5a>
 800c004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c006:	b141      	cbz	r1, 800c01a <__swsetup_r+0x4a>
 800c008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c00c:	4299      	cmp	r1, r3
 800c00e:	d002      	beq.n	800c016 <__swsetup_r+0x46>
 800c010:	4628      	mov	r0, r5
 800c012:	f000 ff69 	bl	800cee8 <_free_r>
 800c016:	2300      	movs	r3, #0
 800c018:	6363      	str	r3, [r4, #52]	@ 0x34
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	2300      	movs	r3, #0
 800c024:	6063      	str	r3, [r4, #4]
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	f043 0308 	orr.w	r3, r3, #8
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	6923      	ldr	r3, [r4, #16]
 800c034:	b94b      	cbnz	r3, 800c04a <__swsetup_r+0x7a>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c03c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c040:	d003      	beq.n	800c04a <__swsetup_r+0x7a>
 800c042:	4621      	mov	r1, r4
 800c044:	4628      	mov	r0, r5
 800c046:	f002 fa53 	bl	800e4f0 <__smakebuf_r>
 800c04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c04e:	f013 0201 	ands.w	r2, r3, #1
 800c052:	d00a      	beq.n	800c06a <__swsetup_r+0x9a>
 800c054:	2200      	movs	r2, #0
 800c056:	60a2      	str	r2, [r4, #8]
 800c058:	6962      	ldr	r2, [r4, #20]
 800c05a:	4252      	negs	r2, r2
 800c05c:	61a2      	str	r2, [r4, #24]
 800c05e:	6922      	ldr	r2, [r4, #16]
 800c060:	b942      	cbnz	r2, 800c074 <__swsetup_r+0xa4>
 800c062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c066:	d1c5      	bne.n	800bff4 <__swsetup_r+0x24>
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	0799      	lsls	r1, r3, #30
 800c06c:	bf58      	it	pl
 800c06e:	6962      	ldrpl	r2, [r4, #20]
 800c070:	60a2      	str	r2, [r4, #8]
 800c072:	e7f4      	b.n	800c05e <__swsetup_r+0x8e>
 800c074:	2000      	movs	r0, #0
 800c076:	e7f7      	b.n	800c068 <__swsetup_r+0x98>
 800c078:	200024b8 	.word	0x200024b8

0800c07c <memset>:
 800c07c:	4402      	add	r2, r0
 800c07e:	4603      	mov	r3, r0
 800c080:	4293      	cmp	r3, r2
 800c082:	d100      	bne.n	800c086 <memset+0xa>
 800c084:	4770      	bx	lr
 800c086:	f803 1b01 	strb.w	r1, [r3], #1
 800c08a:	e7f9      	b.n	800c080 <memset+0x4>

0800c08c <strcat>:
 800c08c:	b510      	push	{r4, lr}
 800c08e:	4602      	mov	r2, r0
 800c090:	7814      	ldrb	r4, [r2, #0]
 800c092:	4613      	mov	r3, r2
 800c094:	3201      	adds	r2, #1
 800c096:	2c00      	cmp	r4, #0
 800c098:	d1fa      	bne.n	800c090 <strcat+0x4>
 800c09a:	3b01      	subs	r3, #1
 800c09c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	d1f9      	bne.n	800c09c <strcat+0x10>
 800c0a8:	bd10      	pop	{r4, pc}

0800c0aa <strchr>:
 800c0aa:	b2c9      	uxtb	r1, r1
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0b4:	b112      	cbz	r2, 800c0bc <strchr+0x12>
 800c0b6:	428a      	cmp	r2, r1
 800c0b8:	d1f9      	bne.n	800c0ae <strchr+0x4>
 800c0ba:	4770      	bx	lr
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	bf18      	it	ne
 800c0c0:	2000      	movne	r0, #0
 800c0c2:	4770      	bx	lr

0800c0c4 <strncpy>:
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	3901      	subs	r1, #1
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	b132      	cbz	r2, 800c0da <strncpy+0x16>
 800c0cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c0d0:	f803 4b01 	strb.w	r4, [r3], #1
 800c0d4:	3a01      	subs	r2, #1
 800c0d6:	2c00      	cmp	r4, #0
 800c0d8:	d1f7      	bne.n	800c0ca <strncpy+0x6>
 800c0da:	441a      	add	r2, r3
 800c0dc:	2100      	movs	r1, #0
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d100      	bne.n	800c0e4 <strncpy+0x20>
 800c0e2:	bd10      	pop	{r4, pc}
 800c0e4:	f803 1b01 	strb.w	r1, [r3], #1
 800c0e8:	e7f9      	b.n	800c0de <strncpy+0x1a>

0800c0ea <strstr>:
 800c0ea:	780a      	ldrb	r2, [r1, #0]
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	b96a      	cbnz	r2, 800c10c <strstr+0x22>
 800c0f0:	bd70      	pop	{r4, r5, r6, pc}
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d109      	bne.n	800c10a <strstr+0x20>
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0f6      	beq.n	800c0f0 <strstr+0x6>
 800c102:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c106:	429e      	cmp	r6, r3
 800c108:	d0f7      	beq.n	800c0fa <strstr+0x10>
 800c10a:	3001      	adds	r0, #1
 800c10c:	7803      	ldrb	r3, [r0, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1ef      	bne.n	800c0f2 <strstr+0x8>
 800c112:	4618      	mov	r0, r3
 800c114:	e7ec      	b.n	800c0f0 <strstr+0x6>
	...

0800c118 <_localeconv_r>:
 800c118:	4800      	ldr	r0, [pc, #0]	@ (800c11c <_localeconv_r+0x4>)
 800c11a:	4770      	bx	lr
 800c11c:	200025f8 	.word	0x200025f8

0800c120 <_close_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4d06      	ldr	r5, [pc, #24]	@ (800c13c <_close_r+0x1c>)
 800c124:	2300      	movs	r3, #0
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	602b      	str	r3, [r5, #0]
 800c12c:	f7f8 fc7c 	bl	8004a28 <_close>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_close_r+0x1a>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_close_r+0x1a>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	20002b0c 	.word	0x20002b0c

0800c140 <_lseek_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4d07      	ldr	r5, [pc, #28]	@ (800c160 <_lseek_r+0x20>)
 800c144:	4604      	mov	r4, r0
 800c146:	4608      	mov	r0, r1
 800c148:	4611      	mov	r1, r2
 800c14a:	2200      	movs	r2, #0
 800c14c:	602a      	str	r2, [r5, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	f7f8 fc91 	bl	8004a76 <_lseek>
 800c154:	1c43      	adds	r3, r0, #1
 800c156:	d102      	bne.n	800c15e <_lseek_r+0x1e>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	b103      	cbz	r3, 800c15e <_lseek_r+0x1e>
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	20002b0c 	.word	0x20002b0c

0800c164 <_read_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d07      	ldr	r5, [pc, #28]	@ (800c184 <_read_r+0x20>)
 800c168:	4604      	mov	r4, r0
 800c16a:	4608      	mov	r0, r1
 800c16c:	4611      	mov	r1, r2
 800c16e:	2200      	movs	r2, #0
 800c170:	602a      	str	r2, [r5, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	f7f8 fc3b 	bl	80049ee <_read>
 800c178:	1c43      	adds	r3, r0, #1
 800c17a:	d102      	bne.n	800c182 <_read_r+0x1e>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	b103      	cbz	r3, 800c182 <_read_r+0x1e>
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	20002b0c 	.word	0x20002b0c

0800c188 <_write_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d07      	ldr	r5, [pc, #28]	@ (800c1a8 <_write_r+0x20>)
 800c18c:	4604      	mov	r4, r0
 800c18e:	4608      	mov	r0, r1
 800c190:	4611      	mov	r1, r2
 800c192:	2200      	movs	r2, #0
 800c194:	602a      	str	r2, [r5, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	f7f6 fe64 	bl	8002e64 <_write>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d102      	bne.n	800c1a6 <_write_r+0x1e>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	b103      	cbz	r3, 800c1a6 <_write_r+0x1e>
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	20002b0c 	.word	0x20002b0c

0800c1ac <__errno>:
 800c1ac:	4b01      	ldr	r3, [pc, #4]	@ (800c1b4 <__errno+0x8>)
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	200024b8 	.word	0x200024b8

0800c1b8 <__libc_init_array>:
 800c1b8:	b570      	push	{r4, r5, r6, lr}
 800c1ba:	4d0d      	ldr	r5, [pc, #52]	@ (800c1f0 <__libc_init_array+0x38>)
 800c1bc:	4c0d      	ldr	r4, [pc, #52]	@ (800c1f4 <__libc_init_array+0x3c>)
 800c1be:	1b64      	subs	r4, r4, r5
 800c1c0:	10a4      	asrs	r4, r4, #2
 800c1c2:	2600      	movs	r6, #0
 800c1c4:	42a6      	cmp	r6, r4
 800c1c6:	d109      	bne.n	800c1dc <__libc_init_array+0x24>
 800c1c8:	4d0b      	ldr	r5, [pc, #44]	@ (800c1f8 <__libc_init_array+0x40>)
 800c1ca:	4c0c      	ldr	r4, [pc, #48]	@ (800c1fc <__libc_init_array+0x44>)
 800c1cc:	f002 fddc 	bl	800ed88 <_init>
 800c1d0:	1b64      	subs	r4, r4, r5
 800c1d2:	10a4      	asrs	r4, r4, #2
 800c1d4:	2600      	movs	r6, #0
 800c1d6:	42a6      	cmp	r6, r4
 800c1d8:	d105      	bne.n	800c1e6 <__libc_init_array+0x2e>
 800c1da:	bd70      	pop	{r4, r5, r6, pc}
 800c1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e0:	4798      	blx	r3
 800c1e2:	3601      	adds	r6, #1
 800c1e4:	e7ee      	b.n	800c1c4 <__libc_init_array+0xc>
 800c1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ea:	4798      	blx	r3
 800c1ec:	3601      	adds	r6, #1
 800c1ee:	e7f2      	b.n	800c1d6 <__libc_init_array+0x1e>
 800c1f0:	0801031c 	.word	0x0801031c
 800c1f4:	0801031c 	.word	0x0801031c
 800c1f8:	0801031c 	.word	0x0801031c
 800c1fc:	08010320 	.word	0x08010320

0800c200 <__retarget_lock_init_recursive>:
 800c200:	4770      	bx	lr

0800c202 <__retarget_lock_acquire_recursive>:
 800c202:	4770      	bx	lr

0800c204 <__retarget_lock_release_recursive>:
 800c204:	4770      	bx	lr

0800c206 <strcpy>:
 800c206:	4603      	mov	r3, r0
 800c208:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c20c:	f803 2b01 	strb.w	r2, [r3], #1
 800c210:	2a00      	cmp	r2, #0
 800c212:	d1f9      	bne.n	800c208 <strcpy+0x2>
 800c214:	4770      	bx	lr

0800c216 <memcpy>:
 800c216:	440a      	add	r2, r1
 800c218:	4291      	cmp	r1, r2
 800c21a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c21e:	d100      	bne.n	800c222 <memcpy+0xc>
 800c220:	4770      	bx	lr
 800c222:	b510      	push	{r4, lr}
 800c224:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c22c:	4291      	cmp	r1, r2
 800c22e:	d1f9      	bne.n	800c224 <memcpy+0xe>
 800c230:	bd10      	pop	{r4, pc}

0800c232 <quorem>:
 800c232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c236:	6903      	ldr	r3, [r0, #16]
 800c238:	690c      	ldr	r4, [r1, #16]
 800c23a:	42a3      	cmp	r3, r4
 800c23c:	4607      	mov	r7, r0
 800c23e:	db7e      	blt.n	800c33e <quorem+0x10c>
 800c240:	3c01      	subs	r4, #1
 800c242:	f101 0814 	add.w	r8, r1, #20
 800c246:	00a3      	lsls	r3, r4, #2
 800c248:	f100 0514 	add.w	r5, r0, #20
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c25c:	3301      	adds	r3, #1
 800c25e:	429a      	cmp	r2, r3
 800c260:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c264:	fbb2 f6f3 	udiv	r6, r2, r3
 800c268:	d32e      	bcc.n	800c2c8 <quorem+0x96>
 800c26a:	f04f 0a00 	mov.w	sl, #0
 800c26e:	46c4      	mov	ip, r8
 800c270:	46ae      	mov	lr, r5
 800c272:	46d3      	mov	fp, sl
 800c274:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c278:	b298      	uxth	r0, r3
 800c27a:	fb06 a000 	mla	r0, r6, r0, sl
 800c27e:	0c02      	lsrs	r2, r0, #16
 800c280:	0c1b      	lsrs	r3, r3, #16
 800c282:	fb06 2303 	mla	r3, r6, r3, r2
 800c286:	f8de 2000 	ldr.w	r2, [lr]
 800c28a:	b280      	uxth	r0, r0
 800c28c:	b292      	uxth	r2, r2
 800c28e:	1a12      	subs	r2, r2, r0
 800c290:	445a      	add	r2, fp
 800c292:	f8de 0000 	ldr.w	r0, [lr]
 800c296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c2a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c2a4:	b292      	uxth	r2, r2
 800c2a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c2aa:	45e1      	cmp	r9, ip
 800c2ac:	f84e 2b04 	str.w	r2, [lr], #4
 800c2b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c2b4:	d2de      	bcs.n	800c274 <quorem+0x42>
 800c2b6:	9b00      	ldr	r3, [sp, #0]
 800c2b8:	58eb      	ldr	r3, [r5, r3]
 800c2ba:	b92b      	cbnz	r3, 800c2c8 <quorem+0x96>
 800c2bc:	9b01      	ldr	r3, [sp, #4]
 800c2be:	3b04      	subs	r3, #4
 800c2c0:	429d      	cmp	r5, r3
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	d32f      	bcc.n	800c326 <quorem+0xf4>
 800c2c6:	613c      	str	r4, [r7, #16]
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	f001 f97f 	bl	800d5cc <__mcmp>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	db25      	blt.n	800c31e <quorem+0xec>
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2da:	f8d1 c000 	ldr.w	ip, [r1]
 800c2de:	fa1f fe82 	uxth.w	lr, r2
 800c2e2:	fa1f f38c 	uxth.w	r3, ip
 800c2e6:	eba3 030e 	sub.w	r3, r3, lr
 800c2ea:	4403      	add	r3, r0
 800c2ec:	0c12      	lsrs	r2, r2, #16
 800c2ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c2f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2fc:	45c1      	cmp	r9, r8
 800c2fe:	f841 3b04 	str.w	r3, [r1], #4
 800c302:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c306:	d2e6      	bcs.n	800c2d6 <quorem+0xa4>
 800c308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c30c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c310:	b922      	cbnz	r2, 800c31c <quorem+0xea>
 800c312:	3b04      	subs	r3, #4
 800c314:	429d      	cmp	r5, r3
 800c316:	461a      	mov	r2, r3
 800c318:	d30b      	bcc.n	800c332 <quorem+0x100>
 800c31a:	613c      	str	r4, [r7, #16]
 800c31c:	3601      	adds	r6, #1
 800c31e:	4630      	mov	r0, r6
 800c320:	b003      	add	sp, #12
 800c322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c326:	6812      	ldr	r2, [r2, #0]
 800c328:	3b04      	subs	r3, #4
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	d1cb      	bne.n	800c2c6 <quorem+0x94>
 800c32e:	3c01      	subs	r4, #1
 800c330:	e7c6      	b.n	800c2c0 <quorem+0x8e>
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	3b04      	subs	r3, #4
 800c336:	2a00      	cmp	r2, #0
 800c338:	d1ef      	bne.n	800c31a <quorem+0xe8>
 800c33a:	3c01      	subs	r4, #1
 800c33c:	e7ea      	b.n	800c314 <quorem+0xe2>
 800c33e:	2000      	movs	r0, #0
 800c340:	e7ee      	b.n	800c320 <quorem+0xee>
 800c342:	0000      	movs	r0, r0
 800c344:	0000      	movs	r0, r0
	...

0800c348 <_dtoa_r>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	69c7      	ldr	r7, [r0, #28]
 800c34e:	b097      	sub	sp, #92	@ 0x5c
 800c350:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c354:	ec55 4b10 	vmov	r4, r5, d0
 800c358:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c35a:	9107      	str	r1, [sp, #28]
 800c35c:	4681      	mov	r9, r0
 800c35e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c360:	9311      	str	r3, [sp, #68]	@ 0x44
 800c362:	b97f      	cbnz	r7, 800c384 <_dtoa_r+0x3c>
 800c364:	2010      	movs	r0, #16
 800c366:	f000 fe09 	bl	800cf7c <malloc>
 800c36a:	4602      	mov	r2, r0
 800c36c:	f8c9 001c 	str.w	r0, [r9, #28]
 800c370:	b920      	cbnz	r0, 800c37c <_dtoa_r+0x34>
 800c372:	4ba9      	ldr	r3, [pc, #676]	@ (800c618 <_dtoa_r+0x2d0>)
 800c374:	21ef      	movs	r1, #239	@ 0xef
 800c376:	48a9      	ldr	r0, [pc, #676]	@ (800c61c <_dtoa_r+0x2d4>)
 800c378:	f002 f9b6 	bl	800e6e8 <__assert_func>
 800c37c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c380:	6007      	str	r7, [r0, #0]
 800c382:	60c7      	str	r7, [r0, #12]
 800c384:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c388:	6819      	ldr	r1, [r3, #0]
 800c38a:	b159      	cbz	r1, 800c3a4 <_dtoa_r+0x5c>
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	604a      	str	r2, [r1, #4]
 800c390:	2301      	movs	r3, #1
 800c392:	4093      	lsls	r3, r2
 800c394:	608b      	str	r3, [r1, #8]
 800c396:	4648      	mov	r0, r9
 800c398:	f000 fee6 	bl	800d168 <_Bfree>
 800c39c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	1e2b      	subs	r3, r5, #0
 800c3a6:	bfb9      	ittee	lt
 800c3a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c3ac:	9305      	strlt	r3, [sp, #20]
 800c3ae:	2300      	movge	r3, #0
 800c3b0:	6033      	strge	r3, [r6, #0]
 800c3b2:	9f05      	ldr	r7, [sp, #20]
 800c3b4:	4b9a      	ldr	r3, [pc, #616]	@ (800c620 <_dtoa_r+0x2d8>)
 800c3b6:	bfbc      	itt	lt
 800c3b8:	2201      	movlt	r2, #1
 800c3ba:	6032      	strlt	r2, [r6, #0]
 800c3bc:	43bb      	bics	r3, r7
 800c3be:	d112      	bne.n	800c3e6 <_dtoa_r+0x9e>
 800c3c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c3c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c3c6:	6013      	str	r3, [r2, #0]
 800c3c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3cc:	4323      	orrs	r3, r4
 800c3ce:	f000 855a 	beq.w	800ce86 <_dtoa_r+0xb3e>
 800c3d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c634 <_dtoa_r+0x2ec>
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 855c 	beq.w	800ce96 <_dtoa_r+0xb4e>
 800c3de:	f10a 0303 	add.w	r3, sl, #3
 800c3e2:	f000 bd56 	b.w	800ce92 <_dtoa_r+0xb4a>
 800c3e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	ec51 0b17 	vmov	r0, r1, d7
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c3f6:	f7f4 fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	b158      	cbz	r0, 800c416 <_dtoa_r+0xce>
 800c3fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c400:	2301      	movs	r3, #1
 800c402:	6013      	str	r3, [r2, #0]
 800c404:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c406:	b113      	cbz	r3, 800c40e <_dtoa_r+0xc6>
 800c408:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c40a:	4b86      	ldr	r3, [pc, #536]	@ (800c624 <_dtoa_r+0x2dc>)
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c638 <_dtoa_r+0x2f0>
 800c412:	f000 bd40 	b.w	800ce96 <_dtoa_r+0xb4e>
 800c416:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c41a:	aa14      	add	r2, sp, #80	@ 0x50
 800c41c:	a915      	add	r1, sp, #84	@ 0x54
 800c41e:	4648      	mov	r0, r9
 800c420:	f001 f984 	bl	800d72c <__d2b>
 800c424:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c428:	9002      	str	r0, [sp, #8]
 800c42a:	2e00      	cmp	r6, #0
 800c42c:	d078      	beq.n	800c520 <_dtoa_r+0x1d8>
 800c42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c430:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c43c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c440:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c444:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c448:	4619      	mov	r1, r3
 800c44a:	2200      	movs	r2, #0
 800c44c:	4b76      	ldr	r3, [pc, #472]	@ (800c628 <_dtoa_r+0x2e0>)
 800c44e:	f7f3 ff23 	bl	8000298 <__aeabi_dsub>
 800c452:	a36b      	add	r3, pc, #428	@ (adr r3, 800c600 <_dtoa_r+0x2b8>)
 800c454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c458:	f7f4 f8d6 	bl	8000608 <__aeabi_dmul>
 800c45c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c608 <_dtoa_r+0x2c0>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	f7f3 ff1b 	bl	800029c <__adddf3>
 800c466:	4604      	mov	r4, r0
 800c468:	4630      	mov	r0, r6
 800c46a:	460d      	mov	r5, r1
 800c46c:	f7f4 f862 	bl	8000534 <__aeabi_i2d>
 800c470:	a367      	add	r3, pc, #412	@ (adr r3, 800c610 <_dtoa_r+0x2c8>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f4 f8c7 	bl	8000608 <__aeabi_dmul>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	4620      	mov	r0, r4
 800c480:	4629      	mov	r1, r5
 800c482:	f7f3 ff0b 	bl	800029c <__adddf3>
 800c486:	4604      	mov	r4, r0
 800c488:	460d      	mov	r5, r1
 800c48a:	f7f4 fb6d 	bl	8000b68 <__aeabi_d2iz>
 800c48e:	2200      	movs	r2, #0
 800c490:	4607      	mov	r7, r0
 800c492:	2300      	movs	r3, #0
 800c494:	4620      	mov	r0, r4
 800c496:	4629      	mov	r1, r5
 800c498:	f7f4 fb28 	bl	8000aec <__aeabi_dcmplt>
 800c49c:	b140      	cbz	r0, 800c4b0 <_dtoa_r+0x168>
 800c49e:	4638      	mov	r0, r7
 800c4a0:	f7f4 f848 	bl	8000534 <__aeabi_i2d>
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	462b      	mov	r3, r5
 800c4a8:	f7f4 fb16 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4ac:	b900      	cbnz	r0, 800c4b0 <_dtoa_r+0x168>
 800c4ae:	3f01      	subs	r7, #1
 800c4b0:	2f16      	cmp	r7, #22
 800c4b2:	d852      	bhi.n	800c55a <_dtoa_r+0x212>
 800c4b4:	4b5d      	ldr	r3, [pc, #372]	@ (800c62c <_dtoa_r+0x2e4>)
 800c4b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c4c2:	f7f4 fb13 	bl	8000aec <__aeabi_dcmplt>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d049      	beq.n	800c55e <_dtoa_r+0x216>
 800c4ca:	3f01      	subs	r7, #1
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4d2:	1b9b      	subs	r3, r3, r6
 800c4d4:	1e5a      	subs	r2, r3, #1
 800c4d6:	bf45      	ittet	mi
 800c4d8:	f1c3 0301 	rsbmi	r3, r3, #1
 800c4dc:	9300      	strmi	r3, [sp, #0]
 800c4de:	2300      	movpl	r3, #0
 800c4e0:	2300      	movmi	r3, #0
 800c4e2:	9206      	str	r2, [sp, #24]
 800c4e4:	bf54      	ite	pl
 800c4e6:	9300      	strpl	r3, [sp, #0]
 800c4e8:	9306      	strmi	r3, [sp, #24]
 800c4ea:	2f00      	cmp	r7, #0
 800c4ec:	db39      	blt.n	800c562 <_dtoa_r+0x21a>
 800c4ee:	9b06      	ldr	r3, [sp, #24]
 800c4f0:	970d      	str	r7, [sp, #52]	@ 0x34
 800c4f2:	443b      	add	r3, r7
 800c4f4:	9306      	str	r3, [sp, #24]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9308      	str	r3, [sp, #32]
 800c4fa:	9b07      	ldr	r3, [sp, #28]
 800c4fc:	2b09      	cmp	r3, #9
 800c4fe:	d863      	bhi.n	800c5c8 <_dtoa_r+0x280>
 800c500:	2b05      	cmp	r3, #5
 800c502:	bfc4      	itt	gt
 800c504:	3b04      	subgt	r3, #4
 800c506:	9307      	strgt	r3, [sp, #28]
 800c508:	9b07      	ldr	r3, [sp, #28]
 800c50a:	f1a3 0302 	sub.w	r3, r3, #2
 800c50e:	bfcc      	ite	gt
 800c510:	2400      	movgt	r4, #0
 800c512:	2401      	movle	r4, #1
 800c514:	2b03      	cmp	r3, #3
 800c516:	d863      	bhi.n	800c5e0 <_dtoa_r+0x298>
 800c518:	e8df f003 	tbb	[pc, r3]
 800c51c:	2b375452 	.word	0x2b375452
 800c520:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c524:	441e      	add	r6, r3
 800c526:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c52a:	2b20      	cmp	r3, #32
 800c52c:	bfc1      	itttt	gt
 800c52e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c532:	409f      	lslgt	r7, r3
 800c534:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c538:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c53c:	bfd6      	itet	le
 800c53e:	f1c3 0320 	rsble	r3, r3, #32
 800c542:	ea47 0003 	orrgt.w	r0, r7, r3
 800c546:	fa04 f003 	lslle.w	r0, r4, r3
 800c54a:	f7f3 ffe3 	bl	8000514 <__aeabi_ui2d>
 800c54e:	2201      	movs	r2, #1
 800c550:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c554:	3e01      	subs	r6, #1
 800c556:	9212      	str	r2, [sp, #72]	@ 0x48
 800c558:	e776      	b.n	800c448 <_dtoa_r+0x100>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e7b7      	b.n	800c4ce <_dtoa_r+0x186>
 800c55e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c560:	e7b6      	b.n	800c4d0 <_dtoa_r+0x188>
 800c562:	9b00      	ldr	r3, [sp, #0]
 800c564:	1bdb      	subs	r3, r3, r7
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	427b      	negs	r3, r7
 800c56a:	9308      	str	r3, [sp, #32]
 800c56c:	2300      	movs	r3, #0
 800c56e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c570:	e7c3      	b.n	800c4fa <_dtoa_r+0x1b2>
 800c572:	2301      	movs	r3, #1
 800c574:	9309      	str	r3, [sp, #36]	@ 0x24
 800c576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c578:	eb07 0b03 	add.w	fp, r7, r3
 800c57c:	f10b 0301 	add.w	r3, fp, #1
 800c580:	2b01      	cmp	r3, #1
 800c582:	9303      	str	r3, [sp, #12]
 800c584:	bfb8      	it	lt
 800c586:	2301      	movlt	r3, #1
 800c588:	e006      	b.n	800c598 <_dtoa_r+0x250>
 800c58a:	2301      	movs	r3, #1
 800c58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c58e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c590:	2b00      	cmp	r3, #0
 800c592:	dd28      	ble.n	800c5e6 <_dtoa_r+0x29e>
 800c594:	469b      	mov	fp, r3
 800c596:	9303      	str	r3, [sp, #12]
 800c598:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c59c:	2100      	movs	r1, #0
 800c59e:	2204      	movs	r2, #4
 800c5a0:	f102 0514 	add.w	r5, r2, #20
 800c5a4:	429d      	cmp	r5, r3
 800c5a6:	d926      	bls.n	800c5f6 <_dtoa_r+0x2ae>
 800c5a8:	6041      	str	r1, [r0, #4]
 800c5aa:	4648      	mov	r0, r9
 800c5ac:	f000 fd9c 	bl	800d0e8 <_Balloc>
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d142      	bne.n	800c63c <_dtoa_r+0x2f4>
 800c5b6:	4b1e      	ldr	r3, [pc, #120]	@ (800c630 <_dtoa_r+0x2e8>)
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	f240 11af 	movw	r1, #431	@ 0x1af
 800c5be:	e6da      	b.n	800c376 <_dtoa_r+0x2e>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	e7e3      	b.n	800c58c <_dtoa_r+0x244>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	e7d5      	b.n	800c574 <_dtoa_r+0x22c>
 800c5c8:	2401      	movs	r4, #1
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	9307      	str	r3, [sp, #28]
 800c5ce:	9409      	str	r4, [sp, #36]	@ 0x24
 800c5d0:	f04f 3bff 	mov.w	fp, #4294967295
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f8cd b00c 	str.w	fp, [sp, #12]
 800c5da:	2312      	movs	r3, #18
 800c5dc:	920c      	str	r2, [sp, #48]	@ 0x30
 800c5de:	e7db      	b.n	800c598 <_dtoa_r+0x250>
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e4:	e7f4      	b.n	800c5d0 <_dtoa_r+0x288>
 800c5e6:	f04f 0b01 	mov.w	fp, #1
 800c5ea:	f8cd b00c 	str.w	fp, [sp, #12]
 800c5ee:	465b      	mov	r3, fp
 800c5f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c5f4:	e7d0      	b.n	800c598 <_dtoa_r+0x250>
 800c5f6:	3101      	adds	r1, #1
 800c5f8:	0052      	lsls	r2, r2, #1
 800c5fa:	e7d1      	b.n	800c5a0 <_dtoa_r+0x258>
 800c5fc:	f3af 8000 	nop.w
 800c600:	636f4361 	.word	0x636f4361
 800c604:	3fd287a7 	.word	0x3fd287a7
 800c608:	8b60c8b3 	.word	0x8b60c8b3
 800c60c:	3fc68a28 	.word	0x3fc68a28
 800c610:	509f79fb 	.word	0x509f79fb
 800c614:	3fd34413 	.word	0x3fd34413
 800c618:	0800ff8f 	.word	0x0800ff8f
 800c61c:	0800ffa6 	.word	0x0800ffa6
 800c620:	7ff00000 	.word	0x7ff00000
 800c624:	08010090 	.word	0x08010090
 800c628:	3ff80000 	.word	0x3ff80000
 800c62c:	08010110 	.word	0x08010110
 800c630:	0800fffe 	.word	0x0800fffe
 800c634:	0800ff8b 	.word	0x0800ff8b
 800c638:	0801008f 	.word	0x0801008f
 800c63c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c640:	6018      	str	r0, [r3, #0]
 800c642:	9b03      	ldr	r3, [sp, #12]
 800c644:	2b0e      	cmp	r3, #14
 800c646:	f200 80a1 	bhi.w	800c78c <_dtoa_r+0x444>
 800c64a:	2c00      	cmp	r4, #0
 800c64c:	f000 809e 	beq.w	800c78c <_dtoa_r+0x444>
 800c650:	2f00      	cmp	r7, #0
 800c652:	dd33      	ble.n	800c6bc <_dtoa_r+0x374>
 800c654:	4b9c      	ldr	r3, [pc, #624]	@ (800c8c8 <_dtoa_r+0x580>)
 800c656:	f007 020f 	and.w	r2, r7, #15
 800c65a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c65e:	ed93 7b00 	vldr	d7, [r3]
 800c662:	05f8      	lsls	r0, r7, #23
 800c664:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c668:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c66c:	d516      	bpl.n	800c69c <_dtoa_r+0x354>
 800c66e:	4b97      	ldr	r3, [pc, #604]	@ (800c8cc <_dtoa_r+0x584>)
 800c670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c678:	f7f4 f8f0 	bl	800085c <__aeabi_ddiv>
 800c67c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c680:	f004 040f 	and.w	r4, r4, #15
 800c684:	2603      	movs	r6, #3
 800c686:	4d91      	ldr	r5, [pc, #580]	@ (800c8cc <_dtoa_r+0x584>)
 800c688:	b954      	cbnz	r4, 800c6a0 <_dtoa_r+0x358>
 800c68a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c68e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c692:	f7f4 f8e3 	bl	800085c <__aeabi_ddiv>
 800c696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c69a:	e028      	b.n	800c6ee <_dtoa_r+0x3a6>
 800c69c:	2602      	movs	r6, #2
 800c69e:	e7f2      	b.n	800c686 <_dtoa_r+0x33e>
 800c6a0:	07e1      	lsls	r1, r4, #31
 800c6a2:	d508      	bpl.n	800c6b6 <_dtoa_r+0x36e>
 800c6a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c6a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6ac:	f7f3 ffac 	bl	8000608 <__aeabi_dmul>
 800c6b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c6b4:	3601      	adds	r6, #1
 800c6b6:	1064      	asrs	r4, r4, #1
 800c6b8:	3508      	adds	r5, #8
 800c6ba:	e7e5      	b.n	800c688 <_dtoa_r+0x340>
 800c6bc:	f000 80af 	beq.w	800c81e <_dtoa_r+0x4d6>
 800c6c0:	427c      	negs	r4, r7
 800c6c2:	4b81      	ldr	r3, [pc, #516]	@ (800c8c8 <_dtoa_r+0x580>)
 800c6c4:	4d81      	ldr	r5, [pc, #516]	@ (800c8cc <_dtoa_r+0x584>)
 800c6c6:	f004 020f 	and.w	r2, r4, #15
 800c6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c6d6:	f7f3 ff97 	bl	8000608 <__aeabi_dmul>
 800c6da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6de:	1124      	asrs	r4, r4, #4
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	2602      	movs	r6, #2
 800c6e4:	2c00      	cmp	r4, #0
 800c6e6:	f040 808f 	bne.w	800c808 <_dtoa_r+0x4c0>
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1d3      	bne.n	800c696 <_dtoa_r+0x34e>
 800c6ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 8094 	beq.w	800c822 <_dtoa_r+0x4da>
 800c6fa:	4b75      	ldr	r3, [pc, #468]	@ (800c8d0 <_dtoa_r+0x588>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	4620      	mov	r0, r4
 800c700:	4629      	mov	r1, r5
 800c702:	f7f4 f9f3 	bl	8000aec <__aeabi_dcmplt>
 800c706:	2800      	cmp	r0, #0
 800c708:	f000 808b 	beq.w	800c822 <_dtoa_r+0x4da>
 800c70c:	9b03      	ldr	r3, [sp, #12]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f000 8087 	beq.w	800c822 <_dtoa_r+0x4da>
 800c714:	f1bb 0f00 	cmp.w	fp, #0
 800c718:	dd34      	ble.n	800c784 <_dtoa_r+0x43c>
 800c71a:	4620      	mov	r0, r4
 800c71c:	4b6d      	ldr	r3, [pc, #436]	@ (800c8d4 <_dtoa_r+0x58c>)
 800c71e:	2200      	movs	r2, #0
 800c720:	4629      	mov	r1, r5
 800c722:	f7f3 ff71 	bl	8000608 <__aeabi_dmul>
 800c726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c72a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c72e:	3601      	adds	r6, #1
 800c730:	465c      	mov	r4, fp
 800c732:	4630      	mov	r0, r6
 800c734:	f7f3 fefe 	bl	8000534 <__aeabi_i2d>
 800c738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c73c:	f7f3 ff64 	bl	8000608 <__aeabi_dmul>
 800c740:	4b65      	ldr	r3, [pc, #404]	@ (800c8d8 <_dtoa_r+0x590>)
 800c742:	2200      	movs	r2, #0
 800c744:	f7f3 fdaa 	bl	800029c <__adddf3>
 800c748:	4605      	mov	r5, r0
 800c74a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c74e:	2c00      	cmp	r4, #0
 800c750:	d16a      	bne.n	800c828 <_dtoa_r+0x4e0>
 800c752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c756:	4b61      	ldr	r3, [pc, #388]	@ (800c8dc <_dtoa_r+0x594>)
 800c758:	2200      	movs	r2, #0
 800c75a:	f7f3 fd9d 	bl	8000298 <__aeabi_dsub>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c766:	462a      	mov	r2, r5
 800c768:	4633      	mov	r3, r6
 800c76a:	f7f4 f9dd 	bl	8000b28 <__aeabi_dcmpgt>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f040 8298 	bne.w	800cca4 <_dtoa_r+0x95c>
 800c774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c778:	462a      	mov	r2, r5
 800c77a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c77e:	f7f4 f9b5 	bl	8000aec <__aeabi_dcmplt>
 800c782:	bb38      	cbnz	r0, 800c7d4 <_dtoa_r+0x48c>
 800c784:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c788:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c78c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f2c0 8157 	blt.w	800ca42 <_dtoa_r+0x6fa>
 800c794:	2f0e      	cmp	r7, #14
 800c796:	f300 8154 	bgt.w	800ca42 <_dtoa_r+0x6fa>
 800c79a:	4b4b      	ldr	r3, [pc, #300]	@ (800c8c8 <_dtoa_r+0x580>)
 800c79c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7a0:	ed93 7b00 	vldr	d7, [r3]
 800c7a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	ed8d 7b00 	vstr	d7, [sp]
 800c7ac:	f280 80e5 	bge.w	800c97a <_dtoa_r+0x632>
 800c7b0:	9b03      	ldr	r3, [sp, #12]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f300 80e1 	bgt.w	800c97a <_dtoa_r+0x632>
 800c7b8:	d10c      	bne.n	800c7d4 <_dtoa_r+0x48c>
 800c7ba:	4b48      	ldr	r3, [pc, #288]	@ (800c8dc <_dtoa_r+0x594>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	ec51 0b17 	vmov	r0, r1, d7
 800c7c2:	f7f3 ff21 	bl	8000608 <__aeabi_dmul>
 800c7c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7ca:	f7f4 f9a3 	bl	8000b14 <__aeabi_dcmpge>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	f000 8266 	beq.w	800cca0 <_dtoa_r+0x958>
 800c7d4:	2400      	movs	r4, #0
 800c7d6:	4625      	mov	r5, r4
 800c7d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7da:	4656      	mov	r6, sl
 800c7dc:	ea6f 0803 	mvn.w	r8, r3
 800c7e0:	2700      	movs	r7, #0
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	4648      	mov	r0, r9
 800c7e6:	f000 fcbf 	bl	800d168 <_Bfree>
 800c7ea:	2d00      	cmp	r5, #0
 800c7ec:	f000 80bd 	beq.w	800c96a <_dtoa_r+0x622>
 800c7f0:	b12f      	cbz	r7, 800c7fe <_dtoa_r+0x4b6>
 800c7f2:	42af      	cmp	r7, r5
 800c7f4:	d003      	beq.n	800c7fe <_dtoa_r+0x4b6>
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	4648      	mov	r0, r9
 800c7fa:	f000 fcb5 	bl	800d168 <_Bfree>
 800c7fe:	4629      	mov	r1, r5
 800c800:	4648      	mov	r0, r9
 800c802:	f000 fcb1 	bl	800d168 <_Bfree>
 800c806:	e0b0      	b.n	800c96a <_dtoa_r+0x622>
 800c808:	07e2      	lsls	r2, r4, #31
 800c80a:	d505      	bpl.n	800c818 <_dtoa_r+0x4d0>
 800c80c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c810:	f7f3 fefa 	bl	8000608 <__aeabi_dmul>
 800c814:	3601      	adds	r6, #1
 800c816:	2301      	movs	r3, #1
 800c818:	1064      	asrs	r4, r4, #1
 800c81a:	3508      	adds	r5, #8
 800c81c:	e762      	b.n	800c6e4 <_dtoa_r+0x39c>
 800c81e:	2602      	movs	r6, #2
 800c820:	e765      	b.n	800c6ee <_dtoa_r+0x3a6>
 800c822:	9c03      	ldr	r4, [sp, #12]
 800c824:	46b8      	mov	r8, r7
 800c826:	e784      	b.n	800c732 <_dtoa_r+0x3ea>
 800c828:	4b27      	ldr	r3, [pc, #156]	@ (800c8c8 <_dtoa_r+0x580>)
 800c82a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c82c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c830:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c834:	4454      	add	r4, sl
 800c836:	2900      	cmp	r1, #0
 800c838:	d054      	beq.n	800c8e4 <_dtoa_r+0x59c>
 800c83a:	4929      	ldr	r1, [pc, #164]	@ (800c8e0 <_dtoa_r+0x598>)
 800c83c:	2000      	movs	r0, #0
 800c83e:	f7f4 f80d 	bl	800085c <__aeabi_ddiv>
 800c842:	4633      	mov	r3, r6
 800c844:	462a      	mov	r2, r5
 800c846:	f7f3 fd27 	bl	8000298 <__aeabi_dsub>
 800c84a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c84e:	4656      	mov	r6, sl
 800c850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c854:	f7f4 f988 	bl	8000b68 <__aeabi_d2iz>
 800c858:	4605      	mov	r5, r0
 800c85a:	f7f3 fe6b 	bl	8000534 <__aeabi_i2d>
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c866:	f7f3 fd17 	bl	8000298 <__aeabi_dsub>
 800c86a:	3530      	adds	r5, #48	@ 0x30
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c874:	f806 5b01 	strb.w	r5, [r6], #1
 800c878:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c87c:	f7f4 f936 	bl	8000aec <__aeabi_dcmplt>
 800c880:	2800      	cmp	r0, #0
 800c882:	d172      	bne.n	800c96a <_dtoa_r+0x622>
 800c884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c888:	4911      	ldr	r1, [pc, #68]	@ (800c8d0 <_dtoa_r+0x588>)
 800c88a:	2000      	movs	r0, #0
 800c88c:	f7f3 fd04 	bl	8000298 <__aeabi_dsub>
 800c890:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c894:	f7f4 f92a 	bl	8000aec <__aeabi_dcmplt>
 800c898:	2800      	cmp	r0, #0
 800c89a:	f040 80b4 	bne.w	800ca06 <_dtoa_r+0x6be>
 800c89e:	42a6      	cmp	r6, r4
 800c8a0:	f43f af70 	beq.w	800c784 <_dtoa_r+0x43c>
 800c8a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d4 <_dtoa_r+0x58c>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f7f3 feac 	bl	8000608 <__aeabi_dmul>
 800c8b0:	4b08      	ldr	r3, [pc, #32]	@ (800c8d4 <_dtoa_r+0x58c>)
 800c8b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8bc:	f7f3 fea4 	bl	8000608 <__aeabi_dmul>
 800c8c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8c4:	e7c4      	b.n	800c850 <_dtoa_r+0x508>
 800c8c6:	bf00      	nop
 800c8c8:	08010110 	.word	0x08010110
 800c8cc:	080100e8 	.word	0x080100e8
 800c8d0:	3ff00000 	.word	0x3ff00000
 800c8d4:	40240000 	.word	0x40240000
 800c8d8:	401c0000 	.word	0x401c0000
 800c8dc:	40140000 	.word	0x40140000
 800c8e0:	3fe00000 	.word	0x3fe00000
 800c8e4:	4631      	mov	r1, r6
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	f7f3 fe8e 	bl	8000608 <__aeabi_dmul>
 800c8ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c8f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c8f2:	4656      	mov	r6, sl
 800c8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8f8:	f7f4 f936 	bl	8000b68 <__aeabi_d2iz>
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	f7f3 fe19 	bl	8000534 <__aeabi_i2d>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c90a:	f7f3 fcc5 	bl	8000298 <__aeabi_dsub>
 800c90e:	3530      	adds	r5, #48	@ 0x30
 800c910:	f806 5b01 	strb.w	r5, [r6], #1
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	42a6      	cmp	r6, r4
 800c91a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c91e:	f04f 0200 	mov.w	r2, #0
 800c922:	d124      	bne.n	800c96e <_dtoa_r+0x626>
 800c924:	4baf      	ldr	r3, [pc, #700]	@ (800cbe4 <_dtoa_r+0x89c>)
 800c926:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c92a:	f7f3 fcb7 	bl	800029c <__adddf3>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c936:	f7f4 f8f7 	bl	8000b28 <__aeabi_dcmpgt>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d163      	bne.n	800ca06 <_dtoa_r+0x6be>
 800c93e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c942:	49a8      	ldr	r1, [pc, #672]	@ (800cbe4 <_dtoa_r+0x89c>)
 800c944:	2000      	movs	r0, #0
 800c946:	f7f3 fca7 	bl	8000298 <__aeabi_dsub>
 800c94a:	4602      	mov	r2, r0
 800c94c:	460b      	mov	r3, r1
 800c94e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c952:	f7f4 f8cb 	bl	8000aec <__aeabi_dcmplt>
 800c956:	2800      	cmp	r0, #0
 800c958:	f43f af14 	beq.w	800c784 <_dtoa_r+0x43c>
 800c95c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c95e:	1e73      	subs	r3, r6, #1
 800c960:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c962:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c966:	2b30      	cmp	r3, #48	@ 0x30
 800c968:	d0f8      	beq.n	800c95c <_dtoa_r+0x614>
 800c96a:	4647      	mov	r7, r8
 800c96c:	e03b      	b.n	800c9e6 <_dtoa_r+0x69e>
 800c96e:	4b9e      	ldr	r3, [pc, #632]	@ (800cbe8 <_dtoa_r+0x8a0>)
 800c970:	f7f3 fe4a 	bl	8000608 <__aeabi_dmul>
 800c974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c978:	e7bc      	b.n	800c8f4 <_dtoa_r+0x5ac>
 800c97a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c97e:	4656      	mov	r6, sl
 800c980:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c984:	4620      	mov	r0, r4
 800c986:	4629      	mov	r1, r5
 800c988:	f7f3 ff68 	bl	800085c <__aeabi_ddiv>
 800c98c:	f7f4 f8ec 	bl	8000b68 <__aeabi_d2iz>
 800c990:	4680      	mov	r8, r0
 800c992:	f7f3 fdcf 	bl	8000534 <__aeabi_i2d>
 800c996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c99a:	f7f3 fe35 	bl	8000608 <__aeabi_dmul>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c9aa:	f7f3 fc75 	bl	8000298 <__aeabi_dsub>
 800c9ae:	f806 4b01 	strb.w	r4, [r6], #1
 800c9b2:	9d03      	ldr	r5, [sp, #12]
 800c9b4:	eba6 040a 	sub.w	r4, r6, sl
 800c9b8:	42a5      	cmp	r5, r4
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	d133      	bne.n	800ca28 <_dtoa_r+0x6e0>
 800c9c0:	f7f3 fc6c 	bl	800029c <__adddf3>
 800c9c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	460d      	mov	r5, r1
 800c9cc:	f7f4 f8ac 	bl	8000b28 <__aeabi_dcmpgt>
 800c9d0:	b9c0      	cbnz	r0, 800ca04 <_dtoa_r+0x6bc>
 800c9d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	4629      	mov	r1, r5
 800c9da:	f7f4 f87d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9de:	b110      	cbz	r0, 800c9e6 <_dtoa_r+0x69e>
 800c9e0:	f018 0f01 	tst.w	r8, #1
 800c9e4:	d10e      	bne.n	800ca04 <_dtoa_r+0x6bc>
 800c9e6:	9902      	ldr	r1, [sp, #8]
 800c9e8:	4648      	mov	r0, r9
 800c9ea:	f000 fbbd 	bl	800d168 <_Bfree>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	7033      	strb	r3, [r6, #0]
 800c9f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c9f4:	3701      	adds	r7, #1
 800c9f6:	601f      	str	r7, [r3, #0]
 800c9f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 824b 	beq.w	800ce96 <_dtoa_r+0xb4e>
 800ca00:	601e      	str	r6, [r3, #0]
 800ca02:	e248      	b.n	800ce96 <_dtoa_r+0xb4e>
 800ca04:	46b8      	mov	r8, r7
 800ca06:	4633      	mov	r3, r6
 800ca08:	461e      	mov	r6, r3
 800ca0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca0e:	2a39      	cmp	r2, #57	@ 0x39
 800ca10:	d106      	bne.n	800ca20 <_dtoa_r+0x6d8>
 800ca12:	459a      	cmp	sl, r3
 800ca14:	d1f8      	bne.n	800ca08 <_dtoa_r+0x6c0>
 800ca16:	2230      	movs	r2, #48	@ 0x30
 800ca18:	f108 0801 	add.w	r8, r8, #1
 800ca1c:	f88a 2000 	strb.w	r2, [sl]
 800ca20:	781a      	ldrb	r2, [r3, #0]
 800ca22:	3201      	adds	r2, #1
 800ca24:	701a      	strb	r2, [r3, #0]
 800ca26:	e7a0      	b.n	800c96a <_dtoa_r+0x622>
 800ca28:	4b6f      	ldr	r3, [pc, #444]	@ (800cbe8 <_dtoa_r+0x8a0>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f7f3 fdec 	bl	8000608 <__aeabi_dmul>
 800ca30:	2200      	movs	r2, #0
 800ca32:	2300      	movs	r3, #0
 800ca34:	4604      	mov	r4, r0
 800ca36:	460d      	mov	r5, r1
 800ca38:	f7f4 f84e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d09f      	beq.n	800c980 <_dtoa_r+0x638>
 800ca40:	e7d1      	b.n	800c9e6 <_dtoa_r+0x69e>
 800ca42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca44:	2a00      	cmp	r2, #0
 800ca46:	f000 80ea 	beq.w	800cc1e <_dtoa_r+0x8d6>
 800ca4a:	9a07      	ldr	r2, [sp, #28]
 800ca4c:	2a01      	cmp	r2, #1
 800ca4e:	f300 80cd 	bgt.w	800cbec <_dtoa_r+0x8a4>
 800ca52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ca54:	2a00      	cmp	r2, #0
 800ca56:	f000 80c1 	beq.w	800cbdc <_dtoa_r+0x894>
 800ca5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ca5e:	9c08      	ldr	r4, [sp, #32]
 800ca60:	9e00      	ldr	r6, [sp, #0]
 800ca62:	9a00      	ldr	r2, [sp, #0]
 800ca64:	441a      	add	r2, r3
 800ca66:	9200      	str	r2, [sp, #0]
 800ca68:	9a06      	ldr	r2, [sp, #24]
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	441a      	add	r2, r3
 800ca6e:	4648      	mov	r0, r9
 800ca70:	9206      	str	r2, [sp, #24]
 800ca72:	f000 fc2d 	bl	800d2d0 <__i2b>
 800ca76:	4605      	mov	r5, r0
 800ca78:	b166      	cbz	r6, 800ca94 <_dtoa_r+0x74c>
 800ca7a:	9b06      	ldr	r3, [sp, #24]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	dd09      	ble.n	800ca94 <_dtoa_r+0x74c>
 800ca80:	42b3      	cmp	r3, r6
 800ca82:	9a00      	ldr	r2, [sp, #0]
 800ca84:	bfa8      	it	ge
 800ca86:	4633      	movge	r3, r6
 800ca88:	1ad2      	subs	r2, r2, r3
 800ca8a:	9200      	str	r2, [sp, #0]
 800ca8c:	9a06      	ldr	r2, [sp, #24]
 800ca8e:	1af6      	subs	r6, r6, r3
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	9306      	str	r3, [sp, #24]
 800ca94:	9b08      	ldr	r3, [sp, #32]
 800ca96:	b30b      	cbz	r3, 800cadc <_dtoa_r+0x794>
 800ca98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 80c6 	beq.w	800cc2c <_dtoa_r+0x8e4>
 800caa0:	2c00      	cmp	r4, #0
 800caa2:	f000 80c0 	beq.w	800cc26 <_dtoa_r+0x8de>
 800caa6:	4629      	mov	r1, r5
 800caa8:	4622      	mov	r2, r4
 800caaa:	4648      	mov	r0, r9
 800caac:	f000 fcc8 	bl	800d440 <__pow5mult>
 800cab0:	9a02      	ldr	r2, [sp, #8]
 800cab2:	4601      	mov	r1, r0
 800cab4:	4605      	mov	r5, r0
 800cab6:	4648      	mov	r0, r9
 800cab8:	f000 fc20 	bl	800d2fc <__multiply>
 800cabc:	9902      	ldr	r1, [sp, #8]
 800cabe:	4680      	mov	r8, r0
 800cac0:	4648      	mov	r0, r9
 800cac2:	f000 fb51 	bl	800d168 <_Bfree>
 800cac6:	9b08      	ldr	r3, [sp, #32]
 800cac8:	1b1b      	subs	r3, r3, r4
 800caca:	9308      	str	r3, [sp, #32]
 800cacc:	f000 80b1 	beq.w	800cc32 <_dtoa_r+0x8ea>
 800cad0:	9a08      	ldr	r2, [sp, #32]
 800cad2:	4641      	mov	r1, r8
 800cad4:	4648      	mov	r0, r9
 800cad6:	f000 fcb3 	bl	800d440 <__pow5mult>
 800cada:	9002      	str	r0, [sp, #8]
 800cadc:	2101      	movs	r1, #1
 800cade:	4648      	mov	r0, r9
 800cae0:	f000 fbf6 	bl	800d2d0 <__i2b>
 800cae4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cae6:	4604      	mov	r4, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f000 81d8 	beq.w	800ce9e <_dtoa_r+0xb56>
 800caee:	461a      	mov	r2, r3
 800caf0:	4601      	mov	r1, r0
 800caf2:	4648      	mov	r0, r9
 800caf4:	f000 fca4 	bl	800d440 <__pow5mult>
 800caf8:	9b07      	ldr	r3, [sp, #28]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	4604      	mov	r4, r0
 800cafe:	f300 809f 	bgt.w	800cc40 <_dtoa_r+0x8f8>
 800cb02:	9b04      	ldr	r3, [sp, #16]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f040 8097 	bne.w	800cc38 <_dtoa_r+0x8f0>
 800cb0a:	9b05      	ldr	r3, [sp, #20]
 800cb0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f040 8093 	bne.w	800cc3c <_dtoa_r+0x8f4>
 800cb16:	9b05      	ldr	r3, [sp, #20]
 800cb18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb1c:	0d1b      	lsrs	r3, r3, #20
 800cb1e:	051b      	lsls	r3, r3, #20
 800cb20:	b133      	cbz	r3, 800cb30 <_dtoa_r+0x7e8>
 800cb22:	9b00      	ldr	r3, [sp, #0]
 800cb24:	3301      	adds	r3, #1
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	9b06      	ldr	r3, [sp, #24]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	9306      	str	r3, [sp, #24]
 800cb2e:	2301      	movs	r3, #1
 800cb30:	9308      	str	r3, [sp, #32]
 800cb32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 81b8 	beq.w	800ceaa <_dtoa_r+0xb62>
 800cb3a:	6923      	ldr	r3, [r4, #16]
 800cb3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb40:	6918      	ldr	r0, [r3, #16]
 800cb42:	f000 fb79 	bl	800d238 <__hi0bits>
 800cb46:	f1c0 0020 	rsb	r0, r0, #32
 800cb4a:	9b06      	ldr	r3, [sp, #24]
 800cb4c:	4418      	add	r0, r3
 800cb4e:	f010 001f 	ands.w	r0, r0, #31
 800cb52:	f000 8082 	beq.w	800cc5a <_dtoa_r+0x912>
 800cb56:	f1c0 0320 	rsb	r3, r0, #32
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	dd73      	ble.n	800cc46 <_dtoa_r+0x8fe>
 800cb5e:	9b00      	ldr	r3, [sp, #0]
 800cb60:	f1c0 001c 	rsb	r0, r0, #28
 800cb64:	4403      	add	r3, r0
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	9b06      	ldr	r3, [sp, #24]
 800cb6a:	4403      	add	r3, r0
 800cb6c:	4406      	add	r6, r0
 800cb6e:	9306      	str	r3, [sp, #24]
 800cb70:	9b00      	ldr	r3, [sp, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	dd05      	ble.n	800cb82 <_dtoa_r+0x83a>
 800cb76:	9902      	ldr	r1, [sp, #8]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	4648      	mov	r0, r9
 800cb7c:	f000 fcba 	bl	800d4f4 <__lshift>
 800cb80:	9002      	str	r0, [sp, #8]
 800cb82:	9b06      	ldr	r3, [sp, #24]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	dd05      	ble.n	800cb94 <_dtoa_r+0x84c>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	4648      	mov	r0, r9
 800cb8e:	f000 fcb1 	bl	800d4f4 <__lshift>
 800cb92:	4604      	mov	r4, r0
 800cb94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d061      	beq.n	800cc5e <_dtoa_r+0x916>
 800cb9a:	9802      	ldr	r0, [sp, #8]
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	f000 fd15 	bl	800d5cc <__mcmp>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	da5b      	bge.n	800cc5e <_dtoa_r+0x916>
 800cba6:	2300      	movs	r3, #0
 800cba8:	9902      	ldr	r1, [sp, #8]
 800cbaa:	220a      	movs	r2, #10
 800cbac:	4648      	mov	r0, r9
 800cbae:	f000 fafd 	bl	800d1ac <__multadd>
 800cbb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb4:	9002      	str	r0, [sp, #8]
 800cbb6:	f107 38ff 	add.w	r8, r7, #4294967295
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 8177 	beq.w	800ceae <_dtoa_r+0xb66>
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	220a      	movs	r2, #10
 800cbc6:	4648      	mov	r0, r9
 800cbc8:	f000 faf0 	bl	800d1ac <__multadd>
 800cbcc:	f1bb 0f00 	cmp.w	fp, #0
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	dc6f      	bgt.n	800ccb4 <_dtoa_r+0x96c>
 800cbd4:	9b07      	ldr	r3, [sp, #28]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	dc49      	bgt.n	800cc6e <_dtoa_r+0x926>
 800cbda:	e06b      	b.n	800ccb4 <_dtoa_r+0x96c>
 800cbdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cbde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cbe2:	e73c      	b.n	800ca5e <_dtoa_r+0x716>
 800cbe4:	3fe00000 	.word	0x3fe00000
 800cbe8:	40240000 	.word	0x40240000
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	1e5c      	subs	r4, r3, #1
 800cbf0:	9b08      	ldr	r3, [sp, #32]
 800cbf2:	42a3      	cmp	r3, r4
 800cbf4:	db09      	blt.n	800cc0a <_dtoa_r+0x8c2>
 800cbf6:	1b1c      	subs	r4, r3, r4
 800cbf8:	9b03      	ldr	r3, [sp, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f6bf af30 	bge.w	800ca60 <_dtoa_r+0x718>
 800cc00:	9b00      	ldr	r3, [sp, #0]
 800cc02:	9a03      	ldr	r2, [sp, #12]
 800cc04:	1a9e      	subs	r6, r3, r2
 800cc06:	2300      	movs	r3, #0
 800cc08:	e72b      	b.n	800ca62 <_dtoa_r+0x71a>
 800cc0a:	9b08      	ldr	r3, [sp, #32]
 800cc0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc0e:	9408      	str	r4, [sp, #32]
 800cc10:	1ae3      	subs	r3, r4, r3
 800cc12:	441a      	add	r2, r3
 800cc14:	9e00      	ldr	r6, [sp, #0]
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	920d      	str	r2, [sp, #52]	@ 0x34
 800cc1a:	2400      	movs	r4, #0
 800cc1c:	e721      	b.n	800ca62 <_dtoa_r+0x71a>
 800cc1e:	9c08      	ldr	r4, [sp, #32]
 800cc20:	9e00      	ldr	r6, [sp, #0]
 800cc22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cc24:	e728      	b.n	800ca78 <_dtoa_r+0x730>
 800cc26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cc2a:	e751      	b.n	800cad0 <_dtoa_r+0x788>
 800cc2c:	9a08      	ldr	r2, [sp, #32]
 800cc2e:	9902      	ldr	r1, [sp, #8]
 800cc30:	e750      	b.n	800cad4 <_dtoa_r+0x78c>
 800cc32:	f8cd 8008 	str.w	r8, [sp, #8]
 800cc36:	e751      	b.n	800cadc <_dtoa_r+0x794>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e779      	b.n	800cb30 <_dtoa_r+0x7e8>
 800cc3c:	9b04      	ldr	r3, [sp, #16]
 800cc3e:	e777      	b.n	800cb30 <_dtoa_r+0x7e8>
 800cc40:	2300      	movs	r3, #0
 800cc42:	9308      	str	r3, [sp, #32]
 800cc44:	e779      	b.n	800cb3a <_dtoa_r+0x7f2>
 800cc46:	d093      	beq.n	800cb70 <_dtoa_r+0x828>
 800cc48:	9a00      	ldr	r2, [sp, #0]
 800cc4a:	331c      	adds	r3, #28
 800cc4c:	441a      	add	r2, r3
 800cc4e:	9200      	str	r2, [sp, #0]
 800cc50:	9a06      	ldr	r2, [sp, #24]
 800cc52:	441a      	add	r2, r3
 800cc54:	441e      	add	r6, r3
 800cc56:	9206      	str	r2, [sp, #24]
 800cc58:	e78a      	b.n	800cb70 <_dtoa_r+0x828>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	e7f4      	b.n	800cc48 <_dtoa_r+0x900>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	46b8      	mov	r8, r7
 800cc64:	dc20      	bgt.n	800cca8 <_dtoa_r+0x960>
 800cc66:	469b      	mov	fp, r3
 800cc68:	9b07      	ldr	r3, [sp, #28]
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	dd1e      	ble.n	800ccac <_dtoa_r+0x964>
 800cc6e:	f1bb 0f00 	cmp.w	fp, #0
 800cc72:	f47f adb1 	bne.w	800c7d8 <_dtoa_r+0x490>
 800cc76:	4621      	mov	r1, r4
 800cc78:	465b      	mov	r3, fp
 800cc7a:	2205      	movs	r2, #5
 800cc7c:	4648      	mov	r0, r9
 800cc7e:	f000 fa95 	bl	800d1ac <__multadd>
 800cc82:	4601      	mov	r1, r0
 800cc84:	4604      	mov	r4, r0
 800cc86:	9802      	ldr	r0, [sp, #8]
 800cc88:	f000 fca0 	bl	800d5cc <__mcmp>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	f77f ada3 	ble.w	800c7d8 <_dtoa_r+0x490>
 800cc92:	4656      	mov	r6, sl
 800cc94:	2331      	movs	r3, #49	@ 0x31
 800cc96:	f806 3b01 	strb.w	r3, [r6], #1
 800cc9a:	f108 0801 	add.w	r8, r8, #1
 800cc9e:	e59f      	b.n	800c7e0 <_dtoa_r+0x498>
 800cca0:	9c03      	ldr	r4, [sp, #12]
 800cca2:	46b8      	mov	r8, r7
 800cca4:	4625      	mov	r5, r4
 800cca6:	e7f4      	b.n	800cc92 <_dtoa_r+0x94a>
 800cca8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ccac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f000 8101 	beq.w	800ceb6 <_dtoa_r+0xb6e>
 800ccb4:	2e00      	cmp	r6, #0
 800ccb6:	dd05      	ble.n	800ccc4 <_dtoa_r+0x97c>
 800ccb8:	4629      	mov	r1, r5
 800ccba:	4632      	mov	r2, r6
 800ccbc:	4648      	mov	r0, r9
 800ccbe:	f000 fc19 	bl	800d4f4 <__lshift>
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	9b08      	ldr	r3, [sp, #32]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d05c      	beq.n	800cd84 <_dtoa_r+0xa3c>
 800ccca:	6869      	ldr	r1, [r5, #4]
 800cccc:	4648      	mov	r0, r9
 800ccce:	f000 fa0b 	bl	800d0e8 <_Balloc>
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	b928      	cbnz	r0, 800cce2 <_dtoa_r+0x99a>
 800ccd6:	4b82      	ldr	r3, [pc, #520]	@ (800cee0 <_dtoa_r+0xb98>)
 800ccd8:	4602      	mov	r2, r0
 800ccda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ccde:	f7ff bb4a 	b.w	800c376 <_dtoa_r+0x2e>
 800cce2:	692a      	ldr	r2, [r5, #16]
 800cce4:	3202      	adds	r2, #2
 800cce6:	0092      	lsls	r2, r2, #2
 800cce8:	f105 010c 	add.w	r1, r5, #12
 800ccec:	300c      	adds	r0, #12
 800ccee:	f7ff fa92 	bl	800c216 <memcpy>
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	4631      	mov	r1, r6
 800ccf6:	4648      	mov	r0, r9
 800ccf8:	f000 fbfc 	bl	800d4f4 <__lshift>
 800ccfc:	f10a 0301 	add.w	r3, sl, #1
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	eb0a 030b 	add.w	r3, sl, fp
 800cd06:	9308      	str	r3, [sp, #32]
 800cd08:	9b04      	ldr	r3, [sp, #16]
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	462f      	mov	r7, r5
 800cd10:	9306      	str	r3, [sp, #24]
 800cd12:	4605      	mov	r5, r0
 800cd14:	9b00      	ldr	r3, [sp, #0]
 800cd16:	9802      	ldr	r0, [sp, #8]
 800cd18:	4621      	mov	r1, r4
 800cd1a:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd1e:	f7ff fa88 	bl	800c232 <quorem>
 800cd22:	4603      	mov	r3, r0
 800cd24:	3330      	adds	r3, #48	@ 0x30
 800cd26:	9003      	str	r0, [sp, #12]
 800cd28:	4639      	mov	r1, r7
 800cd2a:	9802      	ldr	r0, [sp, #8]
 800cd2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd2e:	f000 fc4d 	bl	800d5cc <__mcmp>
 800cd32:	462a      	mov	r2, r5
 800cd34:	9004      	str	r0, [sp, #16]
 800cd36:	4621      	mov	r1, r4
 800cd38:	4648      	mov	r0, r9
 800cd3a:	f000 fc63 	bl	800d604 <__mdiff>
 800cd3e:	68c2      	ldr	r2, [r0, #12]
 800cd40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd42:	4606      	mov	r6, r0
 800cd44:	bb02      	cbnz	r2, 800cd88 <_dtoa_r+0xa40>
 800cd46:	4601      	mov	r1, r0
 800cd48:	9802      	ldr	r0, [sp, #8]
 800cd4a:	f000 fc3f 	bl	800d5cc <__mcmp>
 800cd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd50:	4602      	mov	r2, r0
 800cd52:	4631      	mov	r1, r6
 800cd54:	4648      	mov	r0, r9
 800cd56:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd58:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd5a:	f000 fa05 	bl	800d168 <_Bfree>
 800cd5e:	9b07      	ldr	r3, [sp, #28]
 800cd60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cd62:	9e00      	ldr	r6, [sp, #0]
 800cd64:	ea42 0103 	orr.w	r1, r2, r3
 800cd68:	9b06      	ldr	r3, [sp, #24]
 800cd6a:	4319      	orrs	r1, r3
 800cd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd6e:	d10d      	bne.n	800cd8c <_dtoa_r+0xa44>
 800cd70:	2b39      	cmp	r3, #57	@ 0x39
 800cd72:	d027      	beq.n	800cdc4 <_dtoa_r+0xa7c>
 800cd74:	9a04      	ldr	r2, [sp, #16]
 800cd76:	2a00      	cmp	r2, #0
 800cd78:	dd01      	ble.n	800cd7e <_dtoa_r+0xa36>
 800cd7a:	9b03      	ldr	r3, [sp, #12]
 800cd7c:	3331      	adds	r3, #49	@ 0x31
 800cd7e:	f88b 3000 	strb.w	r3, [fp]
 800cd82:	e52e      	b.n	800c7e2 <_dtoa_r+0x49a>
 800cd84:	4628      	mov	r0, r5
 800cd86:	e7b9      	b.n	800ccfc <_dtoa_r+0x9b4>
 800cd88:	2201      	movs	r2, #1
 800cd8a:	e7e2      	b.n	800cd52 <_dtoa_r+0xa0a>
 800cd8c:	9904      	ldr	r1, [sp, #16]
 800cd8e:	2900      	cmp	r1, #0
 800cd90:	db04      	blt.n	800cd9c <_dtoa_r+0xa54>
 800cd92:	9807      	ldr	r0, [sp, #28]
 800cd94:	4301      	orrs	r1, r0
 800cd96:	9806      	ldr	r0, [sp, #24]
 800cd98:	4301      	orrs	r1, r0
 800cd9a:	d120      	bne.n	800cdde <_dtoa_r+0xa96>
 800cd9c:	2a00      	cmp	r2, #0
 800cd9e:	ddee      	ble.n	800cd7e <_dtoa_r+0xa36>
 800cda0:	9902      	ldr	r1, [sp, #8]
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	2201      	movs	r2, #1
 800cda6:	4648      	mov	r0, r9
 800cda8:	f000 fba4 	bl	800d4f4 <__lshift>
 800cdac:	4621      	mov	r1, r4
 800cdae:	9002      	str	r0, [sp, #8]
 800cdb0:	f000 fc0c 	bl	800d5cc <__mcmp>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	9b00      	ldr	r3, [sp, #0]
 800cdb8:	dc02      	bgt.n	800cdc0 <_dtoa_r+0xa78>
 800cdba:	d1e0      	bne.n	800cd7e <_dtoa_r+0xa36>
 800cdbc:	07da      	lsls	r2, r3, #31
 800cdbe:	d5de      	bpl.n	800cd7e <_dtoa_r+0xa36>
 800cdc0:	2b39      	cmp	r3, #57	@ 0x39
 800cdc2:	d1da      	bne.n	800cd7a <_dtoa_r+0xa32>
 800cdc4:	2339      	movs	r3, #57	@ 0x39
 800cdc6:	f88b 3000 	strb.w	r3, [fp]
 800cdca:	4633      	mov	r3, r6
 800cdcc:	461e      	mov	r6, r3
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cdd4:	2a39      	cmp	r2, #57	@ 0x39
 800cdd6:	d04e      	beq.n	800ce76 <_dtoa_r+0xb2e>
 800cdd8:	3201      	adds	r2, #1
 800cdda:	701a      	strb	r2, [r3, #0]
 800cddc:	e501      	b.n	800c7e2 <_dtoa_r+0x49a>
 800cdde:	2a00      	cmp	r2, #0
 800cde0:	dd03      	ble.n	800cdea <_dtoa_r+0xaa2>
 800cde2:	2b39      	cmp	r3, #57	@ 0x39
 800cde4:	d0ee      	beq.n	800cdc4 <_dtoa_r+0xa7c>
 800cde6:	3301      	adds	r3, #1
 800cde8:	e7c9      	b.n	800cd7e <_dtoa_r+0xa36>
 800cdea:	9a00      	ldr	r2, [sp, #0]
 800cdec:	9908      	ldr	r1, [sp, #32]
 800cdee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cdf2:	428a      	cmp	r2, r1
 800cdf4:	d028      	beq.n	800ce48 <_dtoa_r+0xb00>
 800cdf6:	9902      	ldr	r1, [sp, #8]
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	220a      	movs	r2, #10
 800cdfc:	4648      	mov	r0, r9
 800cdfe:	f000 f9d5 	bl	800d1ac <__multadd>
 800ce02:	42af      	cmp	r7, r5
 800ce04:	9002      	str	r0, [sp, #8]
 800ce06:	f04f 0300 	mov.w	r3, #0
 800ce0a:	f04f 020a 	mov.w	r2, #10
 800ce0e:	4639      	mov	r1, r7
 800ce10:	4648      	mov	r0, r9
 800ce12:	d107      	bne.n	800ce24 <_dtoa_r+0xadc>
 800ce14:	f000 f9ca 	bl	800d1ac <__multadd>
 800ce18:	4607      	mov	r7, r0
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	9b00      	ldr	r3, [sp, #0]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	e777      	b.n	800cd14 <_dtoa_r+0x9cc>
 800ce24:	f000 f9c2 	bl	800d1ac <__multadd>
 800ce28:	4629      	mov	r1, r5
 800ce2a:	4607      	mov	r7, r0
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	220a      	movs	r2, #10
 800ce30:	4648      	mov	r0, r9
 800ce32:	f000 f9bb 	bl	800d1ac <__multadd>
 800ce36:	4605      	mov	r5, r0
 800ce38:	e7f0      	b.n	800ce1c <_dtoa_r+0xad4>
 800ce3a:	f1bb 0f00 	cmp.w	fp, #0
 800ce3e:	bfcc      	ite	gt
 800ce40:	465e      	movgt	r6, fp
 800ce42:	2601      	movle	r6, #1
 800ce44:	4456      	add	r6, sl
 800ce46:	2700      	movs	r7, #0
 800ce48:	9902      	ldr	r1, [sp, #8]
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	4648      	mov	r0, r9
 800ce50:	f000 fb50 	bl	800d4f4 <__lshift>
 800ce54:	4621      	mov	r1, r4
 800ce56:	9002      	str	r0, [sp, #8]
 800ce58:	f000 fbb8 	bl	800d5cc <__mcmp>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	dcb4      	bgt.n	800cdca <_dtoa_r+0xa82>
 800ce60:	d102      	bne.n	800ce68 <_dtoa_r+0xb20>
 800ce62:	9b00      	ldr	r3, [sp, #0]
 800ce64:	07db      	lsls	r3, r3, #31
 800ce66:	d4b0      	bmi.n	800cdca <_dtoa_r+0xa82>
 800ce68:	4633      	mov	r3, r6
 800ce6a:	461e      	mov	r6, r3
 800ce6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce70:	2a30      	cmp	r2, #48	@ 0x30
 800ce72:	d0fa      	beq.n	800ce6a <_dtoa_r+0xb22>
 800ce74:	e4b5      	b.n	800c7e2 <_dtoa_r+0x49a>
 800ce76:	459a      	cmp	sl, r3
 800ce78:	d1a8      	bne.n	800cdcc <_dtoa_r+0xa84>
 800ce7a:	2331      	movs	r3, #49	@ 0x31
 800ce7c:	f108 0801 	add.w	r8, r8, #1
 800ce80:	f88a 3000 	strb.w	r3, [sl]
 800ce84:	e4ad      	b.n	800c7e2 <_dtoa_r+0x49a>
 800ce86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cee4 <_dtoa_r+0xb9c>
 800ce8c:	b11b      	cbz	r3, 800ce96 <_dtoa_r+0xb4e>
 800ce8e:	f10a 0308 	add.w	r3, sl, #8
 800ce92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ce94:	6013      	str	r3, [r2, #0]
 800ce96:	4650      	mov	r0, sl
 800ce98:	b017      	add	sp, #92	@ 0x5c
 800ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9e:	9b07      	ldr	r3, [sp, #28]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	f77f ae2e 	ble.w	800cb02 <_dtoa_r+0x7ba>
 800cea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cea8:	9308      	str	r3, [sp, #32]
 800ceaa:	2001      	movs	r0, #1
 800ceac:	e64d      	b.n	800cb4a <_dtoa_r+0x802>
 800ceae:	f1bb 0f00 	cmp.w	fp, #0
 800ceb2:	f77f aed9 	ble.w	800cc68 <_dtoa_r+0x920>
 800ceb6:	4656      	mov	r6, sl
 800ceb8:	9802      	ldr	r0, [sp, #8]
 800ceba:	4621      	mov	r1, r4
 800cebc:	f7ff f9b9 	bl	800c232 <quorem>
 800cec0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cec4:	f806 3b01 	strb.w	r3, [r6], #1
 800cec8:	eba6 020a 	sub.w	r2, r6, sl
 800cecc:	4593      	cmp	fp, r2
 800cece:	ddb4      	ble.n	800ce3a <_dtoa_r+0xaf2>
 800ced0:	9902      	ldr	r1, [sp, #8]
 800ced2:	2300      	movs	r3, #0
 800ced4:	220a      	movs	r2, #10
 800ced6:	4648      	mov	r0, r9
 800ced8:	f000 f968 	bl	800d1ac <__multadd>
 800cedc:	9002      	str	r0, [sp, #8]
 800cede:	e7eb      	b.n	800ceb8 <_dtoa_r+0xb70>
 800cee0:	0800fffe 	.word	0x0800fffe
 800cee4:	0800ff82 	.word	0x0800ff82

0800cee8 <_free_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4605      	mov	r5, r0
 800ceec:	2900      	cmp	r1, #0
 800ceee:	d041      	beq.n	800cf74 <_free_r+0x8c>
 800cef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cef4:	1f0c      	subs	r4, r1, #4
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bfb8      	it	lt
 800cefa:	18e4      	addlt	r4, r4, r3
 800cefc:	f000 f8e8 	bl	800d0d0 <__malloc_lock>
 800cf00:	4a1d      	ldr	r2, [pc, #116]	@ (800cf78 <_free_r+0x90>)
 800cf02:	6813      	ldr	r3, [r2, #0]
 800cf04:	b933      	cbnz	r3, 800cf14 <_free_r+0x2c>
 800cf06:	6063      	str	r3, [r4, #4]
 800cf08:	6014      	str	r4, [r2, #0]
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf10:	f000 b8e4 	b.w	800d0dc <__malloc_unlock>
 800cf14:	42a3      	cmp	r3, r4
 800cf16:	d908      	bls.n	800cf2a <_free_r+0x42>
 800cf18:	6820      	ldr	r0, [r4, #0]
 800cf1a:	1821      	adds	r1, r4, r0
 800cf1c:	428b      	cmp	r3, r1
 800cf1e:	bf01      	itttt	eq
 800cf20:	6819      	ldreq	r1, [r3, #0]
 800cf22:	685b      	ldreq	r3, [r3, #4]
 800cf24:	1809      	addeq	r1, r1, r0
 800cf26:	6021      	streq	r1, [r4, #0]
 800cf28:	e7ed      	b.n	800cf06 <_free_r+0x1e>
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	b10b      	cbz	r3, 800cf34 <_free_r+0x4c>
 800cf30:	42a3      	cmp	r3, r4
 800cf32:	d9fa      	bls.n	800cf2a <_free_r+0x42>
 800cf34:	6811      	ldr	r1, [r2, #0]
 800cf36:	1850      	adds	r0, r2, r1
 800cf38:	42a0      	cmp	r0, r4
 800cf3a:	d10b      	bne.n	800cf54 <_free_r+0x6c>
 800cf3c:	6820      	ldr	r0, [r4, #0]
 800cf3e:	4401      	add	r1, r0
 800cf40:	1850      	adds	r0, r2, r1
 800cf42:	4283      	cmp	r3, r0
 800cf44:	6011      	str	r1, [r2, #0]
 800cf46:	d1e0      	bne.n	800cf0a <_free_r+0x22>
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	6053      	str	r3, [r2, #4]
 800cf4e:	4408      	add	r0, r1
 800cf50:	6010      	str	r0, [r2, #0]
 800cf52:	e7da      	b.n	800cf0a <_free_r+0x22>
 800cf54:	d902      	bls.n	800cf5c <_free_r+0x74>
 800cf56:	230c      	movs	r3, #12
 800cf58:	602b      	str	r3, [r5, #0]
 800cf5a:	e7d6      	b.n	800cf0a <_free_r+0x22>
 800cf5c:	6820      	ldr	r0, [r4, #0]
 800cf5e:	1821      	adds	r1, r4, r0
 800cf60:	428b      	cmp	r3, r1
 800cf62:	bf04      	itt	eq
 800cf64:	6819      	ldreq	r1, [r3, #0]
 800cf66:	685b      	ldreq	r3, [r3, #4]
 800cf68:	6063      	str	r3, [r4, #4]
 800cf6a:	bf04      	itt	eq
 800cf6c:	1809      	addeq	r1, r1, r0
 800cf6e:	6021      	streq	r1, [r4, #0]
 800cf70:	6054      	str	r4, [r2, #4]
 800cf72:	e7ca      	b.n	800cf0a <_free_r+0x22>
 800cf74:	bd38      	pop	{r3, r4, r5, pc}
 800cf76:	bf00      	nop
 800cf78:	20002b18 	.word	0x20002b18

0800cf7c <malloc>:
 800cf7c:	4b02      	ldr	r3, [pc, #8]	@ (800cf88 <malloc+0xc>)
 800cf7e:	4601      	mov	r1, r0
 800cf80:	6818      	ldr	r0, [r3, #0]
 800cf82:	f000 b825 	b.w	800cfd0 <_malloc_r>
 800cf86:	bf00      	nop
 800cf88:	200024b8 	.word	0x200024b8

0800cf8c <sbrk_aligned>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	4e0f      	ldr	r6, [pc, #60]	@ (800cfcc <sbrk_aligned+0x40>)
 800cf90:	460c      	mov	r4, r1
 800cf92:	6831      	ldr	r1, [r6, #0]
 800cf94:	4605      	mov	r5, r0
 800cf96:	b911      	cbnz	r1, 800cf9e <sbrk_aligned+0x12>
 800cf98:	f001 fb96 	bl	800e6c8 <_sbrk_r>
 800cf9c:	6030      	str	r0, [r6, #0]
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f001 fb91 	bl	800e6c8 <_sbrk_r>
 800cfa6:	1c43      	adds	r3, r0, #1
 800cfa8:	d103      	bne.n	800cfb2 <sbrk_aligned+0x26>
 800cfaa:	f04f 34ff 	mov.w	r4, #4294967295
 800cfae:	4620      	mov	r0, r4
 800cfb0:	bd70      	pop	{r4, r5, r6, pc}
 800cfb2:	1cc4      	adds	r4, r0, #3
 800cfb4:	f024 0403 	bic.w	r4, r4, #3
 800cfb8:	42a0      	cmp	r0, r4
 800cfba:	d0f8      	beq.n	800cfae <sbrk_aligned+0x22>
 800cfbc:	1a21      	subs	r1, r4, r0
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f001 fb82 	bl	800e6c8 <_sbrk_r>
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	d1f2      	bne.n	800cfae <sbrk_aligned+0x22>
 800cfc8:	e7ef      	b.n	800cfaa <sbrk_aligned+0x1e>
 800cfca:	bf00      	nop
 800cfcc:	20002b14 	.word	0x20002b14

0800cfd0 <_malloc_r>:
 800cfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd4:	1ccd      	adds	r5, r1, #3
 800cfd6:	f025 0503 	bic.w	r5, r5, #3
 800cfda:	3508      	adds	r5, #8
 800cfdc:	2d0c      	cmp	r5, #12
 800cfde:	bf38      	it	cc
 800cfe0:	250c      	movcc	r5, #12
 800cfe2:	2d00      	cmp	r5, #0
 800cfe4:	4606      	mov	r6, r0
 800cfe6:	db01      	blt.n	800cfec <_malloc_r+0x1c>
 800cfe8:	42a9      	cmp	r1, r5
 800cfea:	d904      	bls.n	800cff6 <_malloc_r+0x26>
 800cfec:	230c      	movs	r3, #12
 800cfee:	6033      	str	r3, [r6, #0]
 800cff0:	2000      	movs	r0, #0
 800cff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0cc <_malloc_r+0xfc>
 800cffa:	f000 f869 	bl	800d0d0 <__malloc_lock>
 800cffe:	f8d8 3000 	ldr.w	r3, [r8]
 800d002:	461c      	mov	r4, r3
 800d004:	bb44      	cbnz	r4, 800d058 <_malloc_r+0x88>
 800d006:	4629      	mov	r1, r5
 800d008:	4630      	mov	r0, r6
 800d00a:	f7ff ffbf 	bl	800cf8c <sbrk_aligned>
 800d00e:	1c43      	adds	r3, r0, #1
 800d010:	4604      	mov	r4, r0
 800d012:	d158      	bne.n	800d0c6 <_malloc_r+0xf6>
 800d014:	f8d8 4000 	ldr.w	r4, [r8]
 800d018:	4627      	mov	r7, r4
 800d01a:	2f00      	cmp	r7, #0
 800d01c:	d143      	bne.n	800d0a6 <_malloc_r+0xd6>
 800d01e:	2c00      	cmp	r4, #0
 800d020:	d04b      	beq.n	800d0ba <_malloc_r+0xea>
 800d022:	6823      	ldr	r3, [r4, #0]
 800d024:	4639      	mov	r1, r7
 800d026:	4630      	mov	r0, r6
 800d028:	eb04 0903 	add.w	r9, r4, r3
 800d02c:	f001 fb4c 	bl	800e6c8 <_sbrk_r>
 800d030:	4581      	cmp	r9, r0
 800d032:	d142      	bne.n	800d0ba <_malloc_r+0xea>
 800d034:	6821      	ldr	r1, [r4, #0]
 800d036:	1a6d      	subs	r5, r5, r1
 800d038:	4629      	mov	r1, r5
 800d03a:	4630      	mov	r0, r6
 800d03c:	f7ff ffa6 	bl	800cf8c <sbrk_aligned>
 800d040:	3001      	adds	r0, #1
 800d042:	d03a      	beq.n	800d0ba <_malloc_r+0xea>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	442b      	add	r3, r5
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	f8d8 3000 	ldr.w	r3, [r8]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	bb62      	cbnz	r2, 800d0ac <_malloc_r+0xdc>
 800d052:	f8c8 7000 	str.w	r7, [r8]
 800d056:	e00f      	b.n	800d078 <_malloc_r+0xa8>
 800d058:	6822      	ldr	r2, [r4, #0]
 800d05a:	1b52      	subs	r2, r2, r5
 800d05c:	d420      	bmi.n	800d0a0 <_malloc_r+0xd0>
 800d05e:	2a0b      	cmp	r2, #11
 800d060:	d917      	bls.n	800d092 <_malloc_r+0xc2>
 800d062:	1961      	adds	r1, r4, r5
 800d064:	42a3      	cmp	r3, r4
 800d066:	6025      	str	r5, [r4, #0]
 800d068:	bf18      	it	ne
 800d06a:	6059      	strne	r1, [r3, #4]
 800d06c:	6863      	ldr	r3, [r4, #4]
 800d06e:	bf08      	it	eq
 800d070:	f8c8 1000 	streq.w	r1, [r8]
 800d074:	5162      	str	r2, [r4, r5]
 800d076:	604b      	str	r3, [r1, #4]
 800d078:	4630      	mov	r0, r6
 800d07a:	f000 f82f 	bl	800d0dc <__malloc_unlock>
 800d07e:	f104 000b 	add.w	r0, r4, #11
 800d082:	1d23      	adds	r3, r4, #4
 800d084:	f020 0007 	bic.w	r0, r0, #7
 800d088:	1ac2      	subs	r2, r0, r3
 800d08a:	bf1c      	itt	ne
 800d08c:	1a1b      	subne	r3, r3, r0
 800d08e:	50a3      	strne	r3, [r4, r2]
 800d090:	e7af      	b.n	800cff2 <_malloc_r+0x22>
 800d092:	6862      	ldr	r2, [r4, #4]
 800d094:	42a3      	cmp	r3, r4
 800d096:	bf0c      	ite	eq
 800d098:	f8c8 2000 	streq.w	r2, [r8]
 800d09c:	605a      	strne	r2, [r3, #4]
 800d09e:	e7eb      	b.n	800d078 <_malloc_r+0xa8>
 800d0a0:	4623      	mov	r3, r4
 800d0a2:	6864      	ldr	r4, [r4, #4]
 800d0a4:	e7ae      	b.n	800d004 <_malloc_r+0x34>
 800d0a6:	463c      	mov	r4, r7
 800d0a8:	687f      	ldr	r7, [r7, #4]
 800d0aa:	e7b6      	b.n	800d01a <_malloc_r+0x4a>
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	42a3      	cmp	r3, r4
 800d0b2:	d1fb      	bne.n	800d0ac <_malloc_r+0xdc>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	6053      	str	r3, [r2, #4]
 800d0b8:	e7de      	b.n	800d078 <_malloc_r+0xa8>
 800d0ba:	230c      	movs	r3, #12
 800d0bc:	6033      	str	r3, [r6, #0]
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f000 f80c 	bl	800d0dc <__malloc_unlock>
 800d0c4:	e794      	b.n	800cff0 <_malloc_r+0x20>
 800d0c6:	6005      	str	r5, [r0, #0]
 800d0c8:	e7d6      	b.n	800d078 <_malloc_r+0xa8>
 800d0ca:	bf00      	nop
 800d0cc:	20002b18 	.word	0x20002b18

0800d0d0 <__malloc_lock>:
 800d0d0:	4801      	ldr	r0, [pc, #4]	@ (800d0d8 <__malloc_lock+0x8>)
 800d0d2:	f7ff b896 	b.w	800c202 <__retarget_lock_acquire_recursive>
 800d0d6:	bf00      	nop
 800d0d8:	20002b10 	.word	0x20002b10

0800d0dc <__malloc_unlock>:
 800d0dc:	4801      	ldr	r0, [pc, #4]	@ (800d0e4 <__malloc_unlock+0x8>)
 800d0de:	f7ff b891 	b.w	800c204 <__retarget_lock_release_recursive>
 800d0e2:	bf00      	nop
 800d0e4:	20002b10 	.word	0x20002b10

0800d0e8 <_Balloc>:
 800d0e8:	b570      	push	{r4, r5, r6, lr}
 800d0ea:	69c6      	ldr	r6, [r0, #28]
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	b976      	cbnz	r6, 800d110 <_Balloc+0x28>
 800d0f2:	2010      	movs	r0, #16
 800d0f4:	f7ff ff42 	bl	800cf7c <malloc>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	61e0      	str	r0, [r4, #28]
 800d0fc:	b920      	cbnz	r0, 800d108 <_Balloc+0x20>
 800d0fe:	4b18      	ldr	r3, [pc, #96]	@ (800d160 <_Balloc+0x78>)
 800d100:	4818      	ldr	r0, [pc, #96]	@ (800d164 <_Balloc+0x7c>)
 800d102:	216b      	movs	r1, #107	@ 0x6b
 800d104:	f001 faf0 	bl	800e6e8 <__assert_func>
 800d108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d10c:	6006      	str	r6, [r0, #0]
 800d10e:	60c6      	str	r6, [r0, #12]
 800d110:	69e6      	ldr	r6, [r4, #28]
 800d112:	68f3      	ldr	r3, [r6, #12]
 800d114:	b183      	cbz	r3, 800d138 <_Balloc+0x50>
 800d116:	69e3      	ldr	r3, [r4, #28]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d11e:	b9b8      	cbnz	r0, 800d150 <_Balloc+0x68>
 800d120:	2101      	movs	r1, #1
 800d122:	fa01 f605 	lsl.w	r6, r1, r5
 800d126:	1d72      	adds	r2, r6, #5
 800d128:	0092      	lsls	r2, r2, #2
 800d12a:	4620      	mov	r0, r4
 800d12c:	f001 fafa 	bl	800e724 <_calloc_r>
 800d130:	b160      	cbz	r0, 800d14c <_Balloc+0x64>
 800d132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d136:	e00e      	b.n	800d156 <_Balloc+0x6e>
 800d138:	2221      	movs	r2, #33	@ 0x21
 800d13a:	2104      	movs	r1, #4
 800d13c:	4620      	mov	r0, r4
 800d13e:	f001 faf1 	bl	800e724 <_calloc_r>
 800d142:	69e3      	ldr	r3, [r4, #28]
 800d144:	60f0      	str	r0, [r6, #12]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1e4      	bne.n	800d116 <_Balloc+0x2e>
 800d14c:	2000      	movs	r0, #0
 800d14e:	bd70      	pop	{r4, r5, r6, pc}
 800d150:	6802      	ldr	r2, [r0, #0]
 800d152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d156:	2300      	movs	r3, #0
 800d158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d15c:	e7f7      	b.n	800d14e <_Balloc+0x66>
 800d15e:	bf00      	nop
 800d160:	0800ff8f 	.word	0x0800ff8f
 800d164:	0801000f 	.word	0x0801000f

0800d168 <_Bfree>:
 800d168:	b570      	push	{r4, r5, r6, lr}
 800d16a:	69c6      	ldr	r6, [r0, #28]
 800d16c:	4605      	mov	r5, r0
 800d16e:	460c      	mov	r4, r1
 800d170:	b976      	cbnz	r6, 800d190 <_Bfree+0x28>
 800d172:	2010      	movs	r0, #16
 800d174:	f7ff ff02 	bl	800cf7c <malloc>
 800d178:	4602      	mov	r2, r0
 800d17a:	61e8      	str	r0, [r5, #28]
 800d17c:	b920      	cbnz	r0, 800d188 <_Bfree+0x20>
 800d17e:	4b09      	ldr	r3, [pc, #36]	@ (800d1a4 <_Bfree+0x3c>)
 800d180:	4809      	ldr	r0, [pc, #36]	@ (800d1a8 <_Bfree+0x40>)
 800d182:	218f      	movs	r1, #143	@ 0x8f
 800d184:	f001 fab0 	bl	800e6e8 <__assert_func>
 800d188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d18c:	6006      	str	r6, [r0, #0]
 800d18e:	60c6      	str	r6, [r0, #12]
 800d190:	b13c      	cbz	r4, 800d1a2 <_Bfree+0x3a>
 800d192:	69eb      	ldr	r3, [r5, #28]
 800d194:	6862      	ldr	r2, [r4, #4]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d19c:	6021      	str	r1, [r4, #0]
 800d19e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1a2:	bd70      	pop	{r4, r5, r6, pc}
 800d1a4:	0800ff8f 	.word	0x0800ff8f
 800d1a8:	0801000f 	.word	0x0801000f

0800d1ac <__multadd>:
 800d1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b0:	690d      	ldr	r5, [r1, #16]
 800d1b2:	4607      	mov	r7, r0
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	461e      	mov	r6, r3
 800d1b8:	f101 0c14 	add.w	ip, r1, #20
 800d1bc:	2000      	movs	r0, #0
 800d1be:	f8dc 3000 	ldr.w	r3, [ip]
 800d1c2:	b299      	uxth	r1, r3
 800d1c4:	fb02 6101 	mla	r1, r2, r1, r6
 800d1c8:	0c1e      	lsrs	r6, r3, #16
 800d1ca:	0c0b      	lsrs	r3, r1, #16
 800d1cc:	fb02 3306 	mla	r3, r2, r6, r3
 800d1d0:	b289      	uxth	r1, r1
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1d8:	4285      	cmp	r5, r0
 800d1da:	f84c 1b04 	str.w	r1, [ip], #4
 800d1de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1e2:	dcec      	bgt.n	800d1be <__multadd+0x12>
 800d1e4:	b30e      	cbz	r6, 800d22a <__multadd+0x7e>
 800d1e6:	68a3      	ldr	r3, [r4, #8]
 800d1e8:	42ab      	cmp	r3, r5
 800d1ea:	dc19      	bgt.n	800d220 <__multadd+0x74>
 800d1ec:	6861      	ldr	r1, [r4, #4]
 800d1ee:	4638      	mov	r0, r7
 800d1f0:	3101      	adds	r1, #1
 800d1f2:	f7ff ff79 	bl	800d0e8 <_Balloc>
 800d1f6:	4680      	mov	r8, r0
 800d1f8:	b928      	cbnz	r0, 800d206 <__multadd+0x5a>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d230 <__multadd+0x84>)
 800d1fe:	480d      	ldr	r0, [pc, #52]	@ (800d234 <__multadd+0x88>)
 800d200:	21ba      	movs	r1, #186	@ 0xba
 800d202:	f001 fa71 	bl	800e6e8 <__assert_func>
 800d206:	6922      	ldr	r2, [r4, #16]
 800d208:	3202      	adds	r2, #2
 800d20a:	f104 010c 	add.w	r1, r4, #12
 800d20e:	0092      	lsls	r2, r2, #2
 800d210:	300c      	adds	r0, #12
 800d212:	f7ff f800 	bl	800c216 <memcpy>
 800d216:	4621      	mov	r1, r4
 800d218:	4638      	mov	r0, r7
 800d21a:	f7ff ffa5 	bl	800d168 <_Bfree>
 800d21e:	4644      	mov	r4, r8
 800d220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d224:	3501      	adds	r5, #1
 800d226:	615e      	str	r6, [r3, #20]
 800d228:	6125      	str	r5, [r4, #16]
 800d22a:	4620      	mov	r0, r4
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	0800fffe 	.word	0x0800fffe
 800d234:	0801000f 	.word	0x0801000f

0800d238 <__hi0bits>:
 800d238:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d23c:	4603      	mov	r3, r0
 800d23e:	bf36      	itet	cc
 800d240:	0403      	lslcc	r3, r0, #16
 800d242:	2000      	movcs	r0, #0
 800d244:	2010      	movcc	r0, #16
 800d246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d24a:	bf3c      	itt	cc
 800d24c:	021b      	lslcc	r3, r3, #8
 800d24e:	3008      	addcc	r0, #8
 800d250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d254:	bf3c      	itt	cc
 800d256:	011b      	lslcc	r3, r3, #4
 800d258:	3004      	addcc	r0, #4
 800d25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d25e:	bf3c      	itt	cc
 800d260:	009b      	lslcc	r3, r3, #2
 800d262:	3002      	addcc	r0, #2
 800d264:	2b00      	cmp	r3, #0
 800d266:	db05      	blt.n	800d274 <__hi0bits+0x3c>
 800d268:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d26c:	f100 0001 	add.w	r0, r0, #1
 800d270:	bf08      	it	eq
 800d272:	2020      	moveq	r0, #32
 800d274:	4770      	bx	lr

0800d276 <__lo0bits>:
 800d276:	6803      	ldr	r3, [r0, #0]
 800d278:	4602      	mov	r2, r0
 800d27a:	f013 0007 	ands.w	r0, r3, #7
 800d27e:	d00b      	beq.n	800d298 <__lo0bits+0x22>
 800d280:	07d9      	lsls	r1, r3, #31
 800d282:	d421      	bmi.n	800d2c8 <__lo0bits+0x52>
 800d284:	0798      	lsls	r0, r3, #30
 800d286:	bf49      	itett	mi
 800d288:	085b      	lsrmi	r3, r3, #1
 800d28a:	089b      	lsrpl	r3, r3, #2
 800d28c:	2001      	movmi	r0, #1
 800d28e:	6013      	strmi	r3, [r2, #0]
 800d290:	bf5c      	itt	pl
 800d292:	6013      	strpl	r3, [r2, #0]
 800d294:	2002      	movpl	r0, #2
 800d296:	4770      	bx	lr
 800d298:	b299      	uxth	r1, r3
 800d29a:	b909      	cbnz	r1, 800d2a0 <__lo0bits+0x2a>
 800d29c:	0c1b      	lsrs	r3, r3, #16
 800d29e:	2010      	movs	r0, #16
 800d2a0:	b2d9      	uxtb	r1, r3
 800d2a2:	b909      	cbnz	r1, 800d2a8 <__lo0bits+0x32>
 800d2a4:	3008      	adds	r0, #8
 800d2a6:	0a1b      	lsrs	r3, r3, #8
 800d2a8:	0719      	lsls	r1, r3, #28
 800d2aa:	bf04      	itt	eq
 800d2ac:	091b      	lsreq	r3, r3, #4
 800d2ae:	3004      	addeq	r0, #4
 800d2b0:	0799      	lsls	r1, r3, #30
 800d2b2:	bf04      	itt	eq
 800d2b4:	089b      	lsreq	r3, r3, #2
 800d2b6:	3002      	addeq	r0, #2
 800d2b8:	07d9      	lsls	r1, r3, #31
 800d2ba:	d403      	bmi.n	800d2c4 <__lo0bits+0x4e>
 800d2bc:	085b      	lsrs	r3, r3, #1
 800d2be:	f100 0001 	add.w	r0, r0, #1
 800d2c2:	d003      	beq.n	800d2cc <__lo0bits+0x56>
 800d2c4:	6013      	str	r3, [r2, #0]
 800d2c6:	4770      	bx	lr
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	4770      	bx	lr
 800d2cc:	2020      	movs	r0, #32
 800d2ce:	4770      	bx	lr

0800d2d0 <__i2b>:
 800d2d0:	b510      	push	{r4, lr}
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	f7ff ff07 	bl	800d0e8 <_Balloc>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	b928      	cbnz	r0, 800d2ea <__i2b+0x1a>
 800d2de:	4b05      	ldr	r3, [pc, #20]	@ (800d2f4 <__i2b+0x24>)
 800d2e0:	4805      	ldr	r0, [pc, #20]	@ (800d2f8 <__i2b+0x28>)
 800d2e2:	f240 1145 	movw	r1, #325	@ 0x145
 800d2e6:	f001 f9ff 	bl	800e6e8 <__assert_func>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	6144      	str	r4, [r0, #20]
 800d2ee:	6103      	str	r3, [r0, #16]
 800d2f0:	bd10      	pop	{r4, pc}
 800d2f2:	bf00      	nop
 800d2f4:	0800fffe 	.word	0x0800fffe
 800d2f8:	0801000f 	.word	0x0801000f

0800d2fc <__multiply>:
 800d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d300:	4617      	mov	r7, r2
 800d302:	690a      	ldr	r2, [r1, #16]
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	429a      	cmp	r2, r3
 800d308:	bfa8      	it	ge
 800d30a:	463b      	movge	r3, r7
 800d30c:	4689      	mov	r9, r1
 800d30e:	bfa4      	itt	ge
 800d310:	460f      	movge	r7, r1
 800d312:	4699      	movge	r9, r3
 800d314:	693d      	ldr	r5, [r7, #16]
 800d316:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	6879      	ldr	r1, [r7, #4]
 800d31e:	eb05 060a 	add.w	r6, r5, sl
 800d322:	42b3      	cmp	r3, r6
 800d324:	b085      	sub	sp, #20
 800d326:	bfb8      	it	lt
 800d328:	3101      	addlt	r1, #1
 800d32a:	f7ff fedd 	bl	800d0e8 <_Balloc>
 800d32e:	b930      	cbnz	r0, 800d33e <__multiply+0x42>
 800d330:	4602      	mov	r2, r0
 800d332:	4b41      	ldr	r3, [pc, #260]	@ (800d438 <__multiply+0x13c>)
 800d334:	4841      	ldr	r0, [pc, #260]	@ (800d43c <__multiply+0x140>)
 800d336:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d33a:	f001 f9d5 	bl	800e6e8 <__assert_func>
 800d33e:	f100 0414 	add.w	r4, r0, #20
 800d342:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d346:	4623      	mov	r3, r4
 800d348:	2200      	movs	r2, #0
 800d34a:	4573      	cmp	r3, lr
 800d34c:	d320      	bcc.n	800d390 <__multiply+0x94>
 800d34e:	f107 0814 	add.w	r8, r7, #20
 800d352:	f109 0114 	add.w	r1, r9, #20
 800d356:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d35a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d35e:	9302      	str	r3, [sp, #8]
 800d360:	1beb      	subs	r3, r5, r7
 800d362:	3b15      	subs	r3, #21
 800d364:	f023 0303 	bic.w	r3, r3, #3
 800d368:	3304      	adds	r3, #4
 800d36a:	3715      	adds	r7, #21
 800d36c:	42bd      	cmp	r5, r7
 800d36e:	bf38      	it	cc
 800d370:	2304      	movcc	r3, #4
 800d372:	9301      	str	r3, [sp, #4]
 800d374:	9b02      	ldr	r3, [sp, #8]
 800d376:	9103      	str	r1, [sp, #12]
 800d378:	428b      	cmp	r3, r1
 800d37a:	d80c      	bhi.n	800d396 <__multiply+0x9a>
 800d37c:	2e00      	cmp	r6, #0
 800d37e:	dd03      	ble.n	800d388 <__multiply+0x8c>
 800d380:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d384:	2b00      	cmp	r3, #0
 800d386:	d055      	beq.n	800d434 <__multiply+0x138>
 800d388:	6106      	str	r6, [r0, #16]
 800d38a:	b005      	add	sp, #20
 800d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d390:	f843 2b04 	str.w	r2, [r3], #4
 800d394:	e7d9      	b.n	800d34a <__multiply+0x4e>
 800d396:	f8b1 a000 	ldrh.w	sl, [r1]
 800d39a:	f1ba 0f00 	cmp.w	sl, #0
 800d39e:	d01f      	beq.n	800d3e0 <__multiply+0xe4>
 800d3a0:	46c4      	mov	ip, r8
 800d3a2:	46a1      	mov	r9, r4
 800d3a4:	2700      	movs	r7, #0
 800d3a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d3aa:	f8d9 3000 	ldr.w	r3, [r9]
 800d3ae:	fa1f fb82 	uxth.w	fp, r2
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d3b8:	443b      	add	r3, r7
 800d3ba:	f8d9 7000 	ldr.w	r7, [r9]
 800d3be:	0c12      	lsrs	r2, r2, #16
 800d3c0:	0c3f      	lsrs	r7, r7, #16
 800d3c2:	fb0a 7202 	mla	r2, sl, r2, r7
 800d3c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3d0:	4565      	cmp	r5, ip
 800d3d2:	f849 3b04 	str.w	r3, [r9], #4
 800d3d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d3da:	d8e4      	bhi.n	800d3a6 <__multiply+0xaa>
 800d3dc:	9b01      	ldr	r3, [sp, #4]
 800d3de:	50e7      	str	r7, [r4, r3]
 800d3e0:	9b03      	ldr	r3, [sp, #12]
 800d3e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d3e6:	3104      	adds	r1, #4
 800d3e8:	f1b9 0f00 	cmp.w	r9, #0
 800d3ec:	d020      	beq.n	800d430 <__multiply+0x134>
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	4647      	mov	r7, r8
 800d3f2:	46a4      	mov	ip, r4
 800d3f4:	f04f 0a00 	mov.w	sl, #0
 800d3f8:	f8b7 b000 	ldrh.w	fp, [r7]
 800d3fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d400:	fb09 220b 	mla	r2, r9, fp, r2
 800d404:	4452      	add	r2, sl
 800d406:	b29b      	uxth	r3, r3
 800d408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d40c:	f84c 3b04 	str.w	r3, [ip], #4
 800d410:	f857 3b04 	ldr.w	r3, [r7], #4
 800d414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d418:	f8bc 3000 	ldrh.w	r3, [ip]
 800d41c:	fb09 330a 	mla	r3, r9, sl, r3
 800d420:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d424:	42bd      	cmp	r5, r7
 800d426:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d42a:	d8e5      	bhi.n	800d3f8 <__multiply+0xfc>
 800d42c:	9a01      	ldr	r2, [sp, #4]
 800d42e:	50a3      	str	r3, [r4, r2]
 800d430:	3404      	adds	r4, #4
 800d432:	e79f      	b.n	800d374 <__multiply+0x78>
 800d434:	3e01      	subs	r6, #1
 800d436:	e7a1      	b.n	800d37c <__multiply+0x80>
 800d438:	0800fffe 	.word	0x0800fffe
 800d43c:	0801000f 	.word	0x0801000f

0800d440 <__pow5mult>:
 800d440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d444:	4615      	mov	r5, r2
 800d446:	f012 0203 	ands.w	r2, r2, #3
 800d44a:	4607      	mov	r7, r0
 800d44c:	460e      	mov	r6, r1
 800d44e:	d007      	beq.n	800d460 <__pow5mult+0x20>
 800d450:	4c25      	ldr	r4, [pc, #148]	@ (800d4e8 <__pow5mult+0xa8>)
 800d452:	3a01      	subs	r2, #1
 800d454:	2300      	movs	r3, #0
 800d456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d45a:	f7ff fea7 	bl	800d1ac <__multadd>
 800d45e:	4606      	mov	r6, r0
 800d460:	10ad      	asrs	r5, r5, #2
 800d462:	d03d      	beq.n	800d4e0 <__pow5mult+0xa0>
 800d464:	69fc      	ldr	r4, [r7, #28]
 800d466:	b97c      	cbnz	r4, 800d488 <__pow5mult+0x48>
 800d468:	2010      	movs	r0, #16
 800d46a:	f7ff fd87 	bl	800cf7c <malloc>
 800d46e:	4602      	mov	r2, r0
 800d470:	61f8      	str	r0, [r7, #28]
 800d472:	b928      	cbnz	r0, 800d480 <__pow5mult+0x40>
 800d474:	4b1d      	ldr	r3, [pc, #116]	@ (800d4ec <__pow5mult+0xac>)
 800d476:	481e      	ldr	r0, [pc, #120]	@ (800d4f0 <__pow5mult+0xb0>)
 800d478:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d47c:	f001 f934 	bl	800e6e8 <__assert_func>
 800d480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d484:	6004      	str	r4, [r0, #0]
 800d486:	60c4      	str	r4, [r0, #12]
 800d488:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d490:	b94c      	cbnz	r4, 800d4a6 <__pow5mult+0x66>
 800d492:	f240 2171 	movw	r1, #625	@ 0x271
 800d496:	4638      	mov	r0, r7
 800d498:	f7ff ff1a 	bl	800d2d0 <__i2b>
 800d49c:	2300      	movs	r3, #0
 800d49e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	f04f 0900 	mov.w	r9, #0
 800d4aa:	07eb      	lsls	r3, r5, #31
 800d4ac:	d50a      	bpl.n	800d4c4 <__pow5mult+0x84>
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	f7ff ff22 	bl	800d2fc <__multiply>
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	4680      	mov	r8, r0
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff fe53 	bl	800d168 <_Bfree>
 800d4c2:	4646      	mov	r6, r8
 800d4c4:	106d      	asrs	r5, r5, #1
 800d4c6:	d00b      	beq.n	800d4e0 <__pow5mult+0xa0>
 800d4c8:	6820      	ldr	r0, [r4, #0]
 800d4ca:	b938      	cbnz	r0, 800d4dc <__pow5mult+0x9c>
 800d4cc:	4622      	mov	r2, r4
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	f7ff ff13 	bl	800d2fc <__multiply>
 800d4d6:	6020      	str	r0, [r4, #0]
 800d4d8:	f8c0 9000 	str.w	r9, [r0]
 800d4dc:	4604      	mov	r4, r0
 800d4de:	e7e4      	b.n	800d4aa <__pow5mult+0x6a>
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4e6:	bf00      	nop
 800d4e8:	080100dc 	.word	0x080100dc
 800d4ec:	0800ff8f 	.word	0x0800ff8f
 800d4f0:	0801000f 	.word	0x0801000f

0800d4f4 <__lshift>:
 800d4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	6849      	ldr	r1, [r1, #4]
 800d4fc:	6923      	ldr	r3, [r4, #16]
 800d4fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d502:	68a3      	ldr	r3, [r4, #8]
 800d504:	4607      	mov	r7, r0
 800d506:	4691      	mov	r9, r2
 800d508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d50c:	f108 0601 	add.w	r6, r8, #1
 800d510:	42b3      	cmp	r3, r6
 800d512:	db0b      	blt.n	800d52c <__lshift+0x38>
 800d514:	4638      	mov	r0, r7
 800d516:	f7ff fde7 	bl	800d0e8 <_Balloc>
 800d51a:	4605      	mov	r5, r0
 800d51c:	b948      	cbnz	r0, 800d532 <__lshift+0x3e>
 800d51e:	4602      	mov	r2, r0
 800d520:	4b28      	ldr	r3, [pc, #160]	@ (800d5c4 <__lshift+0xd0>)
 800d522:	4829      	ldr	r0, [pc, #164]	@ (800d5c8 <__lshift+0xd4>)
 800d524:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d528:	f001 f8de 	bl	800e6e8 <__assert_func>
 800d52c:	3101      	adds	r1, #1
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	e7ee      	b.n	800d510 <__lshift+0x1c>
 800d532:	2300      	movs	r3, #0
 800d534:	f100 0114 	add.w	r1, r0, #20
 800d538:	f100 0210 	add.w	r2, r0, #16
 800d53c:	4618      	mov	r0, r3
 800d53e:	4553      	cmp	r3, sl
 800d540:	db33      	blt.n	800d5aa <__lshift+0xb6>
 800d542:	6920      	ldr	r0, [r4, #16]
 800d544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d548:	f104 0314 	add.w	r3, r4, #20
 800d54c:	f019 091f 	ands.w	r9, r9, #31
 800d550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d558:	d02b      	beq.n	800d5b2 <__lshift+0xbe>
 800d55a:	f1c9 0e20 	rsb	lr, r9, #32
 800d55e:	468a      	mov	sl, r1
 800d560:	2200      	movs	r2, #0
 800d562:	6818      	ldr	r0, [r3, #0]
 800d564:	fa00 f009 	lsl.w	r0, r0, r9
 800d568:	4310      	orrs	r0, r2
 800d56a:	f84a 0b04 	str.w	r0, [sl], #4
 800d56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d572:	459c      	cmp	ip, r3
 800d574:	fa22 f20e 	lsr.w	r2, r2, lr
 800d578:	d8f3      	bhi.n	800d562 <__lshift+0x6e>
 800d57a:	ebac 0304 	sub.w	r3, ip, r4
 800d57e:	3b15      	subs	r3, #21
 800d580:	f023 0303 	bic.w	r3, r3, #3
 800d584:	3304      	adds	r3, #4
 800d586:	f104 0015 	add.w	r0, r4, #21
 800d58a:	4560      	cmp	r0, ip
 800d58c:	bf88      	it	hi
 800d58e:	2304      	movhi	r3, #4
 800d590:	50ca      	str	r2, [r1, r3]
 800d592:	b10a      	cbz	r2, 800d598 <__lshift+0xa4>
 800d594:	f108 0602 	add.w	r6, r8, #2
 800d598:	3e01      	subs	r6, #1
 800d59a:	4638      	mov	r0, r7
 800d59c:	612e      	str	r6, [r5, #16]
 800d59e:	4621      	mov	r1, r4
 800d5a0:	f7ff fde2 	bl	800d168 <_Bfree>
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	e7c5      	b.n	800d53e <__lshift+0x4a>
 800d5b2:	3904      	subs	r1, #4
 800d5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5bc:	459c      	cmp	ip, r3
 800d5be:	d8f9      	bhi.n	800d5b4 <__lshift+0xc0>
 800d5c0:	e7ea      	b.n	800d598 <__lshift+0xa4>
 800d5c2:	bf00      	nop
 800d5c4:	0800fffe 	.word	0x0800fffe
 800d5c8:	0801000f 	.word	0x0801000f

0800d5cc <__mcmp>:
 800d5cc:	690a      	ldr	r2, [r1, #16]
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	6900      	ldr	r0, [r0, #16]
 800d5d2:	1a80      	subs	r0, r0, r2
 800d5d4:	b530      	push	{r4, r5, lr}
 800d5d6:	d10e      	bne.n	800d5f6 <__mcmp+0x2a>
 800d5d8:	3314      	adds	r3, #20
 800d5da:	3114      	adds	r1, #20
 800d5dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d5e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d5e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5ec:	4295      	cmp	r5, r2
 800d5ee:	d003      	beq.n	800d5f8 <__mcmp+0x2c>
 800d5f0:	d205      	bcs.n	800d5fe <__mcmp+0x32>
 800d5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f6:	bd30      	pop	{r4, r5, pc}
 800d5f8:	42a3      	cmp	r3, r4
 800d5fa:	d3f3      	bcc.n	800d5e4 <__mcmp+0x18>
 800d5fc:	e7fb      	b.n	800d5f6 <__mcmp+0x2a>
 800d5fe:	2001      	movs	r0, #1
 800d600:	e7f9      	b.n	800d5f6 <__mcmp+0x2a>
	...

0800d604 <__mdiff>:
 800d604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d608:	4689      	mov	r9, r1
 800d60a:	4606      	mov	r6, r0
 800d60c:	4611      	mov	r1, r2
 800d60e:	4648      	mov	r0, r9
 800d610:	4614      	mov	r4, r2
 800d612:	f7ff ffdb 	bl	800d5cc <__mcmp>
 800d616:	1e05      	subs	r5, r0, #0
 800d618:	d112      	bne.n	800d640 <__mdiff+0x3c>
 800d61a:	4629      	mov	r1, r5
 800d61c:	4630      	mov	r0, r6
 800d61e:	f7ff fd63 	bl	800d0e8 <_Balloc>
 800d622:	4602      	mov	r2, r0
 800d624:	b928      	cbnz	r0, 800d632 <__mdiff+0x2e>
 800d626:	4b3f      	ldr	r3, [pc, #252]	@ (800d724 <__mdiff+0x120>)
 800d628:	f240 2137 	movw	r1, #567	@ 0x237
 800d62c:	483e      	ldr	r0, [pc, #248]	@ (800d728 <__mdiff+0x124>)
 800d62e:	f001 f85b 	bl	800e6e8 <__assert_func>
 800d632:	2301      	movs	r3, #1
 800d634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d638:	4610      	mov	r0, r2
 800d63a:	b003      	add	sp, #12
 800d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d640:	bfbc      	itt	lt
 800d642:	464b      	movlt	r3, r9
 800d644:	46a1      	movlt	r9, r4
 800d646:	4630      	mov	r0, r6
 800d648:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d64c:	bfba      	itte	lt
 800d64e:	461c      	movlt	r4, r3
 800d650:	2501      	movlt	r5, #1
 800d652:	2500      	movge	r5, #0
 800d654:	f7ff fd48 	bl	800d0e8 <_Balloc>
 800d658:	4602      	mov	r2, r0
 800d65a:	b918      	cbnz	r0, 800d664 <__mdiff+0x60>
 800d65c:	4b31      	ldr	r3, [pc, #196]	@ (800d724 <__mdiff+0x120>)
 800d65e:	f240 2145 	movw	r1, #581	@ 0x245
 800d662:	e7e3      	b.n	800d62c <__mdiff+0x28>
 800d664:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d668:	6926      	ldr	r6, [r4, #16]
 800d66a:	60c5      	str	r5, [r0, #12]
 800d66c:	f109 0310 	add.w	r3, r9, #16
 800d670:	f109 0514 	add.w	r5, r9, #20
 800d674:	f104 0e14 	add.w	lr, r4, #20
 800d678:	f100 0b14 	add.w	fp, r0, #20
 800d67c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d680:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	46d9      	mov	r9, fp
 800d688:	f04f 0c00 	mov.w	ip, #0
 800d68c:	9b01      	ldr	r3, [sp, #4]
 800d68e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d692:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d696:	9301      	str	r3, [sp, #4]
 800d698:	fa1f f38a 	uxth.w	r3, sl
 800d69c:	4619      	mov	r1, r3
 800d69e:	b283      	uxth	r3, r0
 800d6a0:	1acb      	subs	r3, r1, r3
 800d6a2:	0c00      	lsrs	r0, r0, #16
 800d6a4:	4463      	add	r3, ip
 800d6a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d6aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d6b4:	4576      	cmp	r6, lr
 800d6b6:	f849 3b04 	str.w	r3, [r9], #4
 800d6ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d6be:	d8e5      	bhi.n	800d68c <__mdiff+0x88>
 800d6c0:	1b33      	subs	r3, r6, r4
 800d6c2:	3b15      	subs	r3, #21
 800d6c4:	f023 0303 	bic.w	r3, r3, #3
 800d6c8:	3415      	adds	r4, #21
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	42a6      	cmp	r6, r4
 800d6ce:	bf38      	it	cc
 800d6d0:	2304      	movcc	r3, #4
 800d6d2:	441d      	add	r5, r3
 800d6d4:	445b      	add	r3, fp
 800d6d6:	461e      	mov	r6, r3
 800d6d8:	462c      	mov	r4, r5
 800d6da:	4544      	cmp	r4, r8
 800d6dc:	d30e      	bcc.n	800d6fc <__mdiff+0xf8>
 800d6de:	f108 0103 	add.w	r1, r8, #3
 800d6e2:	1b49      	subs	r1, r1, r5
 800d6e4:	f021 0103 	bic.w	r1, r1, #3
 800d6e8:	3d03      	subs	r5, #3
 800d6ea:	45a8      	cmp	r8, r5
 800d6ec:	bf38      	it	cc
 800d6ee:	2100      	movcc	r1, #0
 800d6f0:	440b      	add	r3, r1
 800d6f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6f6:	b191      	cbz	r1, 800d71e <__mdiff+0x11a>
 800d6f8:	6117      	str	r7, [r2, #16]
 800d6fa:	e79d      	b.n	800d638 <__mdiff+0x34>
 800d6fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800d700:	46e6      	mov	lr, ip
 800d702:	0c08      	lsrs	r0, r1, #16
 800d704:	fa1c fc81 	uxtah	ip, ip, r1
 800d708:	4471      	add	r1, lr
 800d70a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d70e:	b289      	uxth	r1, r1
 800d710:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d714:	f846 1b04 	str.w	r1, [r6], #4
 800d718:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d71c:	e7dd      	b.n	800d6da <__mdiff+0xd6>
 800d71e:	3f01      	subs	r7, #1
 800d720:	e7e7      	b.n	800d6f2 <__mdiff+0xee>
 800d722:	bf00      	nop
 800d724:	0800fffe 	.word	0x0800fffe
 800d728:	0801000f 	.word	0x0801000f

0800d72c <__d2b>:
 800d72c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d730:	460f      	mov	r7, r1
 800d732:	2101      	movs	r1, #1
 800d734:	ec59 8b10 	vmov	r8, r9, d0
 800d738:	4616      	mov	r6, r2
 800d73a:	f7ff fcd5 	bl	800d0e8 <_Balloc>
 800d73e:	4604      	mov	r4, r0
 800d740:	b930      	cbnz	r0, 800d750 <__d2b+0x24>
 800d742:	4602      	mov	r2, r0
 800d744:	4b23      	ldr	r3, [pc, #140]	@ (800d7d4 <__d2b+0xa8>)
 800d746:	4824      	ldr	r0, [pc, #144]	@ (800d7d8 <__d2b+0xac>)
 800d748:	f240 310f 	movw	r1, #783	@ 0x30f
 800d74c:	f000 ffcc 	bl	800e6e8 <__assert_func>
 800d750:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d758:	b10d      	cbz	r5, 800d75e <__d2b+0x32>
 800d75a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d75e:	9301      	str	r3, [sp, #4]
 800d760:	f1b8 0300 	subs.w	r3, r8, #0
 800d764:	d023      	beq.n	800d7ae <__d2b+0x82>
 800d766:	4668      	mov	r0, sp
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	f7ff fd84 	bl	800d276 <__lo0bits>
 800d76e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d772:	b1d0      	cbz	r0, 800d7aa <__d2b+0x7e>
 800d774:	f1c0 0320 	rsb	r3, r0, #32
 800d778:	fa02 f303 	lsl.w	r3, r2, r3
 800d77c:	430b      	orrs	r3, r1
 800d77e:	40c2      	lsrs	r2, r0
 800d780:	6163      	str	r3, [r4, #20]
 800d782:	9201      	str	r2, [sp, #4]
 800d784:	9b01      	ldr	r3, [sp, #4]
 800d786:	61a3      	str	r3, [r4, #24]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bf0c      	ite	eq
 800d78c:	2201      	moveq	r2, #1
 800d78e:	2202      	movne	r2, #2
 800d790:	6122      	str	r2, [r4, #16]
 800d792:	b1a5      	cbz	r5, 800d7be <__d2b+0x92>
 800d794:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d798:	4405      	add	r5, r0
 800d79a:	603d      	str	r5, [r7, #0]
 800d79c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d7a0:	6030      	str	r0, [r6, #0]
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	b003      	add	sp, #12
 800d7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7aa:	6161      	str	r1, [r4, #20]
 800d7ac:	e7ea      	b.n	800d784 <__d2b+0x58>
 800d7ae:	a801      	add	r0, sp, #4
 800d7b0:	f7ff fd61 	bl	800d276 <__lo0bits>
 800d7b4:	9b01      	ldr	r3, [sp, #4]
 800d7b6:	6163      	str	r3, [r4, #20]
 800d7b8:	3020      	adds	r0, #32
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	e7e8      	b.n	800d790 <__d2b+0x64>
 800d7be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d7c6:	6038      	str	r0, [r7, #0]
 800d7c8:	6918      	ldr	r0, [r3, #16]
 800d7ca:	f7ff fd35 	bl	800d238 <__hi0bits>
 800d7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7d2:	e7e5      	b.n	800d7a0 <__d2b+0x74>
 800d7d4:	0800fffe 	.word	0x0800fffe
 800d7d8:	0801000f 	.word	0x0801000f

0800d7dc <__ssputs_r>:
 800d7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e0:	688e      	ldr	r6, [r1, #8]
 800d7e2:	461f      	mov	r7, r3
 800d7e4:	42be      	cmp	r6, r7
 800d7e6:	680b      	ldr	r3, [r1, #0]
 800d7e8:	4682      	mov	sl, r0
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	4690      	mov	r8, r2
 800d7ee:	d82d      	bhi.n	800d84c <__ssputs_r+0x70>
 800d7f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d7f8:	d026      	beq.n	800d848 <__ssputs_r+0x6c>
 800d7fa:	6965      	ldr	r5, [r4, #20]
 800d7fc:	6909      	ldr	r1, [r1, #16]
 800d7fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d802:	eba3 0901 	sub.w	r9, r3, r1
 800d806:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d80a:	1c7b      	adds	r3, r7, #1
 800d80c:	444b      	add	r3, r9
 800d80e:	106d      	asrs	r5, r5, #1
 800d810:	429d      	cmp	r5, r3
 800d812:	bf38      	it	cc
 800d814:	461d      	movcc	r5, r3
 800d816:	0553      	lsls	r3, r2, #21
 800d818:	d527      	bpl.n	800d86a <__ssputs_r+0x8e>
 800d81a:	4629      	mov	r1, r5
 800d81c:	f7ff fbd8 	bl	800cfd0 <_malloc_r>
 800d820:	4606      	mov	r6, r0
 800d822:	b360      	cbz	r0, 800d87e <__ssputs_r+0xa2>
 800d824:	6921      	ldr	r1, [r4, #16]
 800d826:	464a      	mov	r2, r9
 800d828:	f7fe fcf5 	bl	800c216 <memcpy>
 800d82c:	89a3      	ldrh	r3, [r4, #12]
 800d82e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d836:	81a3      	strh	r3, [r4, #12]
 800d838:	6126      	str	r6, [r4, #16]
 800d83a:	6165      	str	r5, [r4, #20]
 800d83c:	444e      	add	r6, r9
 800d83e:	eba5 0509 	sub.w	r5, r5, r9
 800d842:	6026      	str	r6, [r4, #0]
 800d844:	60a5      	str	r5, [r4, #8]
 800d846:	463e      	mov	r6, r7
 800d848:	42be      	cmp	r6, r7
 800d84a:	d900      	bls.n	800d84e <__ssputs_r+0x72>
 800d84c:	463e      	mov	r6, r7
 800d84e:	6820      	ldr	r0, [r4, #0]
 800d850:	4632      	mov	r2, r6
 800d852:	4641      	mov	r1, r8
 800d854:	f000 fefb 	bl	800e64e <memmove>
 800d858:	68a3      	ldr	r3, [r4, #8]
 800d85a:	1b9b      	subs	r3, r3, r6
 800d85c:	60a3      	str	r3, [r4, #8]
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	4433      	add	r3, r6
 800d862:	6023      	str	r3, [r4, #0]
 800d864:	2000      	movs	r0, #0
 800d866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86a:	462a      	mov	r2, r5
 800d86c:	f000 ff80 	bl	800e770 <_realloc_r>
 800d870:	4606      	mov	r6, r0
 800d872:	2800      	cmp	r0, #0
 800d874:	d1e0      	bne.n	800d838 <__ssputs_r+0x5c>
 800d876:	6921      	ldr	r1, [r4, #16]
 800d878:	4650      	mov	r0, sl
 800d87a:	f7ff fb35 	bl	800cee8 <_free_r>
 800d87e:	230c      	movs	r3, #12
 800d880:	f8ca 3000 	str.w	r3, [sl]
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d88a:	81a3      	strh	r3, [r4, #12]
 800d88c:	f04f 30ff 	mov.w	r0, #4294967295
 800d890:	e7e9      	b.n	800d866 <__ssputs_r+0x8a>
	...

0800d894 <_svfiprintf_r>:
 800d894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d898:	4698      	mov	r8, r3
 800d89a:	898b      	ldrh	r3, [r1, #12]
 800d89c:	061b      	lsls	r3, r3, #24
 800d89e:	b09d      	sub	sp, #116	@ 0x74
 800d8a0:	4607      	mov	r7, r0
 800d8a2:	460d      	mov	r5, r1
 800d8a4:	4614      	mov	r4, r2
 800d8a6:	d510      	bpl.n	800d8ca <_svfiprintf_r+0x36>
 800d8a8:	690b      	ldr	r3, [r1, #16]
 800d8aa:	b973      	cbnz	r3, 800d8ca <_svfiprintf_r+0x36>
 800d8ac:	2140      	movs	r1, #64	@ 0x40
 800d8ae:	f7ff fb8f 	bl	800cfd0 <_malloc_r>
 800d8b2:	6028      	str	r0, [r5, #0]
 800d8b4:	6128      	str	r0, [r5, #16]
 800d8b6:	b930      	cbnz	r0, 800d8c6 <_svfiprintf_r+0x32>
 800d8b8:	230c      	movs	r3, #12
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	b01d      	add	sp, #116	@ 0x74
 800d8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c6:	2340      	movs	r3, #64	@ 0x40
 800d8c8:	616b      	str	r3, [r5, #20]
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8ce:	2320      	movs	r3, #32
 800d8d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8d8:	2330      	movs	r3, #48	@ 0x30
 800d8da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da78 <_svfiprintf_r+0x1e4>
 800d8de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8e2:	f04f 0901 	mov.w	r9, #1
 800d8e6:	4623      	mov	r3, r4
 800d8e8:	469a      	mov	sl, r3
 800d8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8ee:	b10a      	cbz	r2, 800d8f4 <_svfiprintf_r+0x60>
 800d8f0:	2a25      	cmp	r2, #37	@ 0x25
 800d8f2:	d1f9      	bne.n	800d8e8 <_svfiprintf_r+0x54>
 800d8f4:	ebba 0b04 	subs.w	fp, sl, r4
 800d8f8:	d00b      	beq.n	800d912 <_svfiprintf_r+0x7e>
 800d8fa:	465b      	mov	r3, fp
 800d8fc:	4622      	mov	r2, r4
 800d8fe:	4629      	mov	r1, r5
 800d900:	4638      	mov	r0, r7
 800d902:	f7ff ff6b 	bl	800d7dc <__ssputs_r>
 800d906:	3001      	adds	r0, #1
 800d908:	f000 80a7 	beq.w	800da5a <_svfiprintf_r+0x1c6>
 800d90c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d90e:	445a      	add	r2, fp
 800d910:	9209      	str	r2, [sp, #36]	@ 0x24
 800d912:	f89a 3000 	ldrb.w	r3, [sl]
 800d916:	2b00      	cmp	r3, #0
 800d918:	f000 809f 	beq.w	800da5a <_svfiprintf_r+0x1c6>
 800d91c:	2300      	movs	r3, #0
 800d91e:	f04f 32ff 	mov.w	r2, #4294967295
 800d922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d926:	f10a 0a01 	add.w	sl, sl, #1
 800d92a:	9304      	str	r3, [sp, #16]
 800d92c:	9307      	str	r3, [sp, #28]
 800d92e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d932:	931a      	str	r3, [sp, #104]	@ 0x68
 800d934:	4654      	mov	r4, sl
 800d936:	2205      	movs	r2, #5
 800d938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d93c:	484e      	ldr	r0, [pc, #312]	@ (800da78 <_svfiprintf_r+0x1e4>)
 800d93e:	f7f2 fc4f 	bl	80001e0 <memchr>
 800d942:	9a04      	ldr	r2, [sp, #16]
 800d944:	b9d8      	cbnz	r0, 800d97e <_svfiprintf_r+0xea>
 800d946:	06d0      	lsls	r0, r2, #27
 800d948:	bf44      	itt	mi
 800d94a:	2320      	movmi	r3, #32
 800d94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d950:	0711      	lsls	r1, r2, #28
 800d952:	bf44      	itt	mi
 800d954:	232b      	movmi	r3, #43	@ 0x2b
 800d956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d95a:	f89a 3000 	ldrb.w	r3, [sl]
 800d95e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d960:	d015      	beq.n	800d98e <_svfiprintf_r+0xfa>
 800d962:	9a07      	ldr	r2, [sp, #28]
 800d964:	4654      	mov	r4, sl
 800d966:	2000      	movs	r0, #0
 800d968:	f04f 0c0a 	mov.w	ip, #10
 800d96c:	4621      	mov	r1, r4
 800d96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d972:	3b30      	subs	r3, #48	@ 0x30
 800d974:	2b09      	cmp	r3, #9
 800d976:	d94b      	bls.n	800da10 <_svfiprintf_r+0x17c>
 800d978:	b1b0      	cbz	r0, 800d9a8 <_svfiprintf_r+0x114>
 800d97a:	9207      	str	r2, [sp, #28]
 800d97c:	e014      	b.n	800d9a8 <_svfiprintf_r+0x114>
 800d97e:	eba0 0308 	sub.w	r3, r0, r8
 800d982:	fa09 f303 	lsl.w	r3, r9, r3
 800d986:	4313      	orrs	r3, r2
 800d988:	9304      	str	r3, [sp, #16]
 800d98a:	46a2      	mov	sl, r4
 800d98c:	e7d2      	b.n	800d934 <_svfiprintf_r+0xa0>
 800d98e:	9b03      	ldr	r3, [sp, #12]
 800d990:	1d19      	adds	r1, r3, #4
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	9103      	str	r1, [sp, #12]
 800d996:	2b00      	cmp	r3, #0
 800d998:	bfbb      	ittet	lt
 800d99a:	425b      	neglt	r3, r3
 800d99c:	f042 0202 	orrlt.w	r2, r2, #2
 800d9a0:	9307      	strge	r3, [sp, #28]
 800d9a2:	9307      	strlt	r3, [sp, #28]
 800d9a4:	bfb8      	it	lt
 800d9a6:	9204      	strlt	r2, [sp, #16]
 800d9a8:	7823      	ldrb	r3, [r4, #0]
 800d9aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9ac:	d10a      	bne.n	800d9c4 <_svfiprintf_r+0x130>
 800d9ae:	7863      	ldrb	r3, [r4, #1]
 800d9b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9b2:	d132      	bne.n	800da1a <_svfiprintf_r+0x186>
 800d9b4:	9b03      	ldr	r3, [sp, #12]
 800d9b6:	1d1a      	adds	r2, r3, #4
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	9203      	str	r2, [sp, #12]
 800d9bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9c0:	3402      	adds	r4, #2
 800d9c2:	9305      	str	r3, [sp, #20]
 800d9c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da88 <_svfiprintf_r+0x1f4>
 800d9c8:	7821      	ldrb	r1, [r4, #0]
 800d9ca:	2203      	movs	r2, #3
 800d9cc:	4650      	mov	r0, sl
 800d9ce:	f7f2 fc07 	bl	80001e0 <memchr>
 800d9d2:	b138      	cbz	r0, 800d9e4 <_svfiprintf_r+0x150>
 800d9d4:	9b04      	ldr	r3, [sp, #16]
 800d9d6:	eba0 000a 	sub.w	r0, r0, sl
 800d9da:	2240      	movs	r2, #64	@ 0x40
 800d9dc:	4082      	lsls	r2, r0
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	3401      	adds	r4, #1
 800d9e2:	9304      	str	r3, [sp, #16]
 800d9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e8:	4824      	ldr	r0, [pc, #144]	@ (800da7c <_svfiprintf_r+0x1e8>)
 800d9ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9ee:	2206      	movs	r2, #6
 800d9f0:	f7f2 fbf6 	bl	80001e0 <memchr>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d036      	beq.n	800da66 <_svfiprintf_r+0x1d2>
 800d9f8:	4b21      	ldr	r3, [pc, #132]	@ (800da80 <_svfiprintf_r+0x1ec>)
 800d9fa:	bb1b      	cbnz	r3, 800da44 <_svfiprintf_r+0x1b0>
 800d9fc:	9b03      	ldr	r3, [sp, #12]
 800d9fe:	3307      	adds	r3, #7
 800da00:	f023 0307 	bic.w	r3, r3, #7
 800da04:	3308      	adds	r3, #8
 800da06:	9303      	str	r3, [sp, #12]
 800da08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da0a:	4433      	add	r3, r6
 800da0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da0e:	e76a      	b.n	800d8e6 <_svfiprintf_r+0x52>
 800da10:	fb0c 3202 	mla	r2, ip, r2, r3
 800da14:	460c      	mov	r4, r1
 800da16:	2001      	movs	r0, #1
 800da18:	e7a8      	b.n	800d96c <_svfiprintf_r+0xd8>
 800da1a:	2300      	movs	r3, #0
 800da1c:	3401      	adds	r4, #1
 800da1e:	9305      	str	r3, [sp, #20]
 800da20:	4619      	mov	r1, r3
 800da22:	f04f 0c0a 	mov.w	ip, #10
 800da26:	4620      	mov	r0, r4
 800da28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da2c:	3a30      	subs	r2, #48	@ 0x30
 800da2e:	2a09      	cmp	r2, #9
 800da30:	d903      	bls.n	800da3a <_svfiprintf_r+0x1a6>
 800da32:	2b00      	cmp	r3, #0
 800da34:	d0c6      	beq.n	800d9c4 <_svfiprintf_r+0x130>
 800da36:	9105      	str	r1, [sp, #20]
 800da38:	e7c4      	b.n	800d9c4 <_svfiprintf_r+0x130>
 800da3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800da3e:	4604      	mov	r4, r0
 800da40:	2301      	movs	r3, #1
 800da42:	e7f0      	b.n	800da26 <_svfiprintf_r+0x192>
 800da44:	ab03      	add	r3, sp, #12
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	462a      	mov	r2, r5
 800da4a:	4b0e      	ldr	r3, [pc, #56]	@ (800da84 <_svfiprintf_r+0x1f0>)
 800da4c:	a904      	add	r1, sp, #16
 800da4e:	4638      	mov	r0, r7
 800da50:	f7fd fcce 	bl	800b3f0 <_printf_float>
 800da54:	1c42      	adds	r2, r0, #1
 800da56:	4606      	mov	r6, r0
 800da58:	d1d6      	bne.n	800da08 <_svfiprintf_r+0x174>
 800da5a:	89ab      	ldrh	r3, [r5, #12]
 800da5c:	065b      	lsls	r3, r3, #25
 800da5e:	f53f af2d 	bmi.w	800d8bc <_svfiprintf_r+0x28>
 800da62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da64:	e72c      	b.n	800d8c0 <_svfiprintf_r+0x2c>
 800da66:	ab03      	add	r3, sp, #12
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	462a      	mov	r2, r5
 800da6c:	4b05      	ldr	r3, [pc, #20]	@ (800da84 <_svfiprintf_r+0x1f0>)
 800da6e:	a904      	add	r1, sp, #16
 800da70:	4638      	mov	r0, r7
 800da72:	f7fd ff55 	bl	800b920 <_printf_i>
 800da76:	e7ed      	b.n	800da54 <_svfiprintf_r+0x1c0>
 800da78:	08010068 	.word	0x08010068
 800da7c:	08010072 	.word	0x08010072
 800da80:	0800b3f1 	.word	0x0800b3f1
 800da84:	0800d7dd 	.word	0x0800d7dd
 800da88:	0801006e 	.word	0x0801006e

0800da8c <_sungetc_r>:
 800da8c:	b538      	push	{r3, r4, r5, lr}
 800da8e:	1c4b      	adds	r3, r1, #1
 800da90:	4614      	mov	r4, r2
 800da92:	d103      	bne.n	800da9c <_sungetc_r+0x10>
 800da94:	f04f 35ff 	mov.w	r5, #4294967295
 800da98:	4628      	mov	r0, r5
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
 800da9c:	8993      	ldrh	r3, [r2, #12]
 800da9e:	f023 0320 	bic.w	r3, r3, #32
 800daa2:	8193      	strh	r3, [r2, #12]
 800daa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800daa6:	6852      	ldr	r2, [r2, #4]
 800daa8:	b2cd      	uxtb	r5, r1
 800daaa:	b18b      	cbz	r3, 800dad0 <_sungetc_r+0x44>
 800daac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800daae:	4293      	cmp	r3, r2
 800dab0:	dd08      	ble.n	800dac4 <_sungetc_r+0x38>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	1e5a      	subs	r2, r3, #1
 800dab6:	6022      	str	r2, [r4, #0]
 800dab8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dabc:	6863      	ldr	r3, [r4, #4]
 800dabe:	3301      	adds	r3, #1
 800dac0:	6063      	str	r3, [r4, #4]
 800dac2:	e7e9      	b.n	800da98 <_sungetc_r+0xc>
 800dac4:	4621      	mov	r1, r4
 800dac6:	f000 fd88 	bl	800e5da <__submore>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d0f1      	beq.n	800dab2 <_sungetc_r+0x26>
 800dace:	e7e1      	b.n	800da94 <_sungetc_r+0x8>
 800dad0:	6921      	ldr	r1, [r4, #16]
 800dad2:	6823      	ldr	r3, [r4, #0]
 800dad4:	b151      	cbz	r1, 800daec <_sungetc_r+0x60>
 800dad6:	4299      	cmp	r1, r3
 800dad8:	d208      	bcs.n	800daec <_sungetc_r+0x60>
 800dada:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800dade:	42a9      	cmp	r1, r5
 800dae0:	d104      	bne.n	800daec <_sungetc_r+0x60>
 800dae2:	3b01      	subs	r3, #1
 800dae4:	3201      	adds	r2, #1
 800dae6:	6023      	str	r3, [r4, #0]
 800dae8:	6062      	str	r2, [r4, #4]
 800daea:	e7d5      	b.n	800da98 <_sungetc_r+0xc>
 800daec:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800daf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daf4:	6363      	str	r3, [r4, #52]	@ 0x34
 800daf6:	2303      	movs	r3, #3
 800daf8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dafa:	4623      	mov	r3, r4
 800dafc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	2301      	movs	r3, #1
 800db04:	e7dc      	b.n	800dac0 <_sungetc_r+0x34>

0800db06 <__ssrefill_r>:
 800db06:	b510      	push	{r4, lr}
 800db08:	460c      	mov	r4, r1
 800db0a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800db0c:	b169      	cbz	r1, 800db2a <__ssrefill_r+0x24>
 800db0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db12:	4299      	cmp	r1, r3
 800db14:	d001      	beq.n	800db1a <__ssrefill_r+0x14>
 800db16:	f7ff f9e7 	bl	800cee8 <_free_r>
 800db1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db1c:	6063      	str	r3, [r4, #4]
 800db1e:	2000      	movs	r0, #0
 800db20:	6360      	str	r0, [r4, #52]	@ 0x34
 800db22:	b113      	cbz	r3, 800db2a <__ssrefill_r+0x24>
 800db24:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800db26:	6023      	str	r3, [r4, #0]
 800db28:	bd10      	pop	{r4, pc}
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	2300      	movs	r3, #0
 800db30:	6063      	str	r3, [r4, #4]
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	f043 0320 	orr.w	r3, r3, #32
 800db38:	81a3      	strh	r3, [r4, #12]
 800db3a:	f04f 30ff 	mov.w	r0, #4294967295
 800db3e:	e7f3      	b.n	800db28 <__ssrefill_r+0x22>

0800db40 <__ssvfiscanf_r>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	460c      	mov	r4, r1
 800db46:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800db4a:	2100      	movs	r1, #0
 800db4c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800db50:	49a6      	ldr	r1, [pc, #664]	@ (800ddec <__ssvfiscanf_r+0x2ac>)
 800db52:	91a0      	str	r1, [sp, #640]	@ 0x280
 800db54:	f10d 0804 	add.w	r8, sp, #4
 800db58:	49a5      	ldr	r1, [pc, #660]	@ (800ddf0 <__ssvfiscanf_r+0x2b0>)
 800db5a:	4fa6      	ldr	r7, [pc, #664]	@ (800ddf4 <__ssvfiscanf_r+0x2b4>)
 800db5c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800db60:	4606      	mov	r6, r0
 800db62:	91a1      	str	r1, [sp, #644]	@ 0x284
 800db64:	9300      	str	r3, [sp, #0]
 800db66:	f892 9000 	ldrb.w	r9, [r2]
 800db6a:	f1b9 0f00 	cmp.w	r9, #0
 800db6e:	f000 8158 	beq.w	800de22 <__ssvfiscanf_r+0x2e2>
 800db72:	f817 3009 	ldrb.w	r3, [r7, r9]
 800db76:	f013 0308 	ands.w	r3, r3, #8
 800db7a:	f102 0501 	add.w	r5, r2, #1
 800db7e:	d019      	beq.n	800dbb4 <__ssvfiscanf_r+0x74>
 800db80:	6863      	ldr	r3, [r4, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	dd0f      	ble.n	800dba6 <__ssvfiscanf_r+0x66>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	781a      	ldrb	r2, [r3, #0]
 800db8a:	5cba      	ldrb	r2, [r7, r2]
 800db8c:	0712      	lsls	r2, r2, #28
 800db8e:	d401      	bmi.n	800db94 <__ssvfiscanf_r+0x54>
 800db90:	462a      	mov	r2, r5
 800db92:	e7e8      	b.n	800db66 <__ssvfiscanf_r+0x26>
 800db94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800db96:	3201      	adds	r2, #1
 800db98:	9245      	str	r2, [sp, #276]	@ 0x114
 800db9a:	6862      	ldr	r2, [r4, #4]
 800db9c:	3301      	adds	r3, #1
 800db9e:	3a01      	subs	r2, #1
 800dba0:	6062      	str	r2, [r4, #4]
 800dba2:	6023      	str	r3, [r4, #0]
 800dba4:	e7ec      	b.n	800db80 <__ssvfiscanf_r+0x40>
 800dba6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4630      	mov	r0, r6
 800dbac:	4798      	blx	r3
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d0e9      	beq.n	800db86 <__ssvfiscanf_r+0x46>
 800dbb2:	e7ed      	b.n	800db90 <__ssvfiscanf_r+0x50>
 800dbb4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800dbb8:	f040 8085 	bne.w	800dcc6 <__ssvfiscanf_r+0x186>
 800dbbc:	9341      	str	r3, [sp, #260]	@ 0x104
 800dbbe:	9343      	str	r3, [sp, #268]	@ 0x10c
 800dbc0:	7853      	ldrb	r3, [r2, #1]
 800dbc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbc4:	bf02      	ittt	eq
 800dbc6:	2310      	moveq	r3, #16
 800dbc8:	1c95      	addeq	r5, r2, #2
 800dbca:	9341      	streq	r3, [sp, #260]	@ 0x104
 800dbcc:	220a      	movs	r2, #10
 800dbce:	46aa      	mov	sl, r5
 800dbd0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800dbd4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800dbd8:	2b09      	cmp	r3, #9
 800dbda:	d91e      	bls.n	800dc1a <__ssvfiscanf_r+0xda>
 800dbdc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800ddf8 <__ssvfiscanf_r+0x2b8>
 800dbe0:	2203      	movs	r2, #3
 800dbe2:	4658      	mov	r0, fp
 800dbe4:	f7f2 fafc 	bl	80001e0 <memchr>
 800dbe8:	b138      	cbz	r0, 800dbfa <__ssvfiscanf_r+0xba>
 800dbea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dbec:	eba0 000b 	sub.w	r0, r0, fp
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	4083      	lsls	r3, r0
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	9341      	str	r3, [sp, #260]	@ 0x104
 800dbf8:	4655      	mov	r5, sl
 800dbfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dbfe:	2b78      	cmp	r3, #120	@ 0x78
 800dc00:	d806      	bhi.n	800dc10 <__ssvfiscanf_r+0xd0>
 800dc02:	2b57      	cmp	r3, #87	@ 0x57
 800dc04:	d810      	bhi.n	800dc28 <__ssvfiscanf_r+0xe8>
 800dc06:	2b25      	cmp	r3, #37	@ 0x25
 800dc08:	d05d      	beq.n	800dcc6 <__ssvfiscanf_r+0x186>
 800dc0a:	d857      	bhi.n	800dcbc <__ssvfiscanf_r+0x17c>
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d075      	beq.n	800dcfc <__ssvfiscanf_r+0x1bc>
 800dc10:	2303      	movs	r3, #3
 800dc12:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dc14:	230a      	movs	r3, #10
 800dc16:	9342      	str	r3, [sp, #264]	@ 0x108
 800dc18:	e088      	b.n	800dd2c <__ssvfiscanf_r+0x1ec>
 800dc1a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800dc1c:	fb02 1103 	mla	r1, r2, r3, r1
 800dc20:	3930      	subs	r1, #48	@ 0x30
 800dc22:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dc24:	4655      	mov	r5, sl
 800dc26:	e7d2      	b.n	800dbce <__ssvfiscanf_r+0x8e>
 800dc28:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800dc2c:	2a20      	cmp	r2, #32
 800dc2e:	d8ef      	bhi.n	800dc10 <__ssvfiscanf_r+0xd0>
 800dc30:	a101      	add	r1, pc, #4	@ (adr r1, 800dc38 <__ssvfiscanf_r+0xf8>)
 800dc32:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dc36:	bf00      	nop
 800dc38:	0800dd0b 	.word	0x0800dd0b
 800dc3c:	0800dc11 	.word	0x0800dc11
 800dc40:	0800dc11 	.word	0x0800dc11
 800dc44:	0800dd65 	.word	0x0800dd65
 800dc48:	0800dc11 	.word	0x0800dc11
 800dc4c:	0800dc11 	.word	0x0800dc11
 800dc50:	0800dc11 	.word	0x0800dc11
 800dc54:	0800dc11 	.word	0x0800dc11
 800dc58:	0800dc11 	.word	0x0800dc11
 800dc5c:	0800dc11 	.word	0x0800dc11
 800dc60:	0800dc11 	.word	0x0800dc11
 800dc64:	0800dd7b 	.word	0x0800dd7b
 800dc68:	0800dd61 	.word	0x0800dd61
 800dc6c:	0800dcc3 	.word	0x0800dcc3
 800dc70:	0800dcc3 	.word	0x0800dcc3
 800dc74:	0800dcc3 	.word	0x0800dcc3
 800dc78:	0800dc11 	.word	0x0800dc11
 800dc7c:	0800dd1d 	.word	0x0800dd1d
 800dc80:	0800dc11 	.word	0x0800dc11
 800dc84:	0800dc11 	.word	0x0800dc11
 800dc88:	0800dc11 	.word	0x0800dc11
 800dc8c:	0800dc11 	.word	0x0800dc11
 800dc90:	0800dd8b 	.word	0x0800dd8b
 800dc94:	0800dd25 	.word	0x0800dd25
 800dc98:	0800dd03 	.word	0x0800dd03
 800dc9c:	0800dc11 	.word	0x0800dc11
 800dca0:	0800dc11 	.word	0x0800dc11
 800dca4:	0800dd87 	.word	0x0800dd87
 800dca8:	0800dc11 	.word	0x0800dc11
 800dcac:	0800dd61 	.word	0x0800dd61
 800dcb0:	0800dc11 	.word	0x0800dc11
 800dcb4:	0800dc11 	.word	0x0800dc11
 800dcb8:	0800dd0b 	.word	0x0800dd0b
 800dcbc:	3b45      	subs	r3, #69	@ 0x45
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d8a6      	bhi.n	800dc10 <__ssvfiscanf_r+0xd0>
 800dcc2:	2305      	movs	r3, #5
 800dcc4:	e031      	b.n	800dd2a <__ssvfiscanf_r+0x1ea>
 800dcc6:	6863      	ldr	r3, [r4, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	dd0d      	ble.n	800dce8 <__ssvfiscanf_r+0x1a8>
 800dccc:	6823      	ldr	r3, [r4, #0]
 800dcce:	781a      	ldrb	r2, [r3, #0]
 800dcd0:	454a      	cmp	r2, r9
 800dcd2:	f040 80a6 	bne.w	800de22 <__ssvfiscanf_r+0x2e2>
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	6862      	ldr	r2, [r4, #4]
 800dcda:	6023      	str	r3, [r4, #0]
 800dcdc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800dcde:	3a01      	subs	r2, #1
 800dce0:	3301      	adds	r3, #1
 800dce2:	6062      	str	r2, [r4, #4]
 800dce4:	9345      	str	r3, [sp, #276]	@ 0x114
 800dce6:	e753      	b.n	800db90 <__ssvfiscanf_r+0x50>
 800dce8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dcea:	4621      	mov	r1, r4
 800dcec:	4630      	mov	r0, r6
 800dcee:	4798      	blx	r3
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d0eb      	beq.n	800dccc <__ssvfiscanf_r+0x18c>
 800dcf4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	f040 808b 	bne.w	800de12 <__ssvfiscanf_r+0x2d2>
 800dcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dd00:	e08b      	b.n	800de1a <__ssvfiscanf_r+0x2da>
 800dd02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dd04:	f042 0220 	orr.w	r2, r2, #32
 800dd08:	9241      	str	r2, [sp, #260]	@ 0x104
 800dd0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dd0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd10:	9241      	str	r2, [sp, #260]	@ 0x104
 800dd12:	2210      	movs	r2, #16
 800dd14:	2b6e      	cmp	r3, #110	@ 0x6e
 800dd16:	9242      	str	r2, [sp, #264]	@ 0x108
 800dd18:	d902      	bls.n	800dd20 <__ssvfiscanf_r+0x1e0>
 800dd1a:	e005      	b.n	800dd28 <__ssvfiscanf_r+0x1e8>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	9342      	str	r3, [sp, #264]	@ 0x108
 800dd20:	2303      	movs	r3, #3
 800dd22:	e002      	b.n	800dd2a <__ssvfiscanf_r+0x1ea>
 800dd24:	2308      	movs	r3, #8
 800dd26:	9342      	str	r3, [sp, #264]	@ 0x108
 800dd28:	2304      	movs	r3, #4
 800dd2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dd2c:	6863      	ldr	r3, [r4, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	dd39      	ble.n	800dda6 <__ssvfiscanf_r+0x266>
 800dd32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dd34:	0659      	lsls	r1, r3, #25
 800dd36:	d404      	bmi.n	800dd42 <__ssvfiscanf_r+0x202>
 800dd38:	6823      	ldr	r3, [r4, #0]
 800dd3a:	781a      	ldrb	r2, [r3, #0]
 800dd3c:	5cba      	ldrb	r2, [r7, r2]
 800dd3e:	0712      	lsls	r2, r2, #28
 800dd40:	d438      	bmi.n	800ddb4 <__ssvfiscanf_r+0x274>
 800dd42:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	dc47      	bgt.n	800ddd8 <__ssvfiscanf_r+0x298>
 800dd48:	466b      	mov	r3, sp
 800dd4a:	4622      	mov	r2, r4
 800dd4c:	a941      	add	r1, sp, #260	@ 0x104
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f000 f9ae 	bl	800e0b0 <_scanf_chars>
 800dd54:	2801      	cmp	r0, #1
 800dd56:	d064      	beq.n	800de22 <__ssvfiscanf_r+0x2e2>
 800dd58:	2802      	cmp	r0, #2
 800dd5a:	f47f af19 	bne.w	800db90 <__ssvfiscanf_r+0x50>
 800dd5e:	e7c9      	b.n	800dcf4 <__ssvfiscanf_r+0x1b4>
 800dd60:	220a      	movs	r2, #10
 800dd62:	e7d7      	b.n	800dd14 <__ssvfiscanf_r+0x1d4>
 800dd64:	4629      	mov	r1, r5
 800dd66:	4640      	mov	r0, r8
 800dd68:	f000 fbfe 	bl	800e568 <__sccl>
 800dd6c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dd6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd72:	9341      	str	r3, [sp, #260]	@ 0x104
 800dd74:	4605      	mov	r5, r0
 800dd76:	2301      	movs	r3, #1
 800dd78:	e7d7      	b.n	800dd2a <__ssvfiscanf_r+0x1ea>
 800dd7a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dd7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd80:	9341      	str	r3, [sp, #260]	@ 0x104
 800dd82:	2300      	movs	r3, #0
 800dd84:	e7d1      	b.n	800dd2a <__ssvfiscanf_r+0x1ea>
 800dd86:	2302      	movs	r3, #2
 800dd88:	e7cf      	b.n	800dd2a <__ssvfiscanf_r+0x1ea>
 800dd8a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800dd8c:	06c3      	lsls	r3, r0, #27
 800dd8e:	f53f aeff 	bmi.w	800db90 <__ssvfiscanf_r+0x50>
 800dd92:	9b00      	ldr	r3, [sp, #0]
 800dd94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dd96:	1d19      	adds	r1, r3, #4
 800dd98:	9100      	str	r1, [sp, #0]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	07c0      	lsls	r0, r0, #31
 800dd9e:	bf4c      	ite	mi
 800dda0:	801a      	strhmi	r2, [r3, #0]
 800dda2:	601a      	strpl	r2, [r3, #0]
 800dda4:	e6f4      	b.n	800db90 <__ssvfiscanf_r+0x50>
 800dda6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dda8:	4621      	mov	r1, r4
 800ddaa:	4630      	mov	r0, r6
 800ddac:	4798      	blx	r3
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d0bf      	beq.n	800dd32 <__ssvfiscanf_r+0x1f2>
 800ddb2:	e79f      	b.n	800dcf4 <__ssvfiscanf_r+0x1b4>
 800ddb4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ddb6:	3201      	adds	r2, #1
 800ddb8:	9245      	str	r2, [sp, #276]	@ 0x114
 800ddba:	6862      	ldr	r2, [r4, #4]
 800ddbc:	3a01      	subs	r2, #1
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	6062      	str	r2, [r4, #4]
 800ddc2:	dd02      	ble.n	800ddca <__ssvfiscanf_r+0x28a>
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	6023      	str	r3, [r4, #0]
 800ddc8:	e7b6      	b.n	800dd38 <__ssvfiscanf_r+0x1f8>
 800ddca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4630      	mov	r0, r6
 800ddd0:	4798      	blx	r3
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d0b0      	beq.n	800dd38 <__ssvfiscanf_r+0x1f8>
 800ddd6:	e78d      	b.n	800dcf4 <__ssvfiscanf_r+0x1b4>
 800ddd8:	2b04      	cmp	r3, #4
 800ddda:	dc0f      	bgt.n	800ddfc <__ssvfiscanf_r+0x2bc>
 800dddc:	466b      	mov	r3, sp
 800ddde:	4622      	mov	r2, r4
 800dde0:	a941      	add	r1, sp, #260	@ 0x104
 800dde2:	4630      	mov	r0, r6
 800dde4:	f000 f9be 	bl	800e164 <_scanf_i>
 800dde8:	e7b4      	b.n	800dd54 <__ssvfiscanf_r+0x214>
 800ddea:	bf00      	nop
 800ddec:	0800da8d 	.word	0x0800da8d
 800ddf0:	0800db07 	.word	0x0800db07
 800ddf4:	080101d9 	.word	0x080101d9
 800ddf8:	0801006e 	.word	0x0801006e
 800ddfc:	4b0a      	ldr	r3, [pc, #40]	@ (800de28 <__ssvfiscanf_r+0x2e8>)
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	f43f aec6 	beq.w	800db90 <__ssvfiscanf_r+0x50>
 800de04:	466b      	mov	r3, sp
 800de06:	4622      	mov	r2, r4
 800de08:	a941      	add	r1, sp, #260	@ 0x104
 800de0a:	4630      	mov	r0, r6
 800de0c:	f3af 8000 	nop.w
 800de10:	e7a0      	b.n	800dd54 <__ssvfiscanf_r+0x214>
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	065b      	lsls	r3, r3, #25
 800de16:	f53f af71 	bmi.w	800dcfc <__ssvfiscanf_r+0x1bc>
 800de1a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800de1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de22:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800de24:	e7f9      	b.n	800de1a <__ssvfiscanf_r+0x2da>
 800de26:	bf00      	nop
 800de28:	00000000 	.word	0x00000000

0800de2c <__sfputc_r>:
 800de2c:	6893      	ldr	r3, [r2, #8]
 800de2e:	3b01      	subs	r3, #1
 800de30:	2b00      	cmp	r3, #0
 800de32:	b410      	push	{r4}
 800de34:	6093      	str	r3, [r2, #8]
 800de36:	da08      	bge.n	800de4a <__sfputc_r+0x1e>
 800de38:	6994      	ldr	r4, [r2, #24]
 800de3a:	42a3      	cmp	r3, r4
 800de3c:	db01      	blt.n	800de42 <__sfputc_r+0x16>
 800de3e:	290a      	cmp	r1, #10
 800de40:	d103      	bne.n	800de4a <__sfputc_r+0x1e>
 800de42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de46:	f7fe b884 	b.w	800bf52 <__swbuf_r>
 800de4a:	6813      	ldr	r3, [r2, #0]
 800de4c:	1c58      	adds	r0, r3, #1
 800de4e:	6010      	str	r0, [r2, #0]
 800de50:	7019      	strb	r1, [r3, #0]
 800de52:	4608      	mov	r0, r1
 800de54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <__sfputs_r>:
 800de5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5c:	4606      	mov	r6, r0
 800de5e:	460f      	mov	r7, r1
 800de60:	4614      	mov	r4, r2
 800de62:	18d5      	adds	r5, r2, r3
 800de64:	42ac      	cmp	r4, r5
 800de66:	d101      	bne.n	800de6c <__sfputs_r+0x12>
 800de68:	2000      	movs	r0, #0
 800de6a:	e007      	b.n	800de7c <__sfputs_r+0x22>
 800de6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de70:	463a      	mov	r2, r7
 800de72:	4630      	mov	r0, r6
 800de74:	f7ff ffda 	bl	800de2c <__sfputc_r>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d1f3      	bne.n	800de64 <__sfputs_r+0xa>
 800de7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de80 <_vfiprintf_r>:
 800de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	460d      	mov	r5, r1
 800de86:	b09d      	sub	sp, #116	@ 0x74
 800de88:	4614      	mov	r4, r2
 800de8a:	4698      	mov	r8, r3
 800de8c:	4606      	mov	r6, r0
 800de8e:	b118      	cbz	r0, 800de98 <_vfiprintf_r+0x18>
 800de90:	6a03      	ldr	r3, [r0, #32]
 800de92:	b90b      	cbnz	r3, 800de98 <_vfiprintf_r+0x18>
 800de94:	f7fd feee 	bl	800bc74 <__sinit>
 800de98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de9a:	07d9      	lsls	r1, r3, #31
 800de9c:	d405      	bmi.n	800deaa <_vfiprintf_r+0x2a>
 800de9e:	89ab      	ldrh	r3, [r5, #12]
 800dea0:	059a      	lsls	r2, r3, #22
 800dea2:	d402      	bmi.n	800deaa <_vfiprintf_r+0x2a>
 800dea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dea6:	f7fe f9ac 	bl	800c202 <__retarget_lock_acquire_recursive>
 800deaa:	89ab      	ldrh	r3, [r5, #12]
 800deac:	071b      	lsls	r3, r3, #28
 800deae:	d501      	bpl.n	800deb4 <_vfiprintf_r+0x34>
 800deb0:	692b      	ldr	r3, [r5, #16]
 800deb2:	b99b      	cbnz	r3, 800dedc <_vfiprintf_r+0x5c>
 800deb4:	4629      	mov	r1, r5
 800deb6:	4630      	mov	r0, r6
 800deb8:	f7fe f88a 	bl	800bfd0 <__swsetup_r>
 800debc:	b170      	cbz	r0, 800dedc <_vfiprintf_r+0x5c>
 800debe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dec0:	07dc      	lsls	r4, r3, #31
 800dec2:	d504      	bpl.n	800dece <_vfiprintf_r+0x4e>
 800dec4:	f04f 30ff 	mov.w	r0, #4294967295
 800dec8:	b01d      	add	sp, #116	@ 0x74
 800deca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dece:	89ab      	ldrh	r3, [r5, #12]
 800ded0:	0598      	lsls	r0, r3, #22
 800ded2:	d4f7      	bmi.n	800dec4 <_vfiprintf_r+0x44>
 800ded4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ded6:	f7fe f995 	bl	800c204 <__retarget_lock_release_recursive>
 800deda:	e7f3      	b.n	800dec4 <_vfiprintf_r+0x44>
 800dedc:	2300      	movs	r3, #0
 800dede:	9309      	str	r3, [sp, #36]	@ 0x24
 800dee0:	2320      	movs	r3, #32
 800dee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dee6:	f8cd 800c 	str.w	r8, [sp, #12]
 800deea:	2330      	movs	r3, #48	@ 0x30
 800deec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e09c <_vfiprintf_r+0x21c>
 800def0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800def4:	f04f 0901 	mov.w	r9, #1
 800def8:	4623      	mov	r3, r4
 800defa:	469a      	mov	sl, r3
 800defc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df00:	b10a      	cbz	r2, 800df06 <_vfiprintf_r+0x86>
 800df02:	2a25      	cmp	r2, #37	@ 0x25
 800df04:	d1f9      	bne.n	800defa <_vfiprintf_r+0x7a>
 800df06:	ebba 0b04 	subs.w	fp, sl, r4
 800df0a:	d00b      	beq.n	800df24 <_vfiprintf_r+0xa4>
 800df0c:	465b      	mov	r3, fp
 800df0e:	4622      	mov	r2, r4
 800df10:	4629      	mov	r1, r5
 800df12:	4630      	mov	r0, r6
 800df14:	f7ff ffa1 	bl	800de5a <__sfputs_r>
 800df18:	3001      	adds	r0, #1
 800df1a:	f000 80a7 	beq.w	800e06c <_vfiprintf_r+0x1ec>
 800df1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df20:	445a      	add	r2, fp
 800df22:	9209      	str	r2, [sp, #36]	@ 0x24
 800df24:	f89a 3000 	ldrb.w	r3, [sl]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 809f 	beq.w	800e06c <_vfiprintf_r+0x1ec>
 800df2e:	2300      	movs	r3, #0
 800df30:	f04f 32ff 	mov.w	r2, #4294967295
 800df34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df38:	f10a 0a01 	add.w	sl, sl, #1
 800df3c:	9304      	str	r3, [sp, #16]
 800df3e:	9307      	str	r3, [sp, #28]
 800df40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df44:	931a      	str	r3, [sp, #104]	@ 0x68
 800df46:	4654      	mov	r4, sl
 800df48:	2205      	movs	r2, #5
 800df4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df4e:	4853      	ldr	r0, [pc, #332]	@ (800e09c <_vfiprintf_r+0x21c>)
 800df50:	f7f2 f946 	bl	80001e0 <memchr>
 800df54:	9a04      	ldr	r2, [sp, #16]
 800df56:	b9d8      	cbnz	r0, 800df90 <_vfiprintf_r+0x110>
 800df58:	06d1      	lsls	r1, r2, #27
 800df5a:	bf44      	itt	mi
 800df5c:	2320      	movmi	r3, #32
 800df5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df62:	0713      	lsls	r3, r2, #28
 800df64:	bf44      	itt	mi
 800df66:	232b      	movmi	r3, #43	@ 0x2b
 800df68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df6c:	f89a 3000 	ldrb.w	r3, [sl]
 800df70:	2b2a      	cmp	r3, #42	@ 0x2a
 800df72:	d015      	beq.n	800dfa0 <_vfiprintf_r+0x120>
 800df74:	9a07      	ldr	r2, [sp, #28]
 800df76:	4654      	mov	r4, sl
 800df78:	2000      	movs	r0, #0
 800df7a:	f04f 0c0a 	mov.w	ip, #10
 800df7e:	4621      	mov	r1, r4
 800df80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df84:	3b30      	subs	r3, #48	@ 0x30
 800df86:	2b09      	cmp	r3, #9
 800df88:	d94b      	bls.n	800e022 <_vfiprintf_r+0x1a2>
 800df8a:	b1b0      	cbz	r0, 800dfba <_vfiprintf_r+0x13a>
 800df8c:	9207      	str	r2, [sp, #28]
 800df8e:	e014      	b.n	800dfba <_vfiprintf_r+0x13a>
 800df90:	eba0 0308 	sub.w	r3, r0, r8
 800df94:	fa09 f303 	lsl.w	r3, r9, r3
 800df98:	4313      	orrs	r3, r2
 800df9a:	9304      	str	r3, [sp, #16]
 800df9c:	46a2      	mov	sl, r4
 800df9e:	e7d2      	b.n	800df46 <_vfiprintf_r+0xc6>
 800dfa0:	9b03      	ldr	r3, [sp, #12]
 800dfa2:	1d19      	adds	r1, r3, #4
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	9103      	str	r1, [sp, #12]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	bfbb      	ittet	lt
 800dfac:	425b      	neglt	r3, r3
 800dfae:	f042 0202 	orrlt.w	r2, r2, #2
 800dfb2:	9307      	strge	r3, [sp, #28]
 800dfb4:	9307      	strlt	r3, [sp, #28]
 800dfb6:	bfb8      	it	lt
 800dfb8:	9204      	strlt	r2, [sp, #16]
 800dfba:	7823      	ldrb	r3, [r4, #0]
 800dfbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfbe:	d10a      	bne.n	800dfd6 <_vfiprintf_r+0x156>
 800dfc0:	7863      	ldrb	r3, [r4, #1]
 800dfc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfc4:	d132      	bne.n	800e02c <_vfiprintf_r+0x1ac>
 800dfc6:	9b03      	ldr	r3, [sp, #12]
 800dfc8:	1d1a      	adds	r2, r3, #4
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	9203      	str	r2, [sp, #12]
 800dfce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfd2:	3402      	adds	r4, #2
 800dfd4:	9305      	str	r3, [sp, #20]
 800dfd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e0ac <_vfiprintf_r+0x22c>
 800dfda:	7821      	ldrb	r1, [r4, #0]
 800dfdc:	2203      	movs	r2, #3
 800dfde:	4650      	mov	r0, sl
 800dfe0:	f7f2 f8fe 	bl	80001e0 <memchr>
 800dfe4:	b138      	cbz	r0, 800dff6 <_vfiprintf_r+0x176>
 800dfe6:	9b04      	ldr	r3, [sp, #16]
 800dfe8:	eba0 000a 	sub.w	r0, r0, sl
 800dfec:	2240      	movs	r2, #64	@ 0x40
 800dfee:	4082      	lsls	r2, r0
 800dff0:	4313      	orrs	r3, r2
 800dff2:	3401      	adds	r4, #1
 800dff4:	9304      	str	r3, [sp, #16]
 800dff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dffa:	4829      	ldr	r0, [pc, #164]	@ (800e0a0 <_vfiprintf_r+0x220>)
 800dffc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e000:	2206      	movs	r2, #6
 800e002:	f7f2 f8ed 	bl	80001e0 <memchr>
 800e006:	2800      	cmp	r0, #0
 800e008:	d03f      	beq.n	800e08a <_vfiprintf_r+0x20a>
 800e00a:	4b26      	ldr	r3, [pc, #152]	@ (800e0a4 <_vfiprintf_r+0x224>)
 800e00c:	bb1b      	cbnz	r3, 800e056 <_vfiprintf_r+0x1d6>
 800e00e:	9b03      	ldr	r3, [sp, #12]
 800e010:	3307      	adds	r3, #7
 800e012:	f023 0307 	bic.w	r3, r3, #7
 800e016:	3308      	adds	r3, #8
 800e018:	9303      	str	r3, [sp, #12]
 800e01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e01c:	443b      	add	r3, r7
 800e01e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e020:	e76a      	b.n	800def8 <_vfiprintf_r+0x78>
 800e022:	fb0c 3202 	mla	r2, ip, r2, r3
 800e026:	460c      	mov	r4, r1
 800e028:	2001      	movs	r0, #1
 800e02a:	e7a8      	b.n	800df7e <_vfiprintf_r+0xfe>
 800e02c:	2300      	movs	r3, #0
 800e02e:	3401      	adds	r4, #1
 800e030:	9305      	str	r3, [sp, #20]
 800e032:	4619      	mov	r1, r3
 800e034:	f04f 0c0a 	mov.w	ip, #10
 800e038:	4620      	mov	r0, r4
 800e03a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e03e:	3a30      	subs	r2, #48	@ 0x30
 800e040:	2a09      	cmp	r2, #9
 800e042:	d903      	bls.n	800e04c <_vfiprintf_r+0x1cc>
 800e044:	2b00      	cmp	r3, #0
 800e046:	d0c6      	beq.n	800dfd6 <_vfiprintf_r+0x156>
 800e048:	9105      	str	r1, [sp, #20]
 800e04a:	e7c4      	b.n	800dfd6 <_vfiprintf_r+0x156>
 800e04c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e050:	4604      	mov	r4, r0
 800e052:	2301      	movs	r3, #1
 800e054:	e7f0      	b.n	800e038 <_vfiprintf_r+0x1b8>
 800e056:	ab03      	add	r3, sp, #12
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	462a      	mov	r2, r5
 800e05c:	4b12      	ldr	r3, [pc, #72]	@ (800e0a8 <_vfiprintf_r+0x228>)
 800e05e:	a904      	add	r1, sp, #16
 800e060:	4630      	mov	r0, r6
 800e062:	f7fd f9c5 	bl	800b3f0 <_printf_float>
 800e066:	4607      	mov	r7, r0
 800e068:	1c78      	adds	r0, r7, #1
 800e06a:	d1d6      	bne.n	800e01a <_vfiprintf_r+0x19a>
 800e06c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e06e:	07d9      	lsls	r1, r3, #31
 800e070:	d405      	bmi.n	800e07e <_vfiprintf_r+0x1fe>
 800e072:	89ab      	ldrh	r3, [r5, #12]
 800e074:	059a      	lsls	r2, r3, #22
 800e076:	d402      	bmi.n	800e07e <_vfiprintf_r+0x1fe>
 800e078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e07a:	f7fe f8c3 	bl	800c204 <__retarget_lock_release_recursive>
 800e07e:	89ab      	ldrh	r3, [r5, #12]
 800e080:	065b      	lsls	r3, r3, #25
 800e082:	f53f af1f 	bmi.w	800dec4 <_vfiprintf_r+0x44>
 800e086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e088:	e71e      	b.n	800dec8 <_vfiprintf_r+0x48>
 800e08a:	ab03      	add	r3, sp, #12
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	462a      	mov	r2, r5
 800e090:	4b05      	ldr	r3, [pc, #20]	@ (800e0a8 <_vfiprintf_r+0x228>)
 800e092:	a904      	add	r1, sp, #16
 800e094:	4630      	mov	r0, r6
 800e096:	f7fd fc43 	bl	800b920 <_printf_i>
 800e09a:	e7e4      	b.n	800e066 <_vfiprintf_r+0x1e6>
 800e09c:	08010068 	.word	0x08010068
 800e0a0:	08010072 	.word	0x08010072
 800e0a4:	0800b3f1 	.word	0x0800b3f1
 800e0a8:	0800de5b 	.word	0x0800de5b
 800e0ac:	0801006e 	.word	0x0801006e

0800e0b0 <_scanf_chars>:
 800e0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0b4:	4615      	mov	r5, r2
 800e0b6:	688a      	ldr	r2, [r1, #8]
 800e0b8:	4680      	mov	r8, r0
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	b932      	cbnz	r2, 800e0cc <_scanf_chars+0x1c>
 800e0be:	698a      	ldr	r2, [r1, #24]
 800e0c0:	2a00      	cmp	r2, #0
 800e0c2:	bf14      	ite	ne
 800e0c4:	f04f 32ff 	movne.w	r2, #4294967295
 800e0c8:	2201      	moveq	r2, #1
 800e0ca:	608a      	str	r2, [r1, #8]
 800e0cc:	6822      	ldr	r2, [r4, #0]
 800e0ce:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e160 <_scanf_chars+0xb0>
 800e0d2:	06d1      	lsls	r1, r2, #27
 800e0d4:	bf5f      	itttt	pl
 800e0d6:	681a      	ldrpl	r2, [r3, #0]
 800e0d8:	1d11      	addpl	r1, r2, #4
 800e0da:	6019      	strpl	r1, [r3, #0]
 800e0dc:	6816      	ldrpl	r6, [r2, #0]
 800e0de:	2700      	movs	r7, #0
 800e0e0:	69a0      	ldr	r0, [r4, #24]
 800e0e2:	b188      	cbz	r0, 800e108 <_scanf_chars+0x58>
 800e0e4:	2801      	cmp	r0, #1
 800e0e6:	d107      	bne.n	800e0f8 <_scanf_chars+0x48>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	781a      	ldrb	r2, [r3, #0]
 800e0ec:	6963      	ldr	r3, [r4, #20]
 800e0ee:	5c9b      	ldrb	r3, [r3, r2]
 800e0f0:	b953      	cbnz	r3, 800e108 <_scanf_chars+0x58>
 800e0f2:	2f00      	cmp	r7, #0
 800e0f4:	d031      	beq.n	800e15a <_scanf_chars+0xaa>
 800e0f6:	e022      	b.n	800e13e <_scanf_chars+0x8e>
 800e0f8:	2802      	cmp	r0, #2
 800e0fa:	d120      	bne.n	800e13e <_scanf_chars+0x8e>
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e104:	071b      	lsls	r3, r3, #28
 800e106:	d41a      	bmi.n	800e13e <_scanf_chars+0x8e>
 800e108:	6823      	ldr	r3, [r4, #0]
 800e10a:	06da      	lsls	r2, r3, #27
 800e10c:	bf5e      	ittt	pl
 800e10e:	682b      	ldrpl	r3, [r5, #0]
 800e110:	781b      	ldrbpl	r3, [r3, #0]
 800e112:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e116:	682a      	ldr	r2, [r5, #0]
 800e118:	686b      	ldr	r3, [r5, #4]
 800e11a:	3201      	adds	r2, #1
 800e11c:	602a      	str	r2, [r5, #0]
 800e11e:	68a2      	ldr	r2, [r4, #8]
 800e120:	3b01      	subs	r3, #1
 800e122:	3a01      	subs	r2, #1
 800e124:	606b      	str	r3, [r5, #4]
 800e126:	3701      	adds	r7, #1
 800e128:	60a2      	str	r2, [r4, #8]
 800e12a:	b142      	cbz	r2, 800e13e <_scanf_chars+0x8e>
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	dcd7      	bgt.n	800e0e0 <_scanf_chars+0x30>
 800e130:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e134:	4629      	mov	r1, r5
 800e136:	4640      	mov	r0, r8
 800e138:	4798      	blx	r3
 800e13a:	2800      	cmp	r0, #0
 800e13c:	d0d0      	beq.n	800e0e0 <_scanf_chars+0x30>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	f013 0310 	ands.w	r3, r3, #16
 800e144:	d105      	bne.n	800e152 <_scanf_chars+0xa2>
 800e146:	68e2      	ldr	r2, [r4, #12]
 800e148:	3201      	adds	r2, #1
 800e14a:	60e2      	str	r2, [r4, #12]
 800e14c:	69a2      	ldr	r2, [r4, #24]
 800e14e:	b102      	cbz	r2, 800e152 <_scanf_chars+0xa2>
 800e150:	7033      	strb	r3, [r6, #0]
 800e152:	6923      	ldr	r3, [r4, #16]
 800e154:	443b      	add	r3, r7
 800e156:	6123      	str	r3, [r4, #16]
 800e158:	2000      	movs	r0, #0
 800e15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e15e:	bf00      	nop
 800e160:	080101d9 	.word	0x080101d9

0800e164 <_scanf_i>:
 800e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e168:	4698      	mov	r8, r3
 800e16a:	4b74      	ldr	r3, [pc, #464]	@ (800e33c <_scanf_i+0x1d8>)
 800e16c:	460c      	mov	r4, r1
 800e16e:	4682      	mov	sl, r0
 800e170:	4616      	mov	r6, r2
 800e172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e176:	b087      	sub	sp, #28
 800e178:	ab03      	add	r3, sp, #12
 800e17a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e17e:	4b70      	ldr	r3, [pc, #448]	@ (800e340 <_scanf_i+0x1dc>)
 800e180:	69a1      	ldr	r1, [r4, #24]
 800e182:	4a70      	ldr	r2, [pc, #448]	@ (800e344 <_scanf_i+0x1e0>)
 800e184:	2903      	cmp	r1, #3
 800e186:	bf08      	it	eq
 800e188:	461a      	moveq	r2, r3
 800e18a:	68a3      	ldr	r3, [r4, #8]
 800e18c:	9201      	str	r2, [sp, #4]
 800e18e:	1e5a      	subs	r2, r3, #1
 800e190:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e194:	bf88      	it	hi
 800e196:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e19a:	4627      	mov	r7, r4
 800e19c:	bf82      	ittt	hi
 800e19e:	eb03 0905 	addhi.w	r9, r3, r5
 800e1a2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e1a6:	60a3      	strhi	r3, [r4, #8]
 800e1a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e1ac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e1b0:	bf98      	it	ls
 800e1b2:	f04f 0900 	movls.w	r9, #0
 800e1b6:	6023      	str	r3, [r4, #0]
 800e1b8:	463d      	mov	r5, r7
 800e1ba:	f04f 0b00 	mov.w	fp, #0
 800e1be:	6831      	ldr	r1, [r6, #0]
 800e1c0:	ab03      	add	r3, sp, #12
 800e1c2:	7809      	ldrb	r1, [r1, #0]
 800e1c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	f7f2 f809 	bl	80001e0 <memchr>
 800e1ce:	b328      	cbz	r0, 800e21c <_scanf_i+0xb8>
 800e1d0:	f1bb 0f01 	cmp.w	fp, #1
 800e1d4:	d159      	bne.n	800e28a <_scanf_i+0x126>
 800e1d6:	6862      	ldr	r2, [r4, #4]
 800e1d8:	b92a      	cbnz	r2, 800e1e6 <_scanf_i+0x82>
 800e1da:	6822      	ldr	r2, [r4, #0]
 800e1dc:	2108      	movs	r1, #8
 800e1de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e1e2:	6061      	str	r1, [r4, #4]
 800e1e4:	6022      	str	r2, [r4, #0]
 800e1e6:	6822      	ldr	r2, [r4, #0]
 800e1e8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e1ec:	6022      	str	r2, [r4, #0]
 800e1ee:	68a2      	ldr	r2, [r4, #8]
 800e1f0:	1e51      	subs	r1, r2, #1
 800e1f2:	60a1      	str	r1, [r4, #8]
 800e1f4:	b192      	cbz	r2, 800e21c <_scanf_i+0xb8>
 800e1f6:	6832      	ldr	r2, [r6, #0]
 800e1f8:	1c51      	adds	r1, r2, #1
 800e1fa:	6031      	str	r1, [r6, #0]
 800e1fc:	7812      	ldrb	r2, [r2, #0]
 800e1fe:	f805 2b01 	strb.w	r2, [r5], #1
 800e202:	6872      	ldr	r2, [r6, #4]
 800e204:	3a01      	subs	r2, #1
 800e206:	2a00      	cmp	r2, #0
 800e208:	6072      	str	r2, [r6, #4]
 800e20a:	dc07      	bgt.n	800e21c <_scanf_i+0xb8>
 800e20c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e210:	4631      	mov	r1, r6
 800e212:	4650      	mov	r0, sl
 800e214:	4790      	blx	r2
 800e216:	2800      	cmp	r0, #0
 800e218:	f040 8085 	bne.w	800e326 <_scanf_i+0x1c2>
 800e21c:	f10b 0b01 	add.w	fp, fp, #1
 800e220:	f1bb 0f03 	cmp.w	fp, #3
 800e224:	d1cb      	bne.n	800e1be <_scanf_i+0x5a>
 800e226:	6863      	ldr	r3, [r4, #4]
 800e228:	b90b      	cbnz	r3, 800e22e <_scanf_i+0xca>
 800e22a:	230a      	movs	r3, #10
 800e22c:	6063      	str	r3, [r4, #4]
 800e22e:	6863      	ldr	r3, [r4, #4]
 800e230:	4945      	ldr	r1, [pc, #276]	@ (800e348 <_scanf_i+0x1e4>)
 800e232:	6960      	ldr	r0, [r4, #20]
 800e234:	1ac9      	subs	r1, r1, r3
 800e236:	f000 f997 	bl	800e568 <__sccl>
 800e23a:	f04f 0b00 	mov.w	fp, #0
 800e23e:	68a3      	ldr	r3, [r4, #8]
 800e240:	6822      	ldr	r2, [r4, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d03d      	beq.n	800e2c2 <_scanf_i+0x15e>
 800e246:	6831      	ldr	r1, [r6, #0]
 800e248:	6960      	ldr	r0, [r4, #20]
 800e24a:	f891 c000 	ldrb.w	ip, [r1]
 800e24e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e252:	2800      	cmp	r0, #0
 800e254:	d035      	beq.n	800e2c2 <_scanf_i+0x15e>
 800e256:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e25a:	d124      	bne.n	800e2a6 <_scanf_i+0x142>
 800e25c:	0510      	lsls	r0, r2, #20
 800e25e:	d522      	bpl.n	800e2a6 <_scanf_i+0x142>
 800e260:	f10b 0b01 	add.w	fp, fp, #1
 800e264:	f1b9 0f00 	cmp.w	r9, #0
 800e268:	d003      	beq.n	800e272 <_scanf_i+0x10e>
 800e26a:	3301      	adds	r3, #1
 800e26c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e270:	60a3      	str	r3, [r4, #8]
 800e272:	6873      	ldr	r3, [r6, #4]
 800e274:	3b01      	subs	r3, #1
 800e276:	2b00      	cmp	r3, #0
 800e278:	6073      	str	r3, [r6, #4]
 800e27a:	dd1b      	ble.n	800e2b4 <_scanf_i+0x150>
 800e27c:	6833      	ldr	r3, [r6, #0]
 800e27e:	3301      	adds	r3, #1
 800e280:	6033      	str	r3, [r6, #0]
 800e282:	68a3      	ldr	r3, [r4, #8]
 800e284:	3b01      	subs	r3, #1
 800e286:	60a3      	str	r3, [r4, #8]
 800e288:	e7d9      	b.n	800e23e <_scanf_i+0xda>
 800e28a:	f1bb 0f02 	cmp.w	fp, #2
 800e28e:	d1ae      	bne.n	800e1ee <_scanf_i+0x8a>
 800e290:	6822      	ldr	r2, [r4, #0]
 800e292:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e296:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e29a:	d1c4      	bne.n	800e226 <_scanf_i+0xc2>
 800e29c:	2110      	movs	r1, #16
 800e29e:	6061      	str	r1, [r4, #4]
 800e2a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e2a4:	e7a2      	b.n	800e1ec <_scanf_i+0x88>
 800e2a6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e2aa:	6022      	str	r2, [r4, #0]
 800e2ac:	780b      	ldrb	r3, [r1, #0]
 800e2ae:	f805 3b01 	strb.w	r3, [r5], #1
 800e2b2:	e7de      	b.n	800e272 <_scanf_i+0x10e>
 800e2b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	4650      	mov	r0, sl
 800e2bc:	4798      	blx	r3
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	d0df      	beq.n	800e282 <_scanf_i+0x11e>
 800e2c2:	6823      	ldr	r3, [r4, #0]
 800e2c4:	05d9      	lsls	r1, r3, #23
 800e2c6:	d50d      	bpl.n	800e2e4 <_scanf_i+0x180>
 800e2c8:	42bd      	cmp	r5, r7
 800e2ca:	d909      	bls.n	800e2e0 <_scanf_i+0x17c>
 800e2cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e2d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e2d4:	4632      	mov	r2, r6
 800e2d6:	4650      	mov	r0, sl
 800e2d8:	4798      	blx	r3
 800e2da:	f105 39ff 	add.w	r9, r5, #4294967295
 800e2de:	464d      	mov	r5, r9
 800e2e0:	42bd      	cmp	r5, r7
 800e2e2:	d028      	beq.n	800e336 <_scanf_i+0x1d2>
 800e2e4:	6822      	ldr	r2, [r4, #0]
 800e2e6:	f012 0210 	ands.w	r2, r2, #16
 800e2ea:	d113      	bne.n	800e314 <_scanf_i+0x1b0>
 800e2ec:	702a      	strb	r2, [r5, #0]
 800e2ee:	6863      	ldr	r3, [r4, #4]
 800e2f0:	9e01      	ldr	r6, [sp, #4]
 800e2f2:	4639      	mov	r1, r7
 800e2f4:	4650      	mov	r0, sl
 800e2f6:	47b0      	blx	r6
 800e2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800e2fc:	6821      	ldr	r1, [r4, #0]
 800e2fe:	1d1a      	adds	r2, r3, #4
 800e300:	f8c8 2000 	str.w	r2, [r8]
 800e304:	f011 0f20 	tst.w	r1, #32
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	d00f      	beq.n	800e32c <_scanf_i+0x1c8>
 800e30c:	6018      	str	r0, [r3, #0]
 800e30e:	68e3      	ldr	r3, [r4, #12]
 800e310:	3301      	adds	r3, #1
 800e312:	60e3      	str	r3, [r4, #12]
 800e314:	6923      	ldr	r3, [r4, #16]
 800e316:	1bed      	subs	r5, r5, r7
 800e318:	445d      	add	r5, fp
 800e31a:	442b      	add	r3, r5
 800e31c:	6123      	str	r3, [r4, #16]
 800e31e:	2000      	movs	r0, #0
 800e320:	b007      	add	sp, #28
 800e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e326:	f04f 0b00 	mov.w	fp, #0
 800e32a:	e7ca      	b.n	800e2c2 <_scanf_i+0x15e>
 800e32c:	07ca      	lsls	r2, r1, #31
 800e32e:	bf4c      	ite	mi
 800e330:	8018      	strhmi	r0, [r3, #0]
 800e332:	6018      	strpl	r0, [r3, #0]
 800e334:	e7eb      	b.n	800e30e <_scanf_i+0x1aa>
 800e336:	2001      	movs	r0, #1
 800e338:	e7f2      	b.n	800e320 <_scanf_i+0x1bc>
 800e33a:	bf00      	nop
 800e33c:	0800ff0c 	.word	0x0800ff0c
 800e340:	0800e8c1 	.word	0x0800e8c1
 800e344:	0800e9a1 	.word	0x0800e9a1
 800e348:	08010089 	.word	0x08010089

0800e34c <__sflush_r>:
 800e34c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e354:	0716      	lsls	r6, r2, #28
 800e356:	4605      	mov	r5, r0
 800e358:	460c      	mov	r4, r1
 800e35a:	d454      	bmi.n	800e406 <__sflush_r+0xba>
 800e35c:	684b      	ldr	r3, [r1, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	dc02      	bgt.n	800e368 <__sflush_r+0x1c>
 800e362:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e364:	2b00      	cmp	r3, #0
 800e366:	dd48      	ble.n	800e3fa <__sflush_r+0xae>
 800e368:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e36a:	2e00      	cmp	r6, #0
 800e36c:	d045      	beq.n	800e3fa <__sflush_r+0xae>
 800e36e:	2300      	movs	r3, #0
 800e370:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e374:	682f      	ldr	r7, [r5, #0]
 800e376:	6a21      	ldr	r1, [r4, #32]
 800e378:	602b      	str	r3, [r5, #0]
 800e37a:	d030      	beq.n	800e3de <__sflush_r+0x92>
 800e37c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	0759      	lsls	r1, r3, #29
 800e382:	d505      	bpl.n	800e390 <__sflush_r+0x44>
 800e384:	6863      	ldr	r3, [r4, #4]
 800e386:	1ad2      	subs	r2, r2, r3
 800e388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e38a:	b10b      	cbz	r3, 800e390 <__sflush_r+0x44>
 800e38c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e38e:	1ad2      	subs	r2, r2, r3
 800e390:	2300      	movs	r3, #0
 800e392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e394:	6a21      	ldr	r1, [r4, #32]
 800e396:	4628      	mov	r0, r5
 800e398:	47b0      	blx	r6
 800e39a:	1c43      	adds	r3, r0, #1
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	d106      	bne.n	800e3ae <__sflush_r+0x62>
 800e3a0:	6829      	ldr	r1, [r5, #0]
 800e3a2:	291d      	cmp	r1, #29
 800e3a4:	d82b      	bhi.n	800e3fe <__sflush_r+0xb2>
 800e3a6:	4a2a      	ldr	r2, [pc, #168]	@ (800e450 <__sflush_r+0x104>)
 800e3a8:	40ca      	lsrs	r2, r1
 800e3aa:	07d6      	lsls	r6, r2, #31
 800e3ac:	d527      	bpl.n	800e3fe <__sflush_r+0xb2>
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	6062      	str	r2, [r4, #4]
 800e3b2:	04d9      	lsls	r1, r3, #19
 800e3b4:	6922      	ldr	r2, [r4, #16]
 800e3b6:	6022      	str	r2, [r4, #0]
 800e3b8:	d504      	bpl.n	800e3c4 <__sflush_r+0x78>
 800e3ba:	1c42      	adds	r2, r0, #1
 800e3bc:	d101      	bne.n	800e3c2 <__sflush_r+0x76>
 800e3be:	682b      	ldr	r3, [r5, #0]
 800e3c0:	b903      	cbnz	r3, 800e3c4 <__sflush_r+0x78>
 800e3c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3c6:	602f      	str	r7, [r5, #0]
 800e3c8:	b1b9      	cbz	r1, 800e3fa <__sflush_r+0xae>
 800e3ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3ce:	4299      	cmp	r1, r3
 800e3d0:	d002      	beq.n	800e3d8 <__sflush_r+0x8c>
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	f7fe fd88 	bl	800cee8 <_free_r>
 800e3d8:	2300      	movs	r3, #0
 800e3da:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3dc:	e00d      	b.n	800e3fa <__sflush_r+0xae>
 800e3de:	2301      	movs	r3, #1
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	47b0      	blx	r6
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	1c50      	adds	r0, r2, #1
 800e3e8:	d1c9      	bne.n	800e37e <__sflush_r+0x32>
 800e3ea:	682b      	ldr	r3, [r5, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d0c6      	beq.n	800e37e <__sflush_r+0x32>
 800e3f0:	2b1d      	cmp	r3, #29
 800e3f2:	d001      	beq.n	800e3f8 <__sflush_r+0xac>
 800e3f4:	2b16      	cmp	r3, #22
 800e3f6:	d11e      	bne.n	800e436 <__sflush_r+0xea>
 800e3f8:	602f      	str	r7, [r5, #0]
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	e022      	b.n	800e444 <__sflush_r+0xf8>
 800e3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e402:	b21b      	sxth	r3, r3
 800e404:	e01b      	b.n	800e43e <__sflush_r+0xf2>
 800e406:	690f      	ldr	r7, [r1, #16]
 800e408:	2f00      	cmp	r7, #0
 800e40a:	d0f6      	beq.n	800e3fa <__sflush_r+0xae>
 800e40c:	0793      	lsls	r3, r2, #30
 800e40e:	680e      	ldr	r6, [r1, #0]
 800e410:	bf08      	it	eq
 800e412:	694b      	ldreq	r3, [r1, #20]
 800e414:	600f      	str	r7, [r1, #0]
 800e416:	bf18      	it	ne
 800e418:	2300      	movne	r3, #0
 800e41a:	eba6 0807 	sub.w	r8, r6, r7
 800e41e:	608b      	str	r3, [r1, #8]
 800e420:	f1b8 0f00 	cmp.w	r8, #0
 800e424:	dde9      	ble.n	800e3fa <__sflush_r+0xae>
 800e426:	6a21      	ldr	r1, [r4, #32]
 800e428:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e42a:	4643      	mov	r3, r8
 800e42c:	463a      	mov	r2, r7
 800e42e:	4628      	mov	r0, r5
 800e430:	47b0      	blx	r6
 800e432:	2800      	cmp	r0, #0
 800e434:	dc08      	bgt.n	800e448 <__sflush_r+0xfc>
 800e436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e43e:	81a3      	strh	r3, [r4, #12]
 800e440:	f04f 30ff 	mov.w	r0, #4294967295
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e448:	4407      	add	r7, r0
 800e44a:	eba8 0800 	sub.w	r8, r8, r0
 800e44e:	e7e7      	b.n	800e420 <__sflush_r+0xd4>
 800e450:	20400001 	.word	0x20400001

0800e454 <_fflush_r>:
 800e454:	b538      	push	{r3, r4, r5, lr}
 800e456:	690b      	ldr	r3, [r1, #16]
 800e458:	4605      	mov	r5, r0
 800e45a:	460c      	mov	r4, r1
 800e45c:	b913      	cbnz	r3, 800e464 <_fflush_r+0x10>
 800e45e:	2500      	movs	r5, #0
 800e460:	4628      	mov	r0, r5
 800e462:	bd38      	pop	{r3, r4, r5, pc}
 800e464:	b118      	cbz	r0, 800e46e <_fflush_r+0x1a>
 800e466:	6a03      	ldr	r3, [r0, #32]
 800e468:	b90b      	cbnz	r3, 800e46e <_fflush_r+0x1a>
 800e46a:	f7fd fc03 	bl	800bc74 <__sinit>
 800e46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d0f3      	beq.n	800e45e <_fflush_r+0xa>
 800e476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e478:	07d0      	lsls	r0, r2, #31
 800e47a:	d404      	bmi.n	800e486 <_fflush_r+0x32>
 800e47c:	0599      	lsls	r1, r3, #22
 800e47e:	d402      	bmi.n	800e486 <_fflush_r+0x32>
 800e480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e482:	f7fd febe 	bl	800c202 <__retarget_lock_acquire_recursive>
 800e486:	4628      	mov	r0, r5
 800e488:	4621      	mov	r1, r4
 800e48a:	f7ff ff5f 	bl	800e34c <__sflush_r>
 800e48e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e490:	07da      	lsls	r2, r3, #31
 800e492:	4605      	mov	r5, r0
 800e494:	d4e4      	bmi.n	800e460 <_fflush_r+0xc>
 800e496:	89a3      	ldrh	r3, [r4, #12]
 800e498:	059b      	lsls	r3, r3, #22
 800e49a:	d4e1      	bmi.n	800e460 <_fflush_r+0xc>
 800e49c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e49e:	f7fd feb1 	bl	800c204 <__retarget_lock_release_recursive>
 800e4a2:	e7dd      	b.n	800e460 <_fflush_r+0xc>

0800e4a4 <__swhatbuf_r>:
 800e4a4:	b570      	push	{r4, r5, r6, lr}
 800e4a6:	460c      	mov	r4, r1
 800e4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4ac:	2900      	cmp	r1, #0
 800e4ae:	b096      	sub	sp, #88	@ 0x58
 800e4b0:	4615      	mov	r5, r2
 800e4b2:	461e      	mov	r6, r3
 800e4b4:	da0d      	bge.n	800e4d2 <__swhatbuf_r+0x2e>
 800e4b6:	89a3      	ldrh	r3, [r4, #12]
 800e4b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e4bc:	f04f 0100 	mov.w	r1, #0
 800e4c0:	bf14      	ite	ne
 800e4c2:	2340      	movne	r3, #64	@ 0x40
 800e4c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	6031      	str	r1, [r6, #0]
 800e4cc:	602b      	str	r3, [r5, #0]
 800e4ce:	b016      	add	sp, #88	@ 0x58
 800e4d0:	bd70      	pop	{r4, r5, r6, pc}
 800e4d2:	466a      	mov	r2, sp
 800e4d4:	f000 f8d6 	bl	800e684 <_fstat_r>
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	dbec      	blt.n	800e4b6 <__swhatbuf_r+0x12>
 800e4dc:	9901      	ldr	r1, [sp, #4]
 800e4de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4e6:	4259      	negs	r1, r3
 800e4e8:	4159      	adcs	r1, r3
 800e4ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4ee:	e7eb      	b.n	800e4c8 <__swhatbuf_r+0x24>

0800e4f0 <__smakebuf_r>:
 800e4f0:	898b      	ldrh	r3, [r1, #12]
 800e4f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4f4:	079d      	lsls	r5, r3, #30
 800e4f6:	4606      	mov	r6, r0
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	d507      	bpl.n	800e50c <__smakebuf_r+0x1c>
 800e4fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e500:	6023      	str	r3, [r4, #0]
 800e502:	6123      	str	r3, [r4, #16]
 800e504:	2301      	movs	r3, #1
 800e506:	6163      	str	r3, [r4, #20]
 800e508:	b003      	add	sp, #12
 800e50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e50c:	ab01      	add	r3, sp, #4
 800e50e:	466a      	mov	r2, sp
 800e510:	f7ff ffc8 	bl	800e4a4 <__swhatbuf_r>
 800e514:	9f00      	ldr	r7, [sp, #0]
 800e516:	4605      	mov	r5, r0
 800e518:	4639      	mov	r1, r7
 800e51a:	4630      	mov	r0, r6
 800e51c:	f7fe fd58 	bl	800cfd0 <_malloc_r>
 800e520:	b948      	cbnz	r0, 800e536 <__smakebuf_r+0x46>
 800e522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e526:	059a      	lsls	r2, r3, #22
 800e528:	d4ee      	bmi.n	800e508 <__smakebuf_r+0x18>
 800e52a:	f023 0303 	bic.w	r3, r3, #3
 800e52e:	f043 0302 	orr.w	r3, r3, #2
 800e532:	81a3      	strh	r3, [r4, #12]
 800e534:	e7e2      	b.n	800e4fc <__smakebuf_r+0xc>
 800e536:	89a3      	ldrh	r3, [r4, #12]
 800e538:	6020      	str	r0, [r4, #0]
 800e53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e53e:	81a3      	strh	r3, [r4, #12]
 800e540:	9b01      	ldr	r3, [sp, #4]
 800e542:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e546:	b15b      	cbz	r3, 800e560 <__smakebuf_r+0x70>
 800e548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e54c:	4630      	mov	r0, r6
 800e54e:	f000 f8ab 	bl	800e6a8 <_isatty_r>
 800e552:	b128      	cbz	r0, 800e560 <__smakebuf_r+0x70>
 800e554:	89a3      	ldrh	r3, [r4, #12]
 800e556:	f023 0303 	bic.w	r3, r3, #3
 800e55a:	f043 0301 	orr.w	r3, r3, #1
 800e55e:	81a3      	strh	r3, [r4, #12]
 800e560:	89a3      	ldrh	r3, [r4, #12]
 800e562:	431d      	orrs	r5, r3
 800e564:	81a5      	strh	r5, [r4, #12]
 800e566:	e7cf      	b.n	800e508 <__smakebuf_r+0x18>

0800e568 <__sccl>:
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	780b      	ldrb	r3, [r1, #0]
 800e56c:	4604      	mov	r4, r0
 800e56e:	2b5e      	cmp	r3, #94	@ 0x5e
 800e570:	bf0b      	itete	eq
 800e572:	784b      	ldrbeq	r3, [r1, #1]
 800e574:	1c4a      	addne	r2, r1, #1
 800e576:	1c8a      	addeq	r2, r1, #2
 800e578:	2100      	movne	r1, #0
 800e57a:	bf08      	it	eq
 800e57c:	2101      	moveq	r1, #1
 800e57e:	3801      	subs	r0, #1
 800e580:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e584:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e588:	42a8      	cmp	r0, r5
 800e58a:	d1fb      	bne.n	800e584 <__sccl+0x1c>
 800e58c:	b90b      	cbnz	r3, 800e592 <__sccl+0x2a>
 800e58e:	1e50      	subs	r0, r2, #1
 800e590:	bd70      	pop	{r4, r5, r6, pc}
 800e592:	f081 0101 	eor.w	r1, r1, #1
 800e596:	54e1      	strb	r1, [r4, r3]
 800e598:	4610      	mov	r0, r2
 800e59a:	4602      	mov	r2, r0
 800e59c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e5a0:	2d2d      	cmp	r5, #45	@ 0x2d
 800e5a2:	d005      	beq.n	800e5b0 <__sccl+0x48>
 800e5a4:	2d5d      	cmp	r5, #93	@ 0x5d
 800e5a6:	d016      	beq.n	800e5d6 <__sccl+0x6e>
 800e5a8:	2d00      	cmp	r5, #0
 800e5aa:	d0f1      	beq.n	800e590 <__sccl+0x28>
 800e5ac:	462b      	mov	r3, r5
 800e5ae:	e7f2      	b.n	800e596 <__sccl+0x2e>
 800e5b0:	7846      	ldrb	r6, [r0, #1]
 800e5b2:	2e5d      	cmp	r6, #93	@ 0x5d
 800e5b4:	d0fa      	beq.n	800e5ac <__sccl+0x44>
 800e5b6:	42b3      	cmp	r3, r6
 800e5b8:	dcf8      	bgt.n	800e5ac <__sccl+0x44>
 800e5ba:	3002      	adds	r0, #2
 800e5bc:	461a      	mov	r2, r3
 800e5be:	3201      	adds	r2, #1
 800e5c0:	4296      	cmp	r6, r2
 800e5c2:	54a1      	strb	r1, [r4, r2]
 800e5c4:	dcfb      	bgt.n	800e5be <__sccl+0x56>
 800e5c6:	1af2      	subs	r2, r6, r3
 800e5c8:	3a01      	subs	r2, #1
 800e5ca:	1c5d      	adds	r5, r3, #1
 800e5cc:	42b3      	cmp	r3, r6
 800e5ce:	bfa8      	it	ge
 800e5d0:	2200      	movge	r2, #0
 800e5d2:	18ab      	adds	r3, r5, r2
 800e5d4:	e7e1      	b.n	800e59a <__sccl+0x32>
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	e7da      	b.n	800e590 <__sccl+0x28>

0800e5da <__submore>:
 800e5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5de:	460c      	mov	r4, r1
 800e5e0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e5e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5e6:	4299      	cmp	r1, r3
 800e5e8:	d11d      	bne.n	800e626 <__submore+0x4c>
 800e5ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e5ee:	f7fe fcef 	bl	800cfd0 <_malloc_r>
 800e5f2:	b918      	cbnz	r0, 800e5fc <__submore+0x22>
 800e5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e600:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e602:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e606:	6360      	str	r0, [r4, #52]	@ 0x34
 800e608:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e60c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e610:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e614:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e618:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e61c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e620:	6020      	str	r0, [r4, #0]
 800e622:	2000      	movs	r0, #0
 800e624:	e7e8      	b.n	800e5f8 <__submore+0x1e>
 800e626:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e628:	0077      	lsls	r7, r6, #1
 800e62a:	463a      	mov	r2, r7
 800e62c:	f000 f8a0 	bl	800e770 <_realloc_r>
 800e630:	4605      	mov	r5, r0
 800e632:	2800      	cmp	r0, #0
 800e634:	d0de      	beq.n	800e5f4 <__submore+0x1a>
 800e636:	eb00 0806 	add.w	r8, r0, r6
 800e63a:	4601      	mov	r1, r0
 800e63c:	4632      	mov	r2, r6
 800e63e:	4640      	mov	r0, r8
 800e640:	f7fd fde9 	bl	800c216 <memcpy>
 800e644:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e648:	f8c4 8000 	str.w	r8, [r4]
 800e64c:	e7e9      	b.n	800e622 <__submore+0x48>

0800e64e <memmove>:
 800e64e:	4288      	cmp	r0, r1
 800e650:	b510      	push	{r4, lr}
 800e652:	eb01 0402 	add.w	r4, r1, r2
 800e656:	d902      	bls.n	800e65e <memmove+0x10>
 800e658:	4284      	cmp	r4, r0
 800e65a:	4623      	mov	r3, r4
 800e65c:	d807      	bhi.n	800e66e <memmove+0x20>
 800e65e:	1e43      	subs	r3, r0, #1
 800e660:	42a1      	cmp	r1, r4
 800e662:	d008      	beq.n	800e676 <memmove+0x28>
 800e664:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e668:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e66c:	e7f8      	b.n	800e660 <memmove+0x12>
 800e66e:	4402      	add	r2, r0
 800e670:	4601      	mov	r1, r0
 800e672:	428a      	cmp	r2, r1
 800e674:	d100      	bne.n	800e678 <memmove+0x2a>
 800e676:	bd10      	pop	{r4, pc}
 800e678:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e67c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e680:	e7f7      	b.n	800e672 <memmove+0x24>
	...

0800e684 <_fstat_r>:
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	4d07      	ldr	r5, [pc, #28]	@ (800e6a4 <_fstat_r+0x20>)
 800e688:	2300      	movs	r3, #0
 800e68a:	4604      	mov	r4, r0
 800e68c:	4608      	mov	r0, r1
 800e68e:	4611      	mov	r1, r2
 800e690:	602b      	str	r3, [r5, #0]
 800e692:	f7f6 f9d5 	bl	8004a40 <_fstat>
 800e696:	1c43      	adds	r3, r0, #1
 800e698:	d102      	bne.n	800e6a0 <_fstat_r+0x1c>
 800e69a:	682b      	ldr	r3, [r5, #0]
 800e69c:	b103      	cbz	r3, 800e6a0 <_fstat_r+0x1c>
 800e69e:	6023      	str	r3, [r4, #0]
 800e6a0:	bd38      	pop	{r3, r4, r5, pc}
 800e6a2:	bf00      	nop
 800e6a4:	20002b0c 	.word	0x20002b0c

0800e6a8 <_isatty_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4d06      	ldr	r5, [pc, #24]	@ (800e6c4 <_isatty_r+0x1c>)
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	4608      	mov	r0, r1
 800e6b2:	602b      	str	r3, [r5, #0]
 800e6b4:	f7f6 f9d4 	bl	8004a60 <_isatty>
 800e6b8:	1c43      	adds	r3, r0, #1
 800e6ba:	d102      	bne.n	800e6c2 <_isatty_r+0x1a>
 800e6bc:	682b      	ldr	r3, [r5, #0]
 800e6be:	b103      	cbz	r3, 800e6c2 <_isatty_r+0x1a>
 800e6c0:	6023      	str	r3, [r4, #0]
 800e6c2:	bd38      	pop	{r3, r4, r5, pc}
 800e6c4:	20002b0c 	.word	0x20002b0c

0800e6c8 <_sbrk_r>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	4d06      	ldr	r5, [pc, #24]	@ (800e6e4 <_sbrk_r+0x1c>)
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	4608      	mov	r0, r1
 800e6d2:	602b      	str	r3, [r5, #0]
 800e6d4:	f7f6 f9dc 	bl	8004a90 <_sbrk>
 800e6d8:	1c43      	adds	r3, r0, #1
 800e6da:	d102      	bne.n	800e6e2 <_sbrk_r+0x1a>
 800e6dc:	682b      	ldr	r3, [r5, #0]
 800e6de:	b103      	cbz	r3, 800e6e2 <_sbrk_r+0x1a>
 800e6e0:	6023      	str	r3, [r4, #0]
 800e6e2:	bd38      	pop	{r3, r4, r5, pc}
 800e6e4:	20002b0c 	.word	0x20002b0c

0800e6e8 <__assert_func>:
 800e6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6ea:	4614      	mov	r4, r2
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	4b09      	ldr	r3, [pc, #36]	@ (800e714 <__assert_func+0x2c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4605      	mov	r5, r0
 800e6f4:	68d8      	ldr	r0, [r3, #12]
 800e6f6:	b14c      	cbz	r4, 800e70c <__assert_func+0x24>
 800e6f8:	4b07      	ldr	r3, [pc, #28]	@ (800e718 <__assert_func+0x30>)
 800e6fa:	9100      	str	r1, [sp, #0]
 800e6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e700:	4906      	ldr	r1, [pc, #24]	@ (800e71c <__assert_func+0x34>)
 800e702:	462b      	mov	r3, r5
 800e704:	f000 f95c 	bl	800e9c0 <fiprintf>
 800e708:	f000 f96c 	bl	800e9e4 <abort>
 800e70c:	4b04      	ldr	r3, [pc, #16]	@ (800e720 <__assert_func+0x38>)
 800e70e:	461c      	mov	r4, r3
 800e710:	e7f3      	b.n	800e6fa <__assert_func+0x12>
 800e712:	bf00      	nop
 800e714:	200024b8 	.word	0x200024b8
 800e718:	0801009e 	.word	0x0801009e
 800e71c:	080100ab 	.word	0x080100ab
 800e720:	080100d9 	.word	0x080100d9

0800e724 <_calloc_r>:
 800e724:	b570      	push	{r4, r5, r6, lr}
 800e726:	fba1 5402 	umull	r5, r4, r1, r2
 800e72a:	b934      	cbnz	r4, 800e73a <_calloc_r+0x16>
 800e72c:	4629      	mov	r1, r5
 800e72e:	f7fe fc4f 	bl	800cfd0 <_malloc_r>
 800e732:	4606      	mov	r6, r0
 800e734:	b928      	cbnz	r0, 800e742 <_calloc_r+0x1e>
 800e736:	4630      	mov	r0, r6
 800e738:	bd70      	pop	{r4, r5, r6, pc}
 800e73a:	220c      	movs	r2, #12
 800e73c:	6002      	str	r2, [r0, #0]
 800e73e:	2600      	movs	r6, #0
 800e740:	e7f9      	b.n	800e736 <_calloc_r+0x12>
 800e742:	462a      	mov	r2, r5
 800e744:	4621      	mov	r1, r4
 800e746:	f7fd fc99 	bl	800c07c <memset>
 800e74a:	e7f4      	b.n	800e736 <_calloc_r+0x12>

0800e74c <__ascii_mbtowc>:
 800e74c:	b082      	sub	sp, #8
 800e74e:	b901      	cbnz	r1, 800e752 <__ascii_mbtowc+0x6>
 800e750:	a901      	add	r1, sp, #4
 800e752:	b142      	cbz	r2, 800e766 <__ascii_mbtowc+0x1a>
 800e754:	b14b      	cbz	r3, 800e76a <__ascii_mbtowc+0x1e>
 800e756:	7813      	ldrb	r3, [r2, #0]
 800e758:	600b      	str	r3, [r1, #0]
 800e75a:	7812      	ldrb	r2, [r2, #0]
 800e75c:	1e10      	subs	r0, r2, #0
 800e75e:	bf18      	it	ne
 800e760:	2001      	movne	r0, #1
 800e762:	b002      	add	sp, #8
 800e764:	4770      	bx	lr
 800e766:	4610      	mov	r0, r2
 800e768:	e7fb      	b.n	800e762 <__ascii_mbtowc+0x16>
 800e76a:	f06f 0001 	mvn.w	r0, #1
 800e76e:	e7f8      	b.n	800e762 <__ascii_mbtowc+0x16>

0800e770 <_realloc_r>:
 800e770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e774:	4607      	mov	r7, r0
 800e776:	4614      	mov	r4, r2
 800e778:	460d      	mov	r5, r1
 800e77a:	b921      	cbnz	r1, 800e786 <_realloc_r+0x16>
 800e77c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e780:	4611      	mov	r1, r2
 800e782:	f7fe bc25 	b.w	800cfd0 <_malloc_r>
 800e786:	b92a      	cbnz	r2, 800e794 <_realloc_r+0x24>
 800e788:	f7fe fbae 	bl	800cee8 <_free_r>
 800e78c:	4625      	mov	r5, r4
 800e78e:	4628      	mov	r0, r5
 800e790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e794:	f000 f92d 	bl	800e9f2 <_malloc_usable_size_r>
 800e798:	4284      	cmp	r4, r0
 800e79a:	4606      	mov	r6, r0
 800e79c:	d802      	bhi.n	800e7a4 <_realloc_r+0x34>
 800e79e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7a2:	d8f4      	bhi.n	800e78e <_realloc_r+0x1e>
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	f7fe fc12 	bl	800cfd0 <_malloc_r>
 800e7ac:	4680      	mov	r8, r0
 800e7ae:	b908      	cbnz	r0, 800e7b4 <_realloc_r+0x44>
 800e7b0:	4645      	mov	r5, r8
 800e7b2:	e7ec      	b.n	800e78e <_realloc_r+0x1e>
 800e7b4:	42b4      	cmp	r4, r6
 800e7b6:	4622      	mov	r2, r4
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	bf28      	it	cs
 800e7bc:	4632      	movcs	r2, r6
 800e7be:	f7fd fd2a 	bl	800c216 <memcpy>
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	4638      	mov	r0, r7
 800e7c6:	f7fe fb8f 	bl	800cee8 <_free_r>
 800e7ca:	e7f1      	b.n	800e7b0 <_realloc_r+0x40>

0800e7cc <_strtol_l.isra.0>:
 800e7cc:	2b24      	cmp	r3, #36	@ 0x24
 800e7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d2:	4686      	mov	lr, r0
 800e7d4:	4690      	mov	r8, r2
 800e7d6:	d801      	bhi.n	800e7dc <_strtol_l.isra.0+0x10>
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d106      	bne.n	800e7ea <_strtol_l.isra.0+0x1e>
 800e7dc:	f7fd fce6 	bl	800c1ac <__errno>
 800e7e0:	2316      	movs	r3, #22
 800e7e2:	6003      	str	r3, [r0, #0]
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ea:	4834      	ldr	r0, [pc, #208]	@ (800e8bc <_strtol_l.isra.0+0xf0>)
 800e7ec:	460d      	mov	r5, r1
 800e7ee:	462a      	mov	r2, r5
 800e7f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7f4:	5d06      	ldrb	r6, [r0, r4]
 800e7f6:	f016 0608 	ands.w	r6, r6, #8
 800e7fa:	d1f8      	bne.n	800e7ee <_strtol_l.isra.0+0x22>
 800e7fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e7fe:	d110      	bne.n	800e822 <_strtol_l.isra.0+0x56>
 800e800:	782c      	ldrb	r4, [r5, #0]
 800e802:	2601      	movs	r6, #1
 800e804:	1c95      	adds	r5, r2, #2
 800e806:	f033 0210 	bics.w	r2, r3, #16
 800e80a:	d115      	bne.n	800e838 <_strtol_l.isra.0+0x6c>
 800e80c:	2c30      	cmp	r4, #48	@ 0x30
 800e80e:	d10d      	bne.n	800e82c <_strtol_l.isra.0+0x60>
 800e810:	782a      	ldrb	r2, [r5, #0]
 800e812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e816:	2a58      	cmp	r2, #88	@ 0x58
 800e818:	d108      	bne.n	800e82c <_strtol_l.isra.0+0x60>
 800e81a:	786c      	ldrb	r4, [r5, #1]
 800e81c:	3502      	adds	r5, #2
 800e81e:	2310      	movs	r3, #16
 800e820:	e00a      	b.n	800e838 <_strtol_l.isra.0+0x6c>
 800e822:	2c2b      	cmp	r4, #43	@ 0x2b
 800e824:	bf04      	itt	eq
 800e826:	782c      	ldrbeq	r4, [r5, #0]
 800e828:	1c95      	addeq	r5, r2, #2
 800e82a:	e7ec      	b.n	800e806 <_strtol_l.isra.0+0x3a>
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1f6      	bne.n	800e81e <_strtol_l.isra.0+0x52>
 800e830:	2c30      	cmp	r4, #48	@ 0x30
 800e832:	bf14      	ite	ne
 800e834:	230a      	movne	r3, #10
 800e836:	2308      	moveq	r3, #8
 800e838:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e83c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e840:	2200      	movs	r2, #0
 800e842:	fbbc f9f3 	udiv	r9, ip, r3
 800e846:	4610      	mov	r0, r2
 800e848:	fb03 ca19 	mls	sl, r3, r9, ip
 800e84c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e850:	2f09      	cmp	r7, #9
 800e852:	d80f      	bhi.n	800e874 <_strtol_l.isra.0+0xa8>
 800e854:	463c      	mov	r4, r7
 800e856:	42a3      	cmp	r3, r4
 800e858:	dd1b      	ble.n	800e892 <_strtol_l.isra.0+0xc6>
 800e85a:	1c57      	adds	r7, r2, #1
 800e85c:	d007      	beq.n	800e86e <_strtol_l.isra.0+0xa2>
 800e85e:	4581      	cmp	r9, r0
 800e860:	d314      	bcc.n	800e88c <_strtol_l.isra.0+0xc0>
 800e862:	d101      	bne.n	800e868 <_strtol_l.isra.0+0x9c>
 800e864:	45a2      	cmp	sl, r4
 800e866:	db11      	blt.n	800e88c <_strtol_l.isra.0+0xc0>
 800e868:	fb00 4003 	mla	r0, r0, r3, r4
 800e86c:	2201      	movs	r2, #1
 800e86e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e872:	e7eb      	b.n	800e84c <_strtol_l.isra.0+0x80>
 800e874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e878:	2f19      	cmp	r7, #25
 800e87a:	d801      	bhi.n	800e880 <_strtol_l.isra.0+0xb4>
 800e87c:	3c37      	subs	r4, #55	@ 0x37
 800e87e:	e7ea      	b.n	800e856 <_strtol_l.isra.0+0x8a>
 800e880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e884:	2f19      	cmp	r7, #25
 800e886:	d804      	bhi.n	800e892 <_strtol_l.isra.0+0xc6>
 800e888:	3c57      	subs	r4, #87	@ 0x57
 800e88a:	e7e4      	b.n	800e856 <_strtol_l.isra.0+0x8a>
 800e88c:	f04f 32ff 	mov.w	r2, #4294967295
 800e890:	e7ed      	b.n	800e86e <_strtol_l.isra.0+0xa2>
 800e892:	1c53      	adds	r3, r2, #1
 800e894:	d108      	bne.n	800e8a8 <_strtol_l.isra.0+0xdc>
 800e896:	2322      	movs	r3, #34	@ 0x22
 800e898:	f8ce 3000 	str.w	r3, [lr]
 800e89c:	4660      	mov	r0, ip
 800e89e:	f1b8 0f00 	cmp.w	r8, #0
 800e8a2:	d0a0      	beq.n	800e7e6 <_strtol_l.isra.0+0x1a>
 800e8a4:	1e69      	subs	r1, r5, #1
 800e8a6:	e006      	b.n	800e8b6 <_strtol_l.isra.0+0xea>
 800e8a8:	b106      	cbz	r6, 800e8ac <_strtol_l.isra.0+0xe0>
 800e8aa:	4240      	negs	r0, r0
 800e8ac:	f1b8 0f00 	cmp.w	r8, #0
 800e8b0:	d099      	beq.n	800e7e6 <_strtol_l.isra.0+0x1a>
 800e8b2:	2a00      	cmp	r2, #0
 800e8b4:	d1f6      	bne.n	800e8a4 <_strtol_l.isra.0+0xd8>
 800e8b6:	f8c8 1000 	str.w	r1, [r8]
 800e8ba:	e794      	b.n	800e7e6 <_strtol_l.isra.0+0x1a>
 800e8bc:	080101d9 	.word	0x080101d9

0800e8c0 <_strtol_r>:
 800e8c0:	f7ff bf84 	b.w	800e7cc <_strtol_l.isra.0>

0800e8c4 <_strtoul_l.isra.0>:
 800e8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8c8:	4e34      	ldr	r6, [pc, #208]	@ (800e99c <_strtoul_l.isra.0+0xd8>)
 800e8ca:	4686      	mov	lr, r0
 800e8cc:	460d      	mov	r5, r1
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8d4:	5d37      	ldrb	r7, [r6, r4]
 800e8d6:	f017 0708 	ands.w	r7, r7, #8
 800e8da:	d1f8      	bne.n	800e8ce <_strtoul_l.isra.0+0xa>
 800e8dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e8de:	d110      	bne.n	800e902 <_strtoul_l.isra.0+0x3e>
 800e8e0:	782c      	ldrb	r4, [r5, #0]
 800e8e2:	2701      	movs	r7, #1
 800e8e4:	1c85      	adds	r5, r0, #2
 800e8e6:	f033 0010 	bics.w	r0, r3, #16
 800e8ea:	d115      	bne.n	800e918 <_strtoul_l.isra.0+0x54>
 800e8ec:	2c30      	cmp	r4, #48	@ 0x30
 800e8ee:	d10d      	bne.n	800e90c <_strtoul_l.isra.0+0x48>
 800e8f0:	7828      	ldrb	r0, [r5, #0]
 800e8f2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e8f6:	2858      	cmp	r0, #88	@ 0x58
 800e8f8:	d108      	bne.n	800e90c <_strtoul_l.isra.0+0x48>
 800e8fa:	786c      	ldrb	r4, [r5, #1]
 800e8fc:	3502      	adds	r5, #2
 800e8fe:	2310      	movs	r3, #16
 800e900:	e00a      	b.n	800e918 <_strtoul_l.isra.0+0x54>
 800e902:	2c2b      	cmp	r4, #43	@ 0x2b
 800e904:	bf04      	itt	eq
 800e906:	782c      	ldrbeq	r4, [r5, #0]
 800e908:	1c85      	addeq	r5, r0, #2
 800e90a:	e7ec      	b.n	800e8e6 <_strtoul_l.isra.0+0x22>
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1f6      	bne.n	800e8fe <_strtoul_l.isra.0+0x3a>
 800e910:	2c30      	cmp	r4, #48	@ 0x30
 800e912:	bf14      	ite	ne
 800e914:	230a      	movne	r3, #10
 800e916:	2308      	moveq	r3, #8
 800e918:	f04f 38ff 	mov.w	r8, #4294967295
 800e91c:	2600      	movs	r6, #0
 800e91e:	fbb8 f8f3 	udiv	r8, r8, r3
 800e922:	fb03 f908 	mul.w	r9, r3, r8
 800e926:	ea6f 0909 	mvn.w	r9, r9
 800e92a:	4630      	mov	r0, r6
 800e92c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e930:	f1bc 0f09 	cmp.w	ip, #9
 800e934:	d810      	bhi.n	800e958 <_strtoul_l.isra.0+0x94>
 800e936:	4664      	mov	r4, ip
 800e938:	42a3      	cmp	r3, r4
 800e93a:	dd1e      	ble.n	800e97a <_strtoul_l.isra.0+0xb6>
 800e93c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e940:	d007      	beq.n	800e952 <_strtoul_l.isra.0+0x8e>
 800e942:	4580      	cmp	r8, r0
 800e944:	d316      	bcc.n	800e974 <_strtoul_l.isra.0+0xb0>
 800e946:	d101      	bne.n	800e94c <_strtoul_l.isra.0+0x88>
 800e948:	45a1      	cmp	r9, r4
 800e94a:	db13      	blt.n	800e974 <_strtoul_l.isra.0+0xb0>
 800e94c:	fb00 4003 	mla	r0, r0, r3, r4
 800e950:	2601      	movs	r6, #1
 800e952:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e956:	e7e9      	b.n	800e92c <_strtoul_l.isra.0+0x68>
 800e958:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e95c:	f1bc 0f19 	cmp.w	ip, #25
 800e960:	d801      	bhi.n	800e966 <_strtoul_l.isra.0+0xa2>
 800e962:	3c37      	subs	r4, #55	@ 0x37
 800e964:	e7e8      	b.n	800e938 <_strtoul_l.isra.0+0x74>
 800e966:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e96a:	f1bc 0f19 	cmp.w	ip, #25
 800e96e:	d804      	bhi.n	800e97a <_strtoul_l.isra.0+0xb6>
 800e970:	3c57      	subs	r4, #87	@ 0x57
 800e972:	e7e1      	b.n	800e938 <_strtoul_l.isra.0+0x74>
 800e974:	f04f 36ff 	mov.w	r6, #4294967295
 800e978:	e7eb      	b.n	800e952 <_strtoul_l.isra.0+0x8e>
 800e97a:	1c73      	adds	r3, r6, #1
 800e97c:	d106      	bne.n	800e98c <_strtoul_l.isra.0+0xc8>
 800e97e:	2322      	movs	r3, #34	@ 0x22
 800e980:	f8ce 3000 	str.w	r3, [lr]
 800e984:	4630      	mov	r0, r6
 800e986:	b932      	cbnz	r2, 800e996 <_strtoul_l.isra.0+0xd2>
 800e988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e98c:	b107      	cbz	r7, 800e990 <_strtoul_l.isra.0+0xcc>
 800e98e:	4240      	negs	r0, r0
 800e990:	2a00      	cmp	r2, #0
 800e992:	d0f9      	beq.n	800e988 <_strtoul_l.isra.0+0xc4>
 800e994:	b106      	cbz	r6, 800e998 <_strtoul_l.isra.0+0xd4>
 800e996:	1e69      	subs	r1, r5, #1
 800e998:	6011      	str	r1, [r2, #0]
 800e99a:	e7f5      	b.n	800e988 <_strtoul_l.isra.0+0xc4>
 800e99c:	080101d9 	.word	0x080101d9

0800e9a0 <_strtoul_r>:
 800e9a0:	f7ff bf90 	b.w	800e8c4 <_strtoul_l.isra.0>

0800e9a4 <__ascii_wctomb>:
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	4608      	mov	r0, r1
 800e9a8:	b141      	cbz	r1, 800e9bc <__ascii_wctomb+0x18>
 800e9aa:	2aff      	cmp	r2, #255	@ 0xff
 800e9ac:	d904      	bls.n	800e9b8 <__ascii_wctomb+0x14>
 800e9ae:	228a      	movs	r2, #138	@ 0x8a
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b6:	4770      	bx	lr
 800e9b8:	700a      	strb	r2, [r1, #0]
 800e9ba:	2001      	movs	r0, #1
 800e9bc:	4770      	bx	lr
	...

0800e9c0 <fiprintf>:
 800e9c0:	b40e      	push	{r1, r2, r3}
 800e9c2:	b503      	push	{r0, r1, lr}
 800e9c4:	4601      	mov	r1, r0
 800e9c6:	ab03      	add	r3, sp, #12
 800e9c8:	4805      	ldr	r0, [pc, #20]	@ (800e9e0 <fiprintf+0x20>)
 800e9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ce:	6800      	ldr	r0, [r0, #0]
 800e9d0:	9301      	str	r3, [sp, #4]
 800e9d2:	f7ff fa55 	bl	800de80 <_vfiprintf_r>
 800e9d6:	b002      	add	sp, #8
 800e9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9dc:	b003      	add	sp, #12
 800e9de:	4770      	bx	lr
 800e9e0:	200024b8 	.word	0x200024b8

0800e9e4 <abort>:
 800e9e4:	b508      	push	{r3, lr}
 800e9e6:	2006      	movs	r0, #6
 800e9e8:	f000 f834 	bl	800ea54 <raise>
 800e9ec:	2001      	movs	r0, #1
 800e9ee:	f7f5 fff3 	bl	80049d8 <_exit>

0800e9f2 <_malloc_usable_size_r>:
 800e9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9f6:	1f18      	subs	r0, r3, #4
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	bfbc      	itt	lt
 800e9fc:	580b      	ldrlt	r3, [r1, r0]
 800e9fe:	18c0      	addlt	r0, r0, r3
 800ea00:	4770      	bx	lr

0800ea02 <_raise_r>:
 800ea02:	291f      	cmp	r1, #31
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	4605      	mov	r5, r0
 800ea08:	460c      	mov	r4, r1
 800ea0a:	d904      	bls.n	800ea16 <_raise_r+0x14>
 800ea0c:	2316      	movs	r3, #22
 800ea0e:	6003      	str	r3, [r0, #0]
 800ea10:	f04f 30ff 	mov.w	r0, #4294967295
 800ea14:	bd38      	pop	{r3, r4, r5, pc}
 800ea16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ea18:	b112      	cbz	r2, 800ea20 <_raise_r+0x1e>
 800ea1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea1e:	b94b      	cbnz	r3, 800ea34 <_raise_r+0x32>
 800ea20:	4628      	mov	r0, r5
 800ea22:	f000 f831 	bl	800ea88 <_getpid_r>
 800ea26:	4622      	mov	r2, r4
 800ea28:	4601      	mov	r1, r0
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea30:	f000 b818 	b.w	800ea64 <_kill_r>
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d00a      	beq.n	800ea4e <_raise_r+0x4c>
 800ea38:	1c59      	adds	r1, r3, #1
 800ea3a:	d103      	bne.n	800ea44 <_raise_r+0x42>
 800ea3c:	2316      	movs	r3, #22
 800ea3e:	6003      	str	r3, [r0, #0]
 800ea40:	2001      	movs	r0, #1
 800ea42:	e7e7      	b.n	800ea14 <_raise_r+0x12>
 800ea44:	2100      	movs	r1, #0
 800ea46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	4798      	blx	r3
 800ea4e:	2000      	movs	r0, #0
 800ea50:	e7e0      	b.n	800ea14 <_raise_r+0x12>
	...

0800ea54 <raise>:
 800ea54:	4b02      	ldr	r3, [pc, #8]	@ (800ea60 <raise+0xc>)
 800ea56:	4601      	mov	r1, r0
 800ea58:	6818      	ldr	r0, [r3, #0]
 800ea5a:	f7ff bfd2 	b.w	800ea02 <_raise_r>
 800ea5e:	bf00      	nop
 800ea60:	200024b8 	.word	0x200024b8

0800ea64 <_kill_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	@ (800ea84 <_kill_r+0x20>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	4611      	mov	r1, r2
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	f7f5 ffa1 	bl	80049b8 <_kill>
 800ea76:	1c43      	adds	r3, r0, #1
 800ea78:	d102      	bne.n	800ea80 <_kill_r+0x1c>
 800ea7a:	682b      	ldr	r3, [r5, #0]
 800ea7c:	b103      	cbz	r3, 800ea80 <_kill_r+0x1c>
 800ea7e:	6023      	str	r3, [r4, #0]
 800ea80:	bd38      	pop	{r3, r4, r5, pc}
 800ea82:	bf00      	nop
 800ea84:	20002b0c 	.word	0x20002b0c

0800ea88 <_getpid_r>:
 800ea88:	f7f5 bf8e 	b.w	80049a8 <_getpid>

0800ea8c <atan2f>:
 800ea8c:	f000 b800 	b.w	800ea90 <__ieee754_atan2f>

0800ea90 <__ieee754_atan2f>:
 800ea90:	ee10 2a90 	vmov	r2, s1
 800ea94:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ea98:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ea9c:	b510      	push	{r4, lr}
 800ea9e:	eef0 7a40 	vmov.f32	s15, s0
 800eaa2:	d806      	bhi.n	800eab2 <__ieee754_atan2f+0x22>
 800eaa4:	ee10 0a10 	vmov	r0, s0
 800eaa8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800eaac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eab0:	d904      	bls.n	800eabc <__ieee754_atan2f+0x2c>
 800eab2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800eab6:	eeb0 0a67 	vmov.f32	s0, s15
 800eaba:	bd10      	pop	{r4, pc}
 800eabc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800eac0:	d103      	bne.n	800eaca <__ieee754_atan2f+0x3a>
 800eac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eac6:	f000 b883 	b.w	800ebd0 <atanf>
 800eaca:	1794      	asrs	r4, r2, #30
 800eacc:	f004 0402 	and.w	r4, r4, #2
 800ead0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ead4:	b943      	cbnz	r3, 800eae8 <__ieee754_atan2f+0x58>
 800ead6:	2c02      	cmp	r4, #2
 800ead8:	d05e      	beq.n	800eb98 <__ieee754_atan2f+0x108>
 800eada:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ebac <__ieee754_atan2f+0x11c>
 800eade:	2c03      	cmp	r4, #3
 800eae0:	bf08      	it	eq
 800eae2:	eef0 7a47 	vmoveq.f32	s15, s14
 800eae6:	e7e6      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800eae8:	b941      	cbnz	r1, 800eafc <__ieee754_atan2f+0x6c>
 800eaea:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ebb0 <__ieee754_atan2f+0x120>
 800eaee:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ebb4 <__ieee754_atan2f+0x124>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	bfa8      	it	ge
 800eaf6:	eef0 7a47 	vmovge.f32	s15, s14
 800eafa:	e7dc      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800eafc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800eb00:	d110      	bne.n	800eb24 <__ieee754_atan2f+0x94>
 800eb02:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eb06:	f104 34ff 	add.w	r4, r4, #4294967295
 800eb0a:	d107      	bne.n	800eb1c <__ieee754_atan2f+0x8c>
 800eb0c:	2c02      	cmp	r4, #2
 800eb0e:	d846      	bhi.n	800eb9e <__ieee754_atan2f+0x10e>
 800eb10:	4b29      	ldr	r3, [pc, #164]	@ (800ebb8 <__ieee754_atan2f+0x128>)
 800eb12:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eb16:	edd3 7a00 	vldr	s15, [r3]
 800eb1a:	e7cc      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800eb1c:	2c02      	cmp	r4, #2
 800eb1e:	d841      	bhi.n	800eba4 <__ieee754_atan2f+0x114>
 800eb20:	4b26      	ldr	r3, [pc, #152]	@ (800ebbc <__ieee754_atan2f+0x12c>)
 800eb22:	e7f6      	b.n	800eb12 <__ieee754_atan2f+0x82>
 800eb24:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eb28:	d0df      	beq.n	800eaea <__ieee754_atan2f+0x5a>
 800eb2a:	1a5b      	subs	r3, r3, r1
 800eb2c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800eb30:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800eb34:	da1a      	bge.n	800eb6c <__ieee754_atan2f+0xdc>
 800eb36:	2a00      	cmp	r2, #0
 800eb38:	da01      	bge.n	800eb3e <__ieee754_atan2f+0xae>
 800eb3a:	313c      	adds	r1, #60	@ 0x3c
 800eb3c:	db19      	blt.n	800eb72 <__ieee754_atan2f+0xe2>
 800eb3e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800eb42:	f000 f919 	bl	800ed78 <fabsf>
 800eb46:	f000 f843 	bl	800ebd0 <atanf>
 800eb4a:	eef0 7a40 	vmov.f32	s15, s0
 800eb4e:	2c01      	cmp	r4, #1
 800eb50:	d012      	beq.n	800eb78 <__ieee754_atan2f+0xe8>
 800eb52:	2c02      	cmp	r4, #2
 800eb54:	d017      	beq.n	800eb86 <__ieee754_atan2f+0xf6>
 800eb56:	2c00      	cmp	r4, #0
 800eb58:	d0ad      	beq.n	800eab6 <__ieee754_atan2f+0x26>
 800eb5a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ebc0 <__ieee754_atan2f+0x130>
 800eb5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb62:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ebc4 <__ieee754_atan2f+0x134>
 800eb66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb6a:	e7a4      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800eb6c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800ebb4 <__ieee754_atan2f+0x124>
 800eb70:	e7ed      	b.n	800eb4e <__ieee754_atan2f+0xbe>
 800eb72:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ebc8 <__ieee754_atan2f+0x138>
 800eb76:	e7ea      	b.n	800eb4e <__ieee754_atan2f+0xbe>
 800eb78:	ee17 3a90 	vmov	r3, s15
 800eb7c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800eb80:	ee07 3a90 	vmov	s15, r3
 800eb84:	e797      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800eb86:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ebc0 <__ieee754_atan2f+0x130>
 800eb8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb8e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ebc4 <__ieee754_atan2f+0x134>
 800eb92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb96:	e78e      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800eb98:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ebc4 <__ieee754_atan2f+0x134>
 800eb9c:	e78b      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800eb9e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ebcc <__ieee754_atan2f+0x13c>
 800eba2:	e788      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800eba4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ebc8 <__ieee754_atan2f+0x138>
 800eba8:	e785      	b.n	800eab6 <__ieee754_atan2f+0x26>
 800ebaa:	bf00      	nop
 800ebac:	c0490fdb 	.word	0xc0490fdb
 800ebb0:	bfc90fdb 	.word	0xbfc90fdb
 800ebb4:	3fc90fdb 	.word	0x3fc90fdb
 800ebb8:	080102e8 	.word	0x080102e8
 800ebbc:	080102dc 	.word	0x080102dc
 800ebc0:	33bbbd2e 	.word	0x33bbbd2e
 800ebc4:	40490fdb 	.word	0x40490fdb
 800ebc8:	00000000 	.word	0x00000000
 800ebcc:	3f490fdb 	.word	0x3f490fdb

0800ebd0 <atanf>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	ee10 5a10 	vmov	r5, s0
 800ebd6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ebda:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ebde:	eef0 7a40 	vmov.f32	s15, s0
 800ebe2:	d310      	bcc.n	800ec06 <atanf+0x36>
 800ebe4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ebe8:	d904      	bls.n	800ebf4 <atanf+0x24>
 800ebea:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ebee:	eeb0 0a67 	vmov.f32	s0, s15
 800ebf2:	bd38      	pop	{r3, r4, r5, pc}
 800ebf4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ed2c <atanf+0x15c>
 800ebf8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ed30 <atanf+0x160>
 800ebfc:	2d00      	cmp	r5, #0
 800ebfe:	bfc8      	it	gt
 800ec00:	eef0 7a47 	vmovgt.f32	s15, s14
 800ec04:	e7f3      	b.n	800ebee <atanf+0x1e>
 800ec06:	4b4b      	ldr	r3, [pc, #300]	@ (800ed34 <atanf+0x164>)
 800ec08:	429c      	cmp	r4, r3
 800ec0a:	d810      	bhi.n	800ec2e <atanf+0x5e>
 800ec0c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ec10:	d20a      	bcs.n	800ec28 <atanf+0x58>
 800ec12:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ed38 <atanf+0x168>
 800ec16:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ec1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec1e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ec22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec26:	dce2      	bgt.n	800ebee <atanf+0x1e>
 800ec28:	f04f 33ff 	mov.w	r3, #4294967295
 800ec2c:	e013      	b.n	800ec56 <atanf+0x86>
 800ec2e:	f000 f8a3 	bl	800ed78 <fabsf>
 800ec32:	4b42      	ldr	r3, [pc, #264]	@ (800ed3c <atanf+0x16c>)
 800ec34:	429c      	cmp	r4, r3
 800ec36:	d84f      	bhi.n	800ecd8 <atanf+0x108>
 800ec38:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ec3c:	429c      	cmp	r4, r3
 800ec3e:	d841      	bhi.n	800ecc4 <atanf+0xf4>
 800ec40:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ec44:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ec48:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ec5c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ed40 <atanf+0x170>
 800ec60:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ed44 <atanf+0x174>
 800ec64:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ed48 <atanf+0x178>
 800ec68:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ec6c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ec70:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ed4c <atanf+0x17c>
 800ec74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ec78:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ed50 <atanf+0x180>
 800ec7c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ec80:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ed54 <atanf+0x184>
 800ec84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ec88:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ed58 <atanf+0x188>
 800ec8c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ec90:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ed5c <atanf+0x18c>
 800ec94:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ec98:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ed60 <atanf+0x190>
 800ec9c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eca0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ed64 <atanf+0x194>
 800eca4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800eca8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ed68 <atanf+0x198>
 800ecac:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ecb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ecb4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ecb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ecbc:	d121      	bne.n	800ed02 <atanf+0x132>
 800ecbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecc2:	e794      	b.n	800ebee <atanf+0x1e>
 800ecc4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ecc8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eccc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ecd6:	e7be      	b.n	800ec56 <atanf+0x86>
 800ecd8:	4b24      	ldr	r3, [pc, #144]	@ (800ed6c <atanf+0x19c>)
 800ecda:	429c      	cmp	r4, r3
 800ecdc:	d80b      	bhi.n	800ecf6 <atanf+0x126>
 800ecde:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ece2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ece6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ecea:	2302      	movs	r3, #2
 800ecec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ecf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecf4:	e7af      	b.n	800ec56 <atanf+0x86>
 800ecf6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ecfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ecfe:	2303      	movs	r3, #3
 800ed00:	e7a9      	b.n	800ec56 <atanf+0x86>
 800ed02:	4a1b      	ldr	r2, [pc, #108]	@ (800ed70 <atanf+0x1a0>)
 800ed04:	491b      	ldr	r1, [pc, #108]	@ (800ed74 <atanf+0x1a4>)
 800ed06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ed0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ed0e:	edd3 6a00 	vldr	s13, [r3]
 800ed12:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ed16:	2d00      	cmp	r5, #0
 800ed18:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed1c:	edd2 7a00 	vldr	s15, [r2]
 800ed20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed24:	bfb8      	it	lt
 800ed26:	eef1 7a67 	vneglt.f32	s15, s15
 800ed2a:	e760      	b.n	800ebee <atanf+0x1e>
 800ed2c:	bfc90fdb 	.word	0xbfc90fdb
 800ed30:	3fc90fdb 	.word	0x3fc90fdb
 800ed34:	3edfffff 	.word	0x3edfffff
 800ed38:	7149f2ca 	.word	0x7149f2ca
 800ed3c:	3f97ffff 	.word	0x3f97ffff
 800ed40:	3c8569d7 	.word	0x3c8569d7
 800ed44:	3d4bda59 	.word	0x3d4bda59
 800ed48:	bd6ef16b 	.word	0xbd6ef16b
 800ed4c:	3d886b35 	.word	0x3d886b35
 800ed50:	3dba2e6e 	.word	0x3dba2e6e
 800ed54:	3e124925 	.word	0x3e124925
 800ed58:	3eaaaaab 	.word	0x3eaaaaab
 800ed5c:	bd15a221 	.word	0xbd15a221
 800ed60:	bd9d8795 	.word	0xbd9d8795
 800ed64:	bde38e38 	.word	0xbde38e38
 800ed68:	be4ccccd 	.word	0xbe4ccccd
 800ed6c:	401bffff 	.word	0x401bffff
 800ed70:	08010304 	.word	0x08010304
 800ed74:	080102f4 	.word	0x080102f4

0800ed78 <fabsf>:
 800ed78:	ee10 3a10 	vmov	r3, s0
 800ed7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed80:	ee00 3a10 	vmov	s0, r3
 800ed84:	4770      	bx	lr
	...

0800ed88 <_init>:
 800ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8a:	bf00      	nop
 800ed8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8e:	bc08      	pop	{r3}
 800ed90:	469e      	mov	lr, r3
 800ed92:	4770      	bx	lr

0800ed94 <_fini>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	bf00      	nop
 800ed98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9a:	bc08      	pop	{r3}
 800ed9c:	469e      	mov	lr, r3
 800ed9e:	4770      	bx	lr
